<?php

declare (strict_types=1);
namespace ApiClients\Client\GitHubEnterpriseCloud;

use ApiClients\Client\GitHubEnterpriseCloud\Hydrator;
use ApiClients\Client\GitHubEnterpriseCloud\Operation;
use ApiClients\Client\GitHubEnterpriseCloud\Schema;
use ApiClients\Client\GitHubEnterpriseCloud\WebHook;
final class Client implements ClientInterface
{
    private readonly \ApiClients\Contracts\HTTP\Headers\AuthenticationInterface $authentication;
    private readonly \React\Http\Browser $browser;
    private readonly \League\OpenAPIValidation\Schema\SchemaValidator $requestSchemaValidator;
    private readonly \League\OpenAPIValidation\Schema\SchemaValidator $responseSchemaValidator;
    /**
     * @var array<class-string, \EventSauce\ObjectHydrator\ObjectMapper>
     */
    private array $hydrator = array();
    private readonly WebHooks $webHooks;
    private readonly Hydrators $hydrators;
    public function __construct(\ApiClients\Contracts\HTTP\Headers\AuthenticationInterface $authentication, \React\Http\Browser $browser)
    {
        $this->authentication = $authentication;
        $this->browser = $browser->withBase('https://api.github.com');
        $this->requestSchemaValidator = new \League\OpenAPIValidation\Schema\SchemaValidator(\League\OpenAPIValidation\Schema\SchemaValidator::VALIDATE_AS_REQUEST);
        $this->responseSchemaValidator = new \League\OpenAPIValidation\Schema\SchemaValidator(\League\OpenAPIValidation\Schema\SchemaValidator::VALIDATE_AS_RESPONSE);
        $this->hydrators = new Hydrators();
        $this->webHooks = new WebHooks($this->requestSchemaValidator, $this->hydrators);
    }
    /**
     * @return ($call is Operation\Meta\Root::OPERATION_MATCH ? Schema\Root : ($call is Operation\Apps\GetAuthenticated::OPERATION_MATCH ? Schema\Integration : ($call is Operation\Apps\CreateFromManifest::OPERATION_MATCH ? Schema\Operation\Apps\CreateFromManifest\Response\Applicationjson\H201|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Apps\GetWebhookConfigForApp::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Operation\Apps\UpdateWebhookConfigForApp::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Operation\Apps\ListWebhookDeliveries::OPERATION_MATCH ? Schema\HookDeliveryItem|Schema\BasicError|Schema\ScimError|Schema\ValidationError : ($call is Operation\Apps\GetWebhookDelivery::OPERATION_MATCH ? Schema\HookDelivery|Schema\BasicError|Schema\ScimError|Schema\ValidationError : ($call is Operation\Apps\RedeliverWebhookDelivery::OPERATION_MATCH ? Schema\AuditLogEvent\Config|Schema\BasicError|Schema\ScimError|Schema\ValidationError : ($call is Operation\Apps\ListInstallationRequestsForAuthenticatedApp::OPERATION_MATCH ? Schema\IntegrationInstallationRequest|Schema\BasicError : ($call is Operation\Apps\ListInstallations::OPERATION_MATCH ? Schema\Installation : ($call is Operation\Apps\GetInstallation::OPERATION_MATCH ? Schema\Installation|Schema\BasicError : ($call is Operation\Apps\DeleteInstallation::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Apps\CreateInstallationAccessToken::OPERATION_MATCH ? Schema\InstallationToken|Schema\BasicError|Schema\ValidationError : ($call is Operation\Apps\SuspendInstallation::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Apps\UnsuspendInstallation::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Apps\DeleteAuthorization::OPERATION_MATCH ? Schema\ValidationError : ($call is Operation\Apps\CheckToken::OPERATION_MATCH ? Schema\Authorization|Schema\ValidationError|Schema\BasicError : ($call is Operation\Apps\DeleteToken::OPERATION_MATCH ? Schema\ValidationError : ($call is Operation\Apps\ResetToken::OPERATION_MATCH ? Schema\Authorization|Schema\ValidationError : ($call is Operation\Apps\ScopeToken::OPERATION_MATCH ? Schema\Authorization|Schema\BasicError|Schema\ValidationError : ($call is Operation\Apps\GetBySlug::OPERATION_MATCH ? Schema\Integration|Schema\BasicError : ($call is Operation\CodesOfConduct\GetAllCodesOfConduct::OPERATION_MATCH ? Schema\CodeOfConduct : ($call is Operation\CodesOfConduct\GetConductCode::OPERATION_MATCH ? Schema\CodeOfConduct|Schema\BasicError : ($call is Operation\Emojis\Get::OPERATION_MATCH ? Schema\Operation\Emojis\Get\Response\Applicationjson\H200 : ($call is Operation\EnterpriseAdmin\GetServerStatistics::OPERATION_MATCH ? Schema\ServerStatistics : ($call is Operation\Actions\GetActionsCacheUsageForEnterprise::OPERATION_MATCH ? Schema\ActionsCacheUsageOrgEnterprise : ($call is Operation\Actions\SetActionsOidcCustomIssuerPolicyForEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\EnterpriseAdmin\GetGithubActionsPermissionsEnterprise::OPERATION_MATCH ? Schema\ActionsEnterprisePermissions : ($call is Operation\EnterpriseAdmin\SetGithubActionsPermissionsEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\EnterpriseAdmin\ListSelectedOrganizationsEnabledGithubActionsEnterprise::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListSelectedOrganizationsEnabledGithubActionsEnterprise\Response\Applicationjson\H200 : ($call is Operation\EnterpriseAdmin\SetSelectedOrganizationsEnabledGithubActionsEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\EnterpriseAdmin\EnableSelectedOrganizationGithubActionsEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\EnterpriseAdmin\DisableSelectedOrganizationGithubActionsEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\EnterpriseAdmin\GetAllowedActionsEnterprise::OPERATION_MATCH ? Schema\SelectedActions : ($call is Operation\EnterpriseAdmin\SetAllowedActionsEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\GetGithubActionsDefaultWorkflowPermissionsEnterprise::OPERATION_MATCH ? Schema\ActionsGetDefaultWorkflowPermissions : ($call is Operation\Actions\SetGithubActionsDefaultWorkflowPermissionsEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\EnterpriseAdmin\ListSelfHostedRunnerGroupsForEnterprise::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListSelfHostedRunnerGroupsForEnterprise\Response\Applicationjson\H200 : ($call is Operation\EnterpriseAdmin\CreateSelfHostedRunnerGroupForEnterprise::OPERATION_MATCH ? Schema\RunnerGroupsEnterprise : ($call is Operation\EnterpriseAdmin\GetSelfHostedRunnerGroupForEnterprise::OPERATION_MATCH ? Schema\RunnerGroupsEnterprise : ($call is Operation\EnterpriseAdmin\DeleteSelfHostedRunnerGroupFromEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\EnterpriseAdmin\UpdateSelfHostedRunnerGroupForEnterprise::OPERATION_MATCH ? Schema\RunnerGroupsEnterprise : ($call is Operation\EnterpriseAdmin\ListOrgAccessToSelfHostedRunnerGroupInEnterprise::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListSelectedOrganizationsEnabledGithubActionsEnterprise\Response\Applicationjson\H200 : ($call is Operation\EnterpriseAdmin\SetOrgAccessToSelfHostedRunnerGroupInEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\EnterpriseAdmin\AddOrgAccessToSelfHostedRunnerGroupInEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\EnterpriseAdmin\RemoveOrgAccessToSelfHostedRunnerGroupInEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\EnterpriseAdmin\ListSelfHostedRunnersInGroupForEnterprise::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListSelfHostedRunnersInGroupForEnterprise\Response\Applicationjson\H200 : ($call is Operation\EnterpriseAdmin\SetSelfHostedRunnersInGroupForEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\EnterpriseAdmin\AddSelfHostedRunnerToGroupForEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\EnterpriseAdmin\RemoveSelfHostedRunnerFromGroupForEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\EnterpriseAdmin\ListSelfHostedRunnersForEnterprise::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListSelfHostedRunnersForEnterprise\Response\Applicationjson\H200 : ($call is Operation\EnterpriseAdmin\ListRunnerApplicationsForEnterprise::OPERATION_MATCH ? Schema\RunnerApplication : ($call is Operation\EnterpriseAdmin\CreateRegistrationTokenForEnterprise::OPERATION_MATCH ? Schema\AuthenticationToken : ($call is Operation\EnterpriseAdmin\CreateRemoveTokenForEnterprise::OPERATION_MATCH ? Schema\AuthenticationToken : ($call is Operation\EnterpriseAdmin\GetSelfHostedRunnerForEnterprise::OPERATION_MATCH ? Schema\Runner : ($call is Operation\EnterpriseAdmin\DeleteSelfHostedRunnerFromEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\EnterpriseAdmin\SetCustomLabelsForSelfHostedRunnerForEnterprise::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\EnterpriseAdmin\AddCustomLabelsToSelfHostedRunnerForEnterprise::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\EnterpriseAdmin\RemoveAllCustomLabelsFromSelfHostedRunnerForEnterprise::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\EnterpriseAdmin\RemoveCustomLabelFromSelfHostedRunnerForEnterprise::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\AnnouncementBanners\GetAnnouncementBannerForEnterprise::OPERATION_MATCH ? Schema\AnnouncementBanner : ($call is Operation\AnnouncementBanners\RemoveAnnouncementBannerForEnterprise::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\AnnouncementBanners\SetAnnouncementBannerForEnterprise::OPERATION_MATCH ? Schema\AnnouncementBanner : ($call is Operation\EnterpriseAdmin\GetAuditLog::OPERATION_MATCH ? Schema\AuditLogEvent : ($call is Operation\CodeScanning\ListAlertsForEnterprise::OPERATION_MATCH ? Schema\CodeScanningOrganizationAlertItems|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\SecretScanning\GetSecurityAnalysisSettingsForEnterprise::OPERATION_MATCH ? Schema\EnterpriseSecurityAnalysisSettings|Schema\BasicError : ($call is Operation\SecretScanning\PatchSecurityAnalysisSettingsForEnterprise::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\EnterpriseAdmin\GetConsumedLicenses::OPERATION_MATCH ? Schema\GetConsumedLicenses : ($call is Operation\Dependabot\ListAlertsForEnterprise::OPERATION_MATCH ? Schema\DependabotAlertWithRepository|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\EnterpriseAdmin\GetLicenseSyncStatus::OPERATION_MATCH ? Schema\GetLicenseSyncStatus : ($call is Operation\SecretScanning\ListAlertsForEnterprise::OPERATION_MATCH ? Schema\OrganizationSecretScanningAlert|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\Billing\GetGithubActionsBillingGhe::OPERATION_MATCH ? Schema\ActionsBillingUsage : ($call is Operation\Billing\GetGithubAdvancedSecurityBillingGhe::OPERATION_MATCH ? Schema\AdvancedSecurityActiveCommitters|Schema\BasicError : ($call is Operation\Billing\GetGithubPackagesBillingGhe::OPERATION_MATCH ? Schema\PackagesBillingUsage : ($call is Operation\Billing\GetSharedStorageBillingGhe::OPERATION_MATCH ? Schema\CombinedBillingUsage : ($call is Operation\SecretScanning\PostSecurityProductEnablementForEnterprise::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Activity\ListPublicEvents::OPERATION_MATCH ? Schema\Event|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\Activity\GetFeeds::OPERATION_MATCH ? Schema\Feed : ($call is Operation\Gists\List_::OPERATION_MATCH ? Schema\BaseGist|Schema\BasicError : ($call is Operation\Gists\Create::OPERATION_MATCH ? Schema\GistSimple|Schema\ValidationError|Schema\BasicError : ($call is Operation\Gists\ListPublic::OPERATION_MATCH ? Schema\BaseGist|Schema\ValidationError|Schema\BasicError : ($call is Operation\Gists\ListStarred::OPERATION_MATCH ? Schema\BaseGist|Schema\BasicError : ($call is Operation\Gists\Get::OPERATION_MATCH ? Schema\GistSimple|Schema\Operation\Gists\Get\Response\Applicationjson\H403|Schema\BasicError : ($call is Operation\Gists\Delete::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Gists\Update::OPERATION_MATCH ? Schema\GistSimple|Schema\ValidationError|Schema\BasicError : ($call is Operation\Gists\ListComments::OPERATION_MATCH ? Schema\GistComment|Schema\BasicError : ($call is Operation\Gists\CreateComment::OPERATION_MATCH ? Schema\GistComment|Schema\BasicError : ($call is Operation\Gists\GetComment::OPERATION_MATCH ? Schema\GistComment|Schema\BasicError|Schema\Operation\Gists\Get\Response\Applicationjson\H403 : ($call is Operation\Gists\DeleteComment::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Gists\UpdateComment::OPERATION_MATCH ? Schema\GistComment|Schema\BasicError : ($call is Operation\Gists\ListCommits::OPERATION_MATCH ? Schema\GistCommit|Schema\BasicError : ($call is Operation\Gists\ListForks::OPERATION_MATCH ? Schema\GistSimple|Schema\BasicError : ($call is Operation\Gists\Fork::OPERATION_MATCH ? Schema\BaseGist|Schema\BasicError|Schema\ValidationError : ($call is Operation\Gists\CheckIsStarred::OPERATION_MATCH ? Schema\Operation\Gists\CheckIsStarred\Response\Applicationjson\H404|Schema\BasicError : ($call is Operation\Gists\Star::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Gists\Unstar::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Gists\GetRevision::OPERATION_MATCH ? Schema\GistSimple|Schema\ValidationError|Schema\BasicError : ($call is Operation\Gitignore\GetAllTemplates::OPERATION_MATCH ? Schema\WebHookHeader\UserAgent : ($call is Operation\Gitignore\GetTemplate::OPERATION_MATCH ? Schema\GitignoreTemplate : ($call is Operation\Apps\ListReposAccessibleToInstallation::OPERATION_MATCH ? Schema\Operation\Apps\ListReposAccessibleToInstallation\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Apps\RevokeInstallationAccessToken::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Issues\List_::OPERATION_MATCH ? Schema\Issue|Schema\ValidationError|Schema\BasicError : ($call is Operation\Licenses\GetAllCommonlyUsed::OPERATION_MATCH ? Schema\LicenseSimple : ($call is Operation\Licenses\Get::OPERATION_MATCH ? Schema\License|Schema\BasicError : ($call is Operation\Markdown\Render::OPERATION_MATCH ? Schema\WebHookHeader\UserAgent : ($call is Operation\Markdown\RenderRaw::OPERATION_MATCH ? Schema\WebHookHeader\UserAgent : ($call is Operation\Apps\GetSubscriptionPlanForAccount::OPERATION_MATCH ? Schema\MarketplacePurchase|Schema\BasicError : ($call is Operation\Apps\ListPlans::OPERATION_MATCH ? Schema\MarketplaceListingPlan|Schema\BasicError : ($call is Operation\Apps\ListAccountsForPlan::OPERATION_MATCH ? Schema\MarketplacePurchase|Schema\BasicError|Schema\ValidationError : ($call is Operation\Apps\GetSubscriptionPlanForAccountStubbed::OPERATION_MATCH ? Schema\MarketplacePurchase|Schema\BasicError : ($call is Operation\Apps\ListPlansStubbed::OPERATION_MATCH ? Schema\MarketplaceListingPlan|Schema\BasicError : ($call is Operation\Apps\ListAccountsForPlanStubbed::OPERATION_MATCH ? Schema\MarketplacePurchase|Schema\BasicError : ($call is Operation\Meta\Get::OPERATION_MATCH ? Schema\ApiOverview : ($call is Operation\Activity\ListPublicEventsForRepoNetwork::OPERATION_MATCH ? Schema\Event|Schema\BasicError : ($call is Operation\Activity\ListNotificationsForAuthenticatedUser::OPERATION_MATCH ? Schema\Thread|Schema\BasicError|Schema\ValidationError : ($call is Operation\Activity\MarkNotificationsAsRead::OPERATION_MATCH ? Schema\Operation\Activity\MarkNotificationsAsRead\Response\Applicationjson\H202|Schema\BasicError : ($call is Operation\Activity\GetThread::OPERATION_MATCH ? Schema\Thread|Schema\BasicError : ($call is Operation\Activity\MarkThreadAsRead::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Activity\GetThreadSubscriptionForAuthenticatedUser::OPERATION_MATCH ? Schema\ThreadSubscription|Schema\BasicError : ($call is Operation\Activity\SetThreadSubscription::OPERATION_MATCH ? Schema\ThreadSubscription|Schema\BasicError : ($call is Operation\Activity\DeleteThreadSubscription::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Meta\GetOctocat::OPERATION_MATCH ? Schema\WebHookHeader\UserAgent : ($call is Operation\Orgs\List_::OPERATION_MATCH ? Schema\OrganizationSimple : ($call is Operation\Orgs\ListCustomRoles::OPERATION_MATCH ? Schema\Operation\Orgs\ListCustomRoles\Response\Applicationjson\H200 : ($call is Operation\Orgs\Get::OPERATION_MATCH ? Schema\OrganizationFull|Schema\BasicError : ($call is Operation\Orgs\Update::OPERATION_MATCH ? Schema\OrganizationFull|Schema\Operation\Orgs\Update\Response\Applicationjson\H422|Schema\BasicError : ($call is Operation\Actions\GetActionsCacheUsageForOrg::OPERATION_MATCH ? Schema\ActionsCacheUsageOrgEnterprise : ($call is Operation\Actions\GetActionsCacheUsageByRepoForOrg::OPERATION_MATCH ? Schema\Operation\Actions\GetActionsCacheUsageByRepoForOrg\Response\Applicationjson\H200 : ($call is Operation\Oidc\GetOidcCustomSubTemplateForOrg::OPERATION_MATCH ? Schema\OidcCustomSub : ($call is Operation\Oidc\UpdateOidcCustomSubTemplateForOrg::OPERATION_MATCH ? Schema\EmptyObject|Schema\BasicError : ($call is Operation\Actions\GetGithubActionsPermissionsOrganization::OPERATION_MATCH ? Schema\ActionsOrganizationPermissions : ($call is Operation\Actions\SetGithubActionsPermissionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization::OPERATION_MATCH ? Schema\Operation\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization\Response\Applicationjson\H200 : ($call is Operation\Actions\SetSelectedRepositoriesEnabledGithubActionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\EnableSelectedRepositoryGithubActionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\DisableSelectedRepositoryGithubActionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\GetAllowedActionsOrganization::OPERATION_MATCH ? Schema\SelectedActions : ($call is Operation\Actions\SetAllowedActionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\GetGithubActionsDefaultWorkflowPermissionsOrganization::OPERATION_MATCH ? Schema\ActionsGetDefaultWorkflowPermissions : ($call is Operation\Actions\SetGithubActionsDefaultWorkflowPermissionsOrganization::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListRequiredWorkflows::OPERATION_MATCH ? Schema\Operation\Actions\ListRequiredWorkflows\Response\Applicationjson\H200 : ($call is Operation\Actions\CreateRequiredWorkflow::OPERATION_MATCH ? Schema\RequiredWorkflow|Schema\ValidationErrorSimple : ($call is Operation\Actions\GetRequiredWorkflow::OPERATION_MATCH ? Schema\RequiredWorkflow : ($call is Operation\Actions\DeleteRequiredWorkflow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\UpdateRequiredWorkflow::OPERATION_MATCH ? Schema\RequiredWorkflow|Schema\ValidationErrorSimple : ($call is Operation\Actions\ListSelectedRepositoriesRequiredWorkflow::OPERATION_MATCH ? Schema\Operation\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization\Response\Applicationjson\H200 : ($call is Operation\Actions\SetSelectedReposToRequiredWorkflow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\AddSelectedRepoToRequiredWorkflow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\RemoveSelectedRepoFromRequiredWorkflow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListSelfHostedRunnerGroupsForOrg::OPERATION_MATCH ? Schema\Operation\Actions\ListSelfHostedRunnerGroupsForOrg\Response\Applicationjson\H200 : ($call is Operation\Actions\CreateSelfHostedRunnerGroupForOrg::OPERATION_MATCH ? Schema\RunnerGroupsOrg : ($call is Operation\Actions\GetSelfHostedRunnerGroupForOrg::OPERATION_MATCH ? Schema\RunnerGroupsOrg : ($call is Operation\Actions\DeleteSelfHostedRunnerGroupFromOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\UpdateSelfHostedRunnerGroupForOrg::OPERATION_MATCH ? Schema\RunnerGroupsOrg : ($call is Operation\Actions\ListRepoAccessToSelfHostedRunnerGroupInOrg::OPERATION_MATCH ? Schema\Operation\Actions\ListRepoAccessToSelfHostedRunnerGroupInOrg\Response\Applicationjson\H200 : ($call is Operation\Actions\SetRepoAccessToSelfHostedRunnerGroupInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\AddRepoAccessToSelfHostedRunnerGroupInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\RemoveRepoAccessToSelfHostedRunnerGroupInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListSelfHostedRunnersInGroupForOrg::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListSelfHostedRunnersInGroupForEnterprise\Response\Applicationjson\H200 : ($call is Operation\Actions\SetSelfHostedRunnersInGroupForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\AddSelfHostedRunnerToGroupForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\RemoveSelfHostedRunnerFromGroupForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListSelfHostedRunnersForOrg::OPERATION_MATCH ? Schema\Operation\Actions\ListSelfHostedRunnersForOrg\Response\Applicationjson\H200 : ($call is Operation\Actions\ListRunnerApplicationsForOrg::OPERATION_MATCH ? Schema\RunnerApplication : ($call is Operation\Actions\CreateRegistrationTokenForOrg::OPERATION_MATCH ? Schema\AuthenticationToken : ($call is Operation\Actions\CreateRemoveTokenForOrg::OPERATION_MATCH ? Schema\AuthenticationToken : ($call is Operation\Actions\GetSelfHostedRunnerForOrg::OPERATION_MATCH ? Schema\Runner : ($call is Operation\Actions\DeleteSelfHostedRunnerFromOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListLabelsForSelfHostedRunnerForOrg::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Actions\SetCustomLabelsForSelfHostedRunnerForOrg::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Actions\AddCustomLabelsToSelfHostedRunnerForOrg::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForOrg::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Actions\RemoveCustomLabelFromSelfHostedRunnerForOrg::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Actions\ListOrgSecrets::OPERATION_MATCH ? Schema\Operation\Actions\ListOrgSecrets\Response\Applicationjson\H200 : ($call is Operation\Actions\GetOrgPublicKey::OPERATION_MATCH ? Schema\ActionsPublicKey : ($call is Operation\Actions\GetOrgSecret::OPERATION_MATCH ? Schema\OrganizationActionsSecret : ($call is Operation\Actions\CreateOrUpdateOrgSecret::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\DeleteOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListSelectedReposForOrgSecret::OPERATION_MATCH ? Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200 : ($call is Operation\Actions\SetSelectedReposForOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\AddSelectedRepoToOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\RemoveSelectedRepoFromOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListOrgVariables::OPERATION_MATCH ? Schema\Operation\Actions\ListOrgVariables\Response\Applicationjson\H200 : ($call is Operation\Actions\CreateOrgVariable::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\GetOrgVariable::OPERATION_MATCH ? Schema\OrganizationActionsVariable : ($call is Operation\Actions\DeleteOrgVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\UpdateOrgVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListSelectedReposForOrgVariable::OPERATION_MATCH ? Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200 : ($call is Operation\Actions\SetSelectedReposForOrgVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\AddSelectedRepoToOrgVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\RemoveSelectedRepoFromOrgVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\AnnouncementBanners\GetAnnouncementBannerForOrg::OPERATION_MATCH ? Schema\AnnouncementBanner : ($call is Operation\AnnouncementBanners\RemoveAnnouncementBannerForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\AnnouncementBanners\SetAnnouncementBannerForOrg::OPERATION_MATCH ? Schema\AnnouncementBanner : ($call is Operation\Orgs\GetAuditLog::OPERATION_MATCH ? Schema\AuditLogEvent : ($call is Operation\Orgs\ListBlockedUsers::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Orgs\CheckBlockedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Orgs\BlockUser::OPERATION_MATCH ? Schema\ValidationError : ($call is Operation\Orgs\UnblockUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\CodeScanning\ListAlertsForOrg::OPERATION_MATCH ? Schema\CodeScanningOrganizationAlertItems|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\Codespaces\ListInOrganization::OPERATION_MATCH ? Schema\Operation\Codespaces\ListInOrganization\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Codespaces\SetCodespacesBilling::OPERATION_MATCH ? Schema\BasicError|Schema\ValidationError : ($call is Operation\Codespaces\SetCodespacesBillingUsers::OPERATION_MATCH ? Schema\BasicError|Schema\ValidationError : ($call is Operation\Codespaces\DeleteCodespacesBillingUsers::OPERATION_MATCH ? Schema\BasicError|Schema\ValidationError : ($call is Operation\Codespaces\ListOrgSecrets::OPERATION_MATCH ? Schema\Operation\Codespaces\ListOrgSecrets\Response\Applicationjson\H200 : ($call is Operation\Codespaces\GetOrgPublicKey::OPERATION_MATCH ? Schema\CodespacesPublicKey : ($call is Operation\Codespaces\GetOrgSecret::OPERATION_MATCH ? Schema\CodespacesOrgSecret : ($call is Operation\Codespaces\CreateOrUpdateOrgSecret::OPERATION_MATCH ? Schema\EmptyObject|Schema\BasicError|Schema\ValidationError : ($call is Operation\Codespaces\DeleteOrgSecret::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Codespaces\ListSelectedReposForOrgSecret::OPERATION_MATCH ? Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Codespaces\SetSelectedReposForOrgSecret::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Codespaces\AddSelectedRepoToOrgSecret::OPERATION_MATCH ? Schema\BasicError|Schema\ValidationError : ($call is Operation\Codespaces\RemoveSelectedRepoFromOrgSecret::OPERATION_MATCH ? Schema\BasicError|Schema\ValidationError : ($call is Operation\Orgs\ListSamlSsoAuthorizations::OPERATION_MATCH ? Schema\CredentialAuthorization : ($call is Operation\Orgs\RemoveSamlSsoAuthorization::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Orgs\CreateCustomRole::OPERATION_MATCH ? Schema\OrganizationCustomRepositoryRole|Schema\ValidationError|Schema\BasicError : ($call is Operation\Orgs\GetCustomRole::OPERATION_MATCH ? Schema\OrganizationCustomRepositoryRole|Schema\BasicError : ($call is Operation\Orgs\DeleteCustomRole::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Orgs\UpdateCustomRole::OPERATION_MATCH ? Schema\OrganizationCustomRepositoryRole|Schema\ValidationError|Schema\BasicError : ($call is Operation\Dependabot\ListAlertsForOrg::OPERATION_MATCH ? Schema\DependabotAlertWithRepository|Schema\BasicError|Schema\ScimError|Schema\ValidationErrorSimple : ($call is Operation\Dependabot\ListOrgSecrets::OPERATION_MATCH ? Schema\Operation\Dependabot\ListOrgSecrets\Response\Applicationjson\H200 : ($call is Operation\Dependabot\GetOrgPublicKey::OPERATION_MATCH ? Schema\DependabotPublicKey : ($call is Operation\Dependabot\GetOrgSecret::OPERATION_MATCH ? Schema\OrganizationDependabotSecret : ($call is Operation\Dependabot\CreateOrUpdateOrgSecret::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Dependabot\DeleteOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Dependabot\ListSelectedReposForOrgSecret::OPERATION_MATCH ? Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200 : ($call is Operation\Dependabot\SetSelectedReposForOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Dependabot\AddSelectedRepoToOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Dependabot\RemoveSelectedRepoFromOrgSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Activity\ListPublicOrgEvents::OPERATION_MATCH ? Schema\Event : ($call is Operation\Teams\ExternalIdpGroupInfoForOrg::OPERATION_MATCH ? Schema\ExternalGroup : ($call is Operation\Teams\ListExternalIdpGroupsForOrg::OPERATION_MATCH ? Schema\ExternalGroups : ($call is Operation\Orgs\ListFailedInvitations::OPERATION_MATCH ? Schema\OrganizationInvitation|Schema\BasicError : ($call is Operation\Orgs\ListFineGrainedPermissions::OPERATION_MATCH ? Schema\RepositoryFineGrainedPermission : ($call is Operation\Orgs\ListWebhooks::OPERATION_MATCH ? Schema\OrgHook|Schema\BasicError : ($call is Operation\Orgs\CreateWebhook::OPERATION_MATCH ? Schema\OrgHook|Schema\ValidationError|Schema\BasicError : ($call is Operation\Orgs\GetWebhook::OPERATION_MATCH ? Schema\OrgHook|Schema\BasicError : ($call is Operation\Orgs\DeleteWebhook::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Orgs\UpdateWebhook::OPERATION_MATCH ? Schema\OrgHook|Schema\ValidationError|Schema\BasicError : ($call is Operation\Orgs\GetWebhookConfigForOrg::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Operation\Orgs\UpdateWebhookConfigForOrg::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Operation\Orgs\ListWebhookDeliveries::OPERATION_MATCH ? Schema\HookDeliveryItem|Schema\BasicError|Schema\ScimError|Schema\ValidationError : ($call is Operation\Orgs\GetWebhookDelivery::OPERATION_MATCH ? Schema\HookDelivery|Schema\BasicError|Schema\ScimError|Schema\ValidationError : ($call is Operation\Orgs\RedeliverWebhookDelivery::OPERATION_MATCH ? Schema\AuditLogEvent\Config|Schema\BasicError|Schema\ScimError|Schema\ValidationError : ($call is Operation\Orgs\PingWebhook::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Apps\GetOrgInstallation::OPERATION_MATCH ? Schema\Installation : ($call is Operation\Orgs\ListAppInstallations::OPERATION_MATCH ? Schema\Operation\Orgs\ListAppInstallations\Response\Applicationjson\H200 : ($call is Operation\Interactions\GetRestrictionsForOrg::OPERATION_MATCH ? Schema\Operation\Interactions\GetRestrictionsForOrg\Response\Applicationjson\H200 : ($call is Operation\Interactions\SetRestrictionsForOrg::OPERATION_MATCH ? Schema\InteractionLimitResponse|Schema\ValidationError : ($call is Operation\Interactions\RemoveRestrictionsForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Orgs\ListPendingInvitations::OPERATION_MATCH ? Schema\OrganizationInvitation|Schema\BasicError : ($call is Operation\Orgs\CreateInvitation::OPERATION_MATCH ? Schema\OrganizationInvitation|Schema\ValidationError|Schema\BasicError : ($call is Operation\Orgs\CancelInvitation::OPERATION_MATCH ? Schema\ValidationError|Schema\BasicError : ($call is Operation\Orgs\ListInvitationTeams::OPERATION_MATCH ? Schema\Team|Schema\BasicError : ($call is Operation\Issues\ListForOrg::OPERATION_MATCH ? Schema\Issue|Schema\BasicError : ($call is Operation\Orgs\ListMembers::OPERATION_MATCH ? Schema\SimpleUser|Schema\ValidationError : ($call is Operation\Orgs\CheckMembershipForUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Orgs\RemoveMember::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Codespaces\GetCodespacesForUserInOrg::OPERATION_MATCH ? Schema\Operation\Codespaces\ListInOrganization\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Codespaces\DeleteFromOrganization::OPERATION_MATCH ? Schema\AuditLogEvent\Config|Schema\BasicError : ($call is Operation\Codespaces\StopInOrganization::OPERATION_MATCH ? Schema\Codespace|Schema\BasicError : ($call is Operation\Orgs\GetMembershipForUser::OPERATION_MATCH ? Schema\OrgMembership|Schema\BasicError : ($call is Operation\Orgs\SetMembershipForUser::OPERATION_MATCH ? Schema\OrgMembership|Schema\ValidationError|Schema\BasicError : ($call is Operation\Orgs\RemoveMembershipForUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Migrations\ListForOrg::OPERATION_MATCH ? Schema\Migration : ($call is Operation\Migrations\StartForOrg::OPERATION_MATCH ? Schema\Migration|Schema\BasicError|Schema\ValidationError : ($call is Operation\Migrations\GetStatusForOrg::OPERATION_MATCH ? Schema\Migration|Schema\BasicError : ($call is Operation\Migrations\DownloadArchiveForOrg::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Migrations\DeleteArchiveForOrg::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Migrations\UnlockRepoForOrg::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Migrations\ListReposForOrg::OPERATION_MATCH ? Schema\MinimalRepository|Schema\BasicError : ($call is Operation\Orgs\ListOutsideCollaborators::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Orgs\ConvertMemberToOutsideCollaborator::OPERATION_MATCH ? Schema\Operation\Gists\CheckIsStarred\Response\Applicationjson\H404|Schema\BasicError : ($call is Operation\Orgs\RemoveOutsideCollaborator::OPERATION_MATCH ? Schema\Operation\Orgs\RemoveOutsideCollaborator\Response\Applicationjson\H422 : ($call is Operation\Packages\ListPackagesForOrganization::OPERATION_MATCH ? Schema\Package|Schema\BasicError : ($call is Operation\Packages\GetPackageForOrganization::OPERATION_MATCH ? Schema\Package : ($call is Operation\Packages\DeletePackageForOrg::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Packages\RestorePackageForOrg::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Packages\GetAllPackageVersionsForPackageOwnedByOrg::OPERATION_MATCH ? Schema\PackageVersion|Schema\BasicError : ($call is Operation\Packages\GetPackageVersionForOrganization::OPERATION_MATCH ? Schema\PackageVersion : ($call is Operation\Packages\DeletePackageVersionForOrg::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Packages\RestorePackageVersionForOrg::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Projects\ListForOrg::OPERATION_MATCH ? Schema\Project|Schema\ValidationErrorSimple : ($call is Operation\Projects\CreateForOrg::OPERATION_MATCH ? Schema\Project|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Orgs\ListPublicMembers::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Orgs\CheckPublicMembershipForUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Orgs\SetPublicMembershipForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Orgs\RemovePublicMembershipForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListForOrg::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Repos\CreateInOrg::OPERATION_MATCH ? Schema\Repository|Schema\BasicError|Schema\ValidationError : ($call is Operation\SecretScanning\ListAlertsForOrg::OPERATION_MATCH ? Schema\OrganizationSecretScanningAlert|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\Orgs\ListSecurityManagerTeams::OPERATION_MATCH ? Schema\TeamSimple : ($call is Operation\Orgs\AddSecurityManagerTeam::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Orgs\RemoveSecurityManagerTeam::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Billing\GetGithubActionsBillingOrg::OPERATION_MATCH ? Schema\ActionsBillingUsage : ($call is Operation\Billing\GetGithubAdvancedSecurityBillingOrg::OPERATION_MATCH ? Schema\AdvancedSecurityActiveCommitters|Schema\BasicError : ($call is Operation\Billing\GetGithubPackagesBillingOrg::OPERATION_MATCH ? Schema\PackagesBillingUsage : ($call is Operation\Billing\GetSharedStorageBillingOrg::OPERATION_MATCH ? Schema\CombinedBillingUsage : ($call is Operation\Teams\ListIdpGroupsForOrg::OPERATION_MATCH ? Schema\GroupMapping : ($call is Operation\Teams\List_::OPERATION_MATCH ? Schema\Team|Schema\BasicError : ($call is Operation\Teams\Create::OPERATION_MATCH ? Schema\TeamFull|Schema\ValidationError|Schema\BasicError : ($call is Operation\Teams\GetByName::OPERATION_MATCH ? Schema\TeamFull|Schema\BasicError : ($call is Operation\Teams\DeleteInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\UpdateInOrg::OPERATION_MATCH ? Schema\TeamFull|Schema\BasicError|Schema\ValidationError : ($call is Operation\Teams\ListDiscussionsInOrg::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Operation\Teams\CreateDiscussionInOrg::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Operation\Teams\GetDiscussionInOrg::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Operation\Teams\DeleteDiscussionInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\UpdateDiscussionInOrg::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Operation\Teams\ListDiscussionCommentsInOrg::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Operation\Teams\CreateDiscussionCommentInOrg::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Operation\Teams\GetDiscussionCommentInOrg::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Operation\Teams\DeleteDiscussionCommentInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\UpdateDiscussionCommentInOrg::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Operation\Reactions\ListForTeamDiscussionCommentInOrg::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\CreateForTeamDiscussionCommentInOrg::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\DeleteForTeamDiscussionComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Reactions\ListForTeamDiscussionInOrg::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\CreateForTeamDiscussionInOrg::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\DeleteForTeamDiscussion::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\ListLinkedExternalIdpGroupsToTeamForOrg::OPERATION_MATCH ? Schema\ExternalGroups : ($call is Operation\Teams\UnlinkExternalIdpGroupFromTeamForOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\LinkExternalIdpGroupToTeamForOrg::OPERATION_MATCH ? Schema\ExternalGroup : ($call is Operation\Teams\ListPendingInvitationsInOrg::OPERATION_MATCH ? Schema\OrganizationInvitation : ($call is Operation\Teams\ListMembersInOrg::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Teams\GetMembershipForUserInOrg::OPERATION_MATCH ? Schema\TeamMembership : ($call is Operation\Teams\AddOrUpdateMembershipForUserInOrg::OPERATION_MATCH ? Schema\TeamMembership : ($call is Operation\Teams\RemoveMembershipForUserInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\ListProjectsInOrg::OPERATION_MATCH ? Schema\TeamProject : ($call is Operation\Teams\CheckPermissionsForProjectInOrg::OPERATION_MATCH ? Schema\TeamProject : ($call is Operation\Teams\AddOrUpdateProjectPermissionsInOrg::OPERATION_MATCH ? Schema\Operation\Orgs\RemoveOutsideCollaborator\Response\Applicationjson\H422 : ($call is Operation\Teams\RemoveProjectInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\ListReposInOrg::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Teams\CheckPermissionsForRepoInOrg::OPERATION_MATCH ? Schema\TeamRepository : ($call is Operation\Teams\AddOrUpdateRepoPermissionsInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\RemoveRepoInOrg::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\ListIdpGroupsInOrg::OPERATION_MATCH ? Schema\GroupMapping : ($call is Operation\Teams\CreateOrUpdateIdpGroupConnectionsInOrg::OPERATION_MATCH ? Schema\GroupMapping : ($call is Operation\Teams\ListChildInOrg::OPERATION_MATCH ? Schema\Team : ($call is Operation\Orgs\EnableOrDisableSecurityProductOnAllOrgRepos::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Projects\GetCard::OPERATION_MATCH ? Schema\ProjectCard|Schema\BasicError : ($call is Operation\Projects\DeleteCard::OPERATION_MATCH ? Schema\Operation\Projects\DeleteCard\Response\Applicationjson\H403|Schema\BasicError : ($call is Operation\Projects\UpdateCard::OPERATION_MATCH ? Schema\ProjectCard|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Projects\MoveCard::OPERATION_MATCH ? Schema\Operation\Gists\CheckIsStarred\Response\Applicationjson\H404|Schema\Operation\Projects\MoveCard\Response\Applicationjson\H403|Schema\BasicError|Schema\Operation\Projects\MoveCard\Response\Applicationjson\H503|Schema\ValidationError : ($call is Operation\Projects\GetColumn::OPERATION_MATCH ? Schema\ProjectColumn|Schema\BasicError : ($call is Operation\Projects\DeleteColumn::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Projects\UpdateColumn::OPERATION_MATCH ? Schema\ProjectColumn|Schema\BasicError : ($call is Operation\Projects\ListCards::OPERATION_MATCH ? Schema\ProjectCard|Schema\BasicError : ($call is Operation\Projects\CreateCard::OPERATION_MATCH ? Schema\ProjectCard|Schema\BasicError|Schema\Operation\Orgs\Update\Response\Applicationjson\H422|Schema\Operation\Projects\MoveCard\Response\Applicationjson\H503 : ($call is Operation\Projects\MoveColumn::OPERATION_MATCH ? Schema\Operation\Gists\CheckIsStarred\Response\Applicationjson\H404|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Projects\Get::OPERATION_MATCH ? Schema\Project|Schema\BasicError : ($call is Operation\Projects\Delete::OPERATION_MATCH ? Schema\Operation\Projects\DeleteCard\Response\Applicationjson\H403|Schema\BasicError : ($call is Operation\Projects\Update::OPERATION_MATCH ? Schema\Project|Schema\Operation\Projects\DeleteCard\Response\Applicationjson\H403|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Projects\ListCollaborators::OPERATION_MATCH ? Schema\SimpleUser|Schema\BasicError|Schema\ValidationError : ($call is Operation\Projects\AddCollaborator::OPERATION_MATCH ? Schema\BasicError|Schema\ValidationError : ($call is Operation\Projects\RemoveCollaborator::OPERATION_MATCH ? Schema\BasicError|Schema\ValidationError : ($call is Operation\Projects\GetPermissionForUser::OPERATION_MATCH ? Schema\ProjectCollaboratorPermission|Schema\BasicError|Schema\ValidationError : ($call is Operation\Projects\ListColumns::OPERATION_MATCH ? Schema\ProjectColumn|Schema\BasicError : ($call is Operation\Projects\CreateColumn::OPERATION_MATCH ? Schema\ProjectColumn|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\RateLimit\Get::OPERATION_MATCH ? Schema\RateLimitOverview|Schema\BasicError : ($call is Operation\Actions\ListRepoRequiredWorkflows::OPERATION_MATCH ? Schema\Operation\Actions\ListRepoRequiredWorkflows\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Actions\GetRepoRequiredWorkflow::OPERATION_MATCH ? Schema\RepoRequiredWorkflow|Schema\BasicError : ($call is Operation\Actions\GetRepoRequiredWorkflowUsage::OPERATION_MATCH ? Schema\WorkflowUsage|Schema\BasicError : ($call is Operation\Repos\Get::OPERATION_MATCH ? Schema\FullRepository|Schema\BasicError : ($call is Operation\Repos\Delete::OPERATION_MATCH ? Schema\Operation\Orgs\RemoveOutsideCollaborator\Response\Applicationjson\H422|Schema\BasicError : ($call is Operation\Repos\Update::OPERATION_MATCH ? Schema\FullRepository|Schema\BasicError|Schema\ValidationError : ($call is Operation\Actions\ListArtifactsForRepo::OPERATION_MATCH ? Schema\Operation\Actions\ListArtifactsForRepo\Response\Applicationjson\H200 : ($call is Operation\Actions\GetArtifact::OPERATION_MATCH ? Schema\Artifact : ($call is Operation\Actions\DeleteArtifact::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\DownloadArtifact::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Actions\GetActionsCacheUsage::OPERATION_MATCH ? Schema\ActionsCacheUsageByRepository : ($call is Operation\Actions\GetActionsCacheList::OPERATION_MATCH ? Schema\ActionsCacheList : ($call is Operation\Actions\DeleteActionsCacheByKey::OPERATION_MATCH ? Schema\ActionsCacheList : ($call is Operation\Actions\DeleteActionsCacheById::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\GetJobForWorkflowRun::OPERATION_MATCH ? Schema\Job : ($call is Operation\Actions\DownloadJobLogsForWorkflowRun::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ReRunJobForWorkflowRun::OPERATION_MATCH ? Schema\EmptyObject|Schema\BasicError : ($call is Operation\Actions\GetCustomOidcSubClaimForRepo::OPERATION_MATCH ? Schema\OidcCustomSubRepo|Schema\BasicError|Schema\ScimError : ($call is Operation\Actions\SetCustomOidcSubClaimForRepo::OPERATION_MATCH ? Schema\EmptyObject|Schema\BasicError|Schema\ScimError|Schema\ValidationErrorSimple : ($call is Operation\Actions\GetGithubActionsPermissionsRepository::OPERATION_MATCH ? Schema\ActionsRepositoryPermissions : ($call is Operation\Actions\SetGithubActionsPermissionsRepository::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\GetWorkflowAccessToRepository::OPERATION_MATCH ? Schema\ActionsWorkflowAccessToRepository : ($call is Operation\Actions\SetWorkflowAccessToRepository::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\GetAllowedActionsRepository::OPERATION_MATCH ? Schema\SelectedActions : ($call is Operation\Actions\SetAllowedActionsRepository::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\GetGithubActionsDefaultWorkflowPermissionsRepository::OPERATION_MATCH ? Schema\ActionsGetDefaultWorkflowPermissions : ($call is Operation\Actions\SetGithubActionsDefaultWorkflowPermissionsRepository::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListRequiredWorkflowRuns::OPERATION_MATCH ? Schema\Operation\Actions\ListRequiredWorkflowRuns\Response\Applicationjson\H200 : ($call is Operation\Actions\ListSelfHostedRunnersForRepo::OPERATION_MATCH ? Schema\Operation\Actions\ListSelfHostedRunnersForOrg\Response\Applicationjson\H200 : ($call is Operation\Actions\ListRunnerApplicationsForRepo::OPERATION_MATCH ? Schema\RunnerApplication : ($call is Operation\Actions\CreateRegistrationTokenForRepo::OPERATION_MATCH ? Schema\AuthenticationToken : ($call is Operation\Actions\CreateRemoveTokenForRepo::OPERATION_MATCH ? Schema\AuthenticationToken : ($call is Operation\Actions\GetSelfHostedRunnerForRepo::OPERATION_MATCH ? Schema\Runner : ($call is Operation\Actions\DeleteSelfHostedRunnerFromRepo::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListLabelsForSelfHostedRunnerForRepo::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Actions\SetCustomLabelsForSelfHostedRunnerForRepo::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Actions\AddCustomLabelsToSelfHostedRunnerForRepo::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForRepo::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Actions\RemoveCustomLabelFromSelfHostedRunnerForRepo::OPERATION_MATCH ? Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Actions\ListWorkflowRunsForRepo::OPERATION_MATCH ? Schema\Operation\Actions\ListRequiredWorkflowRuns\Response\Applicationjson\H200 : ($call is Operation\Actions\GetWorkflowRun::OPERATION_MATCH ? Schema\WorkflowRun : ($call is Operation\Actions\DeleteWorkflowRun::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\GetReviewsForRun::OPERATION_MATCH ? Schema\EnvironmentApprovals : ($call is Operation\Actions\ApproveWorkflowRun::OPERATION_MATCH ? Schema\EmptyObject|Schema\BasicError : ($call is Operation\Actions\ListWorkflowRunArtifacts::OPERATION_MATCH ? Schema\Operation\Actions\ListArtifactsForRepo\Response\Applicationjson\H200 : ($call is Operation\Actions\GetWorkflowRunAttempt::OPERATION_MATCH ? Schema\WorkflowRun : ($call is Operation\Actions\ListJobsForWorkflowRunAttempt::OPERATION_MATCH ? Schema\Operation\Actions\ListJobsForWorkflowRunAttempt\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Actions\DownloadWorkflowRunAttemptLogs::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\CancelWorkflowRun::OPERATION_MATCH ? Schema\EmptyObject|Schema\BasicError : ($call is Operation\Actions\ListJobsForWorkflowRun::OPERATION_MATCH ? Schema\Operation\Actions\ListJobsForWorkflowRunAttempt\Response\Applicationjson\H200 : ($call is Operation\Actions\DownloadWorkflowRunLogs::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\DeleteWorkflowRunLogs::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Actions\GetPendingDeploymentsForRun::OPERATION_MATCH ? Schema\PendingDeployment : ($call is Operation\Actions\ReviewPendingDeploymentsForRun::OPERATION_MATCH ? Schema\Deployment : ($call is Operation\Actions\ReRunWorkflow::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\ReRunWorkflowFailedJobs::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\GetWorkflowRunUsage::OPERATION_MATCH ? Schema\WorkflowRunUsage : ($call is Operation\Actions\ListRepoSecrets::OPERATION_MATCH ? Schema\Operation\Actions\ListRepoSecrets\Response\Applicationjson\H200 : ($call is Operation\Actions\GetRepoPublicKey::OPERATION_MATCH ? Schema\ActionsPublicKey : ($call is Operation\Actions\GetRepoSecret::OPERATION_MATCH ? Schema\ActionsSecret : ($call is Operation\Actions\CreateOrUpdateRepoSecret::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\DeleteRepoSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListRepoVariables::OPERATION_MATCH ? Schema\Operation\Actions\ListRepoVariables\Response\Applicationjson\H200 : ($call is Operation\Actions\CreateRepoVariable::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\GetRepoVariable::OPERATION_MATCH ? Schema\ActionsVariable : ($call is Operation\Actions\DeleteRepoVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\UpdateRepoVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListRepoWorkflows::OPERATION_MATCH ? Schema\Operation\Actions\ListRepoWorkflows\Response\Applicationjson\H200 : ($call is Operation\Actions\GetWorkflow::OPERATION_MATCH ? Schema\Workflow : ($call is Operation\Actions\DisableWorkflow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\CreateWorkflowDispatch::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\EnableWorkflow::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListWorkflowRuns::OPERATION_MATCH ? Schema\Operation\Actions\ListRequiredWorkflowRuns\Response\Applicationjson\H200 : ($call is Operation\Actions\GetWorkflowUsage::OPERATION_MATCH ? Schema\WorkflowUsage : ($call is Operation\Issues\ListAssignees::OPERATION_MATCH ? Schema\SimpleUser|Schema\BasicError : ($call is Operation\Issues\CheckUserCanBeAssigned::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Repos\ListAutolinks::OPERATION_MATCH ? Schema\Autolink : ($call is Operation\Repos\CreateAutolink::OPERATION_MATCH ? Schema\Autolink|Schema\ValidationError : ($call is Operation\Repos\GetAutolink::OPERATION_MATCH ? Schema\Autolink|Schema\BasicError : ($call is Operation\Repos\DeleteAutolink::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Repos\EnableAutomatedSecurityFixes::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\DisableAutomatedSecurityFixes::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListBranches::OPERATION_MATCH ? Schema\ShortBranch|Schema\BasicError : ($call is Operation\Repos\GetBranch::OPERATION_MATCH ? Schema\BranchWithProtection|Schema\BasicError : ($call is Operation\Repos\GetBranchProtection::OPERATION_MATCH ? Schema\BranchProtection|Schema\BasicError : ($call is Operation\Repos\UpdateBranchProtection::OPERATION_MATCH ? Schema\ProtectedBranch|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Repos\DeleteBranchProtection::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Repos\GetAdminBranchProtection::OPERATION_MATCH ? Schema\ProtectedBranchAdminEnforced : ($call is Operation\Repos\SetAdminBranchProtection::OPERATION_MATCH ? Schema\ProtectedBranchAdminEnforced : ($call is Operation\Repos\DeleteAdminBranchProtection::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Repos\GetPullRequestReviewProtection::OPERATION_MATCH ? Schema\ProtectedBranchPullRequestReview : ($call is Operation\Repos\DeletePullRequestReviewProtection::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Repos\UpdatePullRequestReviewProtection::OPERATION_MATCH ? Schema\ProtectedBranchPullRequestReview|Schema\ValidationError : ($call is Operation\Repos\GetCommitSignatureProtection::OPERATION_MATCH ? Schema\ProtectedBranchAdminEnforced|Schema\BasicError : ($call is Operation\Repos\CreateCommitSignatureProtection::OPERATION_MATCH ? Schema\ProtectedBranchAdminEnforced|Schema\BasicError : ($call is Operation\Repos\DeleteCommitSignatureProtection::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Repos\GetStatusChecksProtection::OPERATION_MATCH ? Schema\StatusCheckPolicy|Schema\BasicError : ($call is Operation\Repos\RemoveStatusCheckProtection::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\UpdateStatusCheckProtection::OPERATION_MATCH ? Schema\StatusCheckPolicy|Schema\BasicError|Schema\ValidationError : ($call is Operation\Repos\GetAllStatusCheckContexts::OPERATION_MATCH ? Schema\WebHookHeader\UserAgent|Schema\BasicError : ($call is Operation\Repos\SetStatusCheckContexts::OPERATION_MATCH ? Schema\WebHookHeader\UserAgent|Schema\ValidationError|Schema\BasicError : ($call is Operation\Repos\AddStatusCheckContexts::OPERATION_MATCH ? Schema\WebHookHeader\UserAgent|Schema\ValidationError|Schema\BasicError : ($call is Operation\Repos\RemoveStatusCheckContexts::OPERATION_MATCH ? Schema\WebHookHeader\UserAgent|Schema\BasicError|Schema\ValidationError : ($call is Operation\Repos\GetAccessRestrictions::OPERATION_MATCH ? Schema\BranchRestrictionPolicy|Schema\BasicError : ($call is Operation\Repos\DeleteAccessRestrictions::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\GetAppsWithAccessToProtectedBranch::OPERATION_MATCH ? Schema\Integration|Schema\BasicError : ($call is Operation\Repos\SetAppAccessRestrictions::OPERATION_MATCH ? Schema\Integration|Schema\ValidationError : ($call is Operation\Repos\AddAppAccessRestrictions::OPERATION_MATCH ? Schema\Integration|Schema\ValidationError : ($call is Operation\Repos\RemoveAppAccessRestrictions::OPERATION_MATCH ? Schema\Integration|Schema\ValidationError : ($call is Operation\Repos\GetTeamsWithAccessToProtectedBranch::OPERATION_MATCH ? Schema\Team|Schema\BasicError : ($call is Operation\Repos\SetTeamAccessRestrictions::OPERATION_MATCH ? Schema\Team|Schema\ValidationError : ($call is Operation\Repos\AddTeamAccessRestrictions::OPERATION_MATCH ? Schema\Team|Schema\ValidationError : ($call is Operation\Repos\RemoveTeamAccessRestrictions::OPERATION_MATCH ? Schema\Team|Schema\ValidationError : ($call is Operation\Repos\GetUsersWithAccessToProtectedBranch::OPERATION_MATCH ? Schema\SimpleUser|Schema\BasicError : ($call is Operation\Repos\SetUserAccessRestrictions::OPERATION_MATCH ? Schema\SimpleUser|Schema\ValidationError : ($call is Operation\Repos\AddUserAccessRestrictions::OPERATION_MATCH ? Schema\SimpleUser|Schema\ValidationError : ($call is Operation\Repos\RemoveUserAccessRestrictions::OPERATION_MATCH ? Schema\SimpleUser|Schema\ValidationError : ($call is Operation\Repos\RenameBranch::OPERATION_MATCH ? Schema\BranchWithProtection|Schema\BasicError|Schema\ValidationError : ($call is Operation\Checks\Create::OPERATION_MATCH ? Schema\CheckRun : ($call is Operation\Checks\Get::OPERATION_MATCH ? Schema\CheckRun : ($call is Operation\Checks\Update::OPERATION_MATCH ? Schema\CheckRun : ($call is Operation\Checks\ListAnnotations::OPERATION_MATCH ? Schema\CheckAnnotation : ($call is Operation\Checks\RerequestRun::OPERATION_MATCH ? Schema\EmptyObject|Schema\BasicError : ($call is Operation\Checks\CreateSuite::OPERATION_MATCH ? Schema\CheckSuite : ($call is Operation\Checks\SetSuitesPreferences::OPERATION_MATCH ? Schema\CheckSuitePreference : ($call is Operation\Checks\GetSuite::OPERATION_MATCH ? Schema\CheckSuite : ($call is Operation\Checks\ListForSuite::OPERATION_MATCH ? Schema\Operation\Checks\ListForSuite\Response\Applicationjson\H200 : ($call is Operation\Checks\RerequestSuite::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\CodeScanning\ListAlertsForRepo::OPERATION_MATCH ? Schema\CodeScanningAlertItems|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\CodeScanning\GetAlert::OPERATION_MATCH ? Schema\CodeScanningAlert|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\CodeScanning\UpdateAlert::OPERATION_MATCH ? Schema\CodeScanningAlert|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\CodeScanning\ListAlertInstances::OPERATION_MATCH ? Schema\CodeScanningAlertInstance|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\CodeScanning\ListRecentAnalyses::OPERATION_MATCH ? Schema\CodeScanningAnalysis|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\CodeScanning\GetAnalysis::OPERATION_MATCH ? Schema\CodeScanningAnalysis|Schema\AuditLogEvent\Data|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\CodeScanning\DeleteAnalysis::OPERATION_MATCH ? Schema\CodeScanningAnalysisDeletion|Schema\BasicError|Schema\ScimError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\CodeScanning\ListCodeqlDatabases::OPERATION_MATCH ? Schema\CodeScanningCodeqlDatabase|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\CodeScanning\GetCodeqlDatabase::OPERATION_MATCH ? Schema\CodeScanningCodeqlDatabase|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\CodeScanning\UploadSarif::OPERATION_MATCH ? Schema\CodeScanningSarifsReceipt|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\CodeScanning\GetSarif::OPERATION_MATCH ? Schema\CodeScanningSarifsStatus|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\Repos\CodeownersErrors::OPERATION_MATCH ? Schema\CodeownersErrors : ($call is Operation\Codespaces\ListInRepositoryForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Codespaces\ListInOrganization\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Codespaces\CreateWithRepoForAuthenticatedUser::OPERATION_MATCH ? Schema\Codespace|Schema\BasicError|Schema\ScimError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\Codespaces\ListDevcontainersInRepositoryForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Codespaces\ListDevcontainersInRepositoryForAuthenticatedUser\Response\Applicationjson\H200|Schema\BasicError|Schema\ScimError : ($call is Operation\Codespaces\RepoMachinesForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Codespaces\RepoMachinesForAuthenticatedUser\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Codespaces\PreFlightWithRepoForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Codespaces\PreFlightWithRepoForAuthenticatedUser\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Codespaces\ListRepoSecrets::OPERATION_MATCH ? Schema\Operation\Codespaces\ListRepoSecrets\Response\Applicationjson\H200 : ($call is Operation\Codespaces\GetRepoPublicKey::OPERATION_MATCH ? Schema\CodespacesPublicKey : ($call is Operation\Codespaces\GetRepoSecret::OPERATION_MATCH ? Schema\RepoCodespacesSecret : ($call is Operation\Codespaces\CreateOrUpdateRepoSecret::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Codespaces\DeleteRepoSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListCollaborators::OPERATION_MATCH ? Schema\Collaborator|Schema\BasicError : ($call is Operation\Repos\CheckCollaborator::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\AddCollaborator::OPERATION_MATCH ? Schema\RepositoryInvitation|Schema\ValidationError|Schema\BasicError : ($call is Operation\Repos\RemoveCollaborator::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\GetCollaboratorPermissionLevel::OPERATION_MATCH ? Schema\RepositoryCollaboratorPermission|Schema\BasicError : ($call is Operation\Repos\ListCommitCommentsForRepo::OPERATION_MATCH ? Schema\CommitComment : ($call is Operation\Repos\GetCommitComment::OPERATION_MATCH ? Schema\CommitComment|Schema\BasicError : ($call is Operation\Repos\DeleteCommitComment::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Repos\UpdateCommitComment::OPERATION_MATCH ? Schema\CommitComment|Schema\BasicError : ($call is Operation\Reactions\ListForCommitComment::OPERATION_MATCH ? Schema\Reaction|Schema\BasicError : ($call is Operation\Reactions\CreateForCommitComment::OPERATION_MATCH ? Schema\Reaction|Schema\ValidationError : ($call is Operation\Reactions\DeleteForCommitComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListCommits::OPERATION_MATCH ? Schema\Commit|Schema\BasicError|Schema\ScimError : ($call is Operation\Repos\ListBranchesForHeadCommit::OPERATION_MATCH ? Schema\BranchShort|Schema\ValidationError : ($call is Operation\Repos\ListCommentsForCommit::OPERATION_MATCH ? Schema\CommitComment : ($call is Operation\Repos\CreateCommitComment::OPERATION_MATCH ? Schema\CommitComment|Schema\BasicError|Schema\ValidationError : ($call is Operation\Repos\ListPullRequestsAssociatedWithCommit::OPERATION_MATCH ? Schema\PullRequestSimple : ($call is Operation\Repos\GetCommit::OPERATION_MATCH ? Schema\Commit|Schema\ValidationError|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\Checks\ListForRef::OPERATION_MATCH ? Schema\Operation\Checks\ListForSuite\Response\Applicationjson\H200 : ($call is Operation\Checks\ListSuitesForRef::OPERATION_MATCH ? Schema\Operation\Checks\ListSuitesForRef\Response\Applicationjson\H200 : ($call is Operation\Repos\GetCombinedStatusForRef::OPERATION_MATCH ? Schema\CombinedCommitStatus|Schema\BasicError : ($call is Operation\Repos\ListCommitStatusesForRef::OPERATION_MATCH ? Schema\Status|Schema\BasicError : ($call is Operation\Repos\GetCommunityProfileMetrics::OPERATION_MATCH ? Schema\CommunityProfile : ($call is Operation\Repos\CompareCommits::OPERATION_MATCH ? Schema\CommitComparison|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\Repos\GetContent::OPERATION_MATCH ? Schema\ContentTree|Schema\Operation\Repos\GetContent\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Repos\CreateOrUpdateFileContents::OPERATION_MATCH ? Schema\FileCommit|Schema\BasicError|Schema\ValidationError : ($call is Operation\Repos\DeleteFile::OPERATION_MATCH ? Schema\FileCommit|Schema\ValidationError|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\Repos\ListContributors::OPERATION_MATCH ? Schema\Contributor|Schema\BasicError : ($call is Operation\Dependabot\ListAlertsForRepo::OPERATION_MATCH ? Schema\DependabotAlert|Schema\BasicError|Schema\ScimError|Schema\ValidationErrorSimple : ($call is Operation\Dependabot\GetAlert::OPERATION_MATCH ? Schema\DependabotAlert|Schema\BasicError : ($call is Operation\Dependabot\UpdateAlert::OPERATION_MATCH ? Schema\DependabotAlert|Schema\BasicError|Schema\ScimError|Schema\ValidationErrorSimple : ($call is Operation\Dependabot\ListRepoSecrets::OPERATION_MATCH ? Schema\Operation\Dependabot\ListRepoSecrets\Response\Applicationjson\H200 : ($call is Operation\Dependabot\GetRepoPublicKey::OPERATION_MATCH ? Schema\DependabotPublicKey : ($call is Operation\Dependabot\GetRepoSecret::OPERATION_MATCH ? Schema\DependabotSecret : ($call is Operation\Dependabot\CreateOrUpdateRepoSecret::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Dependabot\DeleteRepoSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\DependencyGraph\DiffRange::OPERATION_MATCH ? Schema\DependencyGraphDiff|Schema\BasicError : ($call is Operation\DependencyGraph\CreateRepositorySnapshot::OPERATION_MATCH ? Schema\Operation\DependencyGraph\CreateRepositorySnapshot\Response\Applicationjson\H201 : ($call is Operation\Repos\ListDeployments::OPERATION_MATCH ? Schema\Deployment : ($call is Operation\Repos\CreateDeployment::OPERATION_MATCH ? Schema\Deployment|Schema\Operation\Activity\MarkNotificationsAsRead\Response\Applicationjson\H202|Schema\ValidationError : ($call is Operation\Repos\GetDeployment::OPERATION_MATCH ? Schema\Deployment|Schema\BasicError : ($call is Operation\Repos\DeleteDeployment::OPERATION_MATCH ? Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Repos\ListDeploymentStatuses::OPERATION_MATCH ? Schema\DeploymentStatus|Schema\BasicError : ($call is Operation\Repos\CreateDeploymentStatus::OPERATION_MATCH ? Schema\DeploymentStatus|Schema\ValidationError : ($call is Operation\Repos\GetDeploymentStatus::OPERATION_MATCH ? Schema\DeploymentStatus|Schema\BasicError : ($call is Operation\Repos\CreateDispatchEvent::OPERATION_MATCH ? Schema\ValidationError : ($call is Operation\Repos\GetAllEnvironments::OPERATION_MATCH ? Schema\Operation\Repos\GetAllEnvironments\Response\Applicationjson\H200 : ($call is Operation\Repos\GetEnvironment::OPERATION_MATCH ? Schema\Environment : ($call is Operation\Repos\CreateOrUpdateEnvironment::OPERATION_MATCH ? Schema\Environment|Schema\BasicError : ($call is Operation\Repos\DeleteAnEnvironment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListDeploymentBranchPolicies::OPERATION_MATCH ? Schema\Operation\Repos\ListDeploymentBranchPolicies\Response\Applicationjson\H200 : ($call is Operation\Repos\CreateDeploymentBranchPolicy::OPERATION_MATCH ? Schema\DeploymentBranchPolicy : ($call is Operation\Repos\GetDeploymentBranchPolicy::OPERATION_MATCH ? Schema\DeploymentBranchPolicy : ($call is Operation\Repos\UpdateDeploymentBranchPolicy::OPERATION_MATCH ? Schema\DeploymentBranchPolicy : ($call is Operation\Repos\DeleteDeploymentBranchPolicy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Activity\ListRepoEvents::OPERATION_MATCH ? Schema\Event : ($call is Operation\Repos\ListForks::OPERATION_MATCH ? Schema\MinimalRepository|Schema\BasicError|Schema\ScimError : ($call is Operation\Repos\CreateFork::OPERATION_MATCH ? Schema\FullRepository|Schema\BasicError|Schema\ScimError|Schema\ValidationError : ($call is Operation\Git\CreateBlob::OPERATION_MATCH ? Schema\ShortBlob|Schema\BasicError|Schema\ValidationError : ($call is Operation\Git\GetBlob::OPERATION_MATCH ? Schema\Blob|Schema\BasicError|Schema\ValidationError : ($call is Operation\Git\CreateCommit::OPERATION_MATCH ? Schema\GitCommit|Schema\ValidationError|Schema\BasicError : ($call is Operation\Git\GetCommit::OPERATION_MATCH ? Schema\GitCommit|Schema\BasicError : ($call is Operation\Git\ListMatchingRefs::OPERATION_MATCH ? Schema\GitRef : ($call is Operation\Git\GetRef::OPERATION_MATCH ? Schema\GitRef|Schema\BasicError : ($call is Operation\Git\CreateRef::OPERATION_MATCH ? Schema\GitRef|Schema\ValidationError : ($call is Operation\Git\DeleteRef::OPERATION_MATCH ? Schema\ValidationError : ($call is Operation\Git\UpdateRef::OPERATION_MATCH ? Schema\GitRef|Schema\ValidationError : ($call is Operation\Git\CreateTag::OPERATION_MATCH ? Schema\GitTag|Schema\ValidationError : ($call is Operation\Git\GetTag::OPERATION_MATCH ? Schema\GitTag|Schema\BasicError : ($call is Operation\Git\CreateTree::OPERATION_MATCH ? Schema\GitTree|Schema\ValidationError|Schema\BasicError : ($call is Operation\Git\GetTree::OPERATION_MATCH ? Schema\GitTree|Schema\ValidationError|Schema\BasicError : ($call is Operation\Repos\ListWebhooks::OPERATION_MATCH ? Schema\Hook|Schema\BasicError : ($call is Operation\Repos\CreateWebhook::OPERATION_MATCH ? Schema\Hook|Schema\BasicError|Schema\ValidationError : ($call is Operation\Repos\GetWebhook::OPERATION_MATCH ? Schema\Hook|Schema\BasicError : ($call is Operation\Repos\DeleteWebhook::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Repos\UpdateWebhook::OPERATION_MATCH ? Schema\Hook|Schema\ValidationError|Schema\BasicError : ($call is Operation\Repos\GetWebhookConfigForRepo::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Operation\Repos\UpdateWebhookConfigForRepo::OPERATION_MATCH ? Schema\WebhookConfig : ($call is Operation\Repos\ListWebhookDeliveries::OPERATION_MATCH ? Schema\HookDeliveryItem|Schema\BasicError|Schema\ScimError|Schema\ValidationError : ($call is Operation\Repos\GetWebhookDelivery::OPERATION_MATCH ? Schema\HookDelivery|Schema\BasicError|Schema\ScimError|Schema\ValidationError : ($call is Operation\Repos\RedeliverWebhookDelivery::OPERATION_MATCH ? Schema\AuditLogEvent\Config|Schema\BasicError|Schema\ScimError|Schema\ValidationError : ($call is Operation\Repos\PingWebhook::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Repos\TestPushWebhook::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Migrations\GetImportStatus::OPERATION_MATCH ? Schema\Import|Schema\BasicError : ($call is Operation\Migrations\StartImport::OPERATION_MATCH ? Schema\Import|Schema\ValidationError|Schema\BasicError : ($call is Operation\Migrations\CancelImport::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Migrations\UpdateImport::OPERATION_MATCH ? Schema\Import|Schema\BasicError : ($call is Operation\Migrations\GetCommitAuthors::OPERATION_MATCH ? Schema\PorterAuthor|Schema\BasicError : ($call is Operation\Migrations\MapCommitAuthor::OPERATION_MATCH ? Schema\PorterAuthor|Schema\ValidationError|Schema\BasicError : ($call is Operation\Migrations\GetLargeFiles::OPERATION_MATCH ? Schema\PorterLargeFile|Schema\BasicError : ($call is Operation\Migrations\SetLfsPreference::OPERATION_MATCH ? Schema\Import|Schema\ValidationError|Schema\BasicError : ($call is Operation\Apps\GetRepoInstallation::OPERATION_MATCH ? Schema\Installation|Schema\BasicError : ($call is Operation\Interactions\GetRestrictionsForRepo::OPERATION_MATCH ? Schema\Operation\Interactions\GetRestrictionsForOrg\Response\Applicationjson\H200 : ($call is Operation\Interactions\SetRestrictionsForRepo::OPERATION_MATCH ? Schema\InteractionLimitResponse : ($call is Operation\Interactions\RemoveRestrictionsForRepo::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListInvitations::OPERATION_MATCH ? Schema\RepositoryInvitation : ($call is Operation\Repos\DeleteInvitation::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\UpdateInvitation::OPERATION_MATCH ? Schema\RepositoryInvitation : ($call is Operation\Issues\ListForRepo::OPERATION_MATCH ? Schema\Issue|Schema\BasicError|Schema\ValidationError : ($call is Operation\Issues\Create::OPERATION_MATCH ? Schema\Issue|Schema\BasicError|Schema\ValidationError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\Issues\ListCommentsForRepo::OPERATION_MATCH ? Schema\IssueComment|Schema\ValidationError|Schema\BasicError : ($call is Operation\Issues\GetComment::OPERATION_MATCH ? Schema\IssueComment|Schema\BasicError : ($call is Operation\Issues\DeleteComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Issues\UpdateComment::OPERATION_MATCH ? Schema\IssueComment|Schema\ValidationError : ($call is Operation\Reactions\ListForIssueComment::OPERATION_MATCH ? Schema\Reaction|Schema\BasicError : ($call is Operation\Reactions\CreateForIssueComment::OPERATION_MATCH ? Schema\Reaction|Schema\ValidationError : ($call is Operation\Reactions\DeleteForIssueComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Issues\ListEventsForRepo::OPERATION_MATCH ? Schema\IssueEvent|Schema\ValidationError : ($call is Operation\Issues\GetEvent::OPERATION_MATCH ? Schema\IssueEvent|Schema\BasicError : ($call is Operation\Issues\Get::OPERATION_MATCH ? Schema\Issue|Schema\BasicError : ($call is Operation\Issues\Update::OPERATION_MATCH ? Schema\Issue|Schema\ValidationError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503|Schema\BasicError : ($call is Operation\Issues\AddAssignees::OPERATION_MATCH ? Schema\Issue : ($call is Operation\Issues\RemoveAssignees::OPERATION_MATCH ? Schema\Issue : ($call is Operation\Issues\CheckUserCanBeAssignedToIssue::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Issues\ListComments::OPERATION_MATCH ? Schema\IssueComment|Schema\BasicError : ($call is Operation\Issues\CreateComment::OPERATION_MATCH ? Schema\IssueComment|Schema\BasicError|Schema\ValidationError : ($call is Operation\Issues\ListEvents::OPERATION_MATCH ? Schema\IssueEventForIssue|Schema\BasicError : ($call is Operation\Issues\ListLabelsOnIssue::OPERATION_MATCH ? Schema\Label|Schema\BasicError : ($call is Operation\Issues\SetLabels::OPERATION_MATCH ? Schema\Label|Schema\BasicError|Schema\ValidationError : ($call is Operation\Issues\AddLabels::OPERATION_MATCH ? Schema\Label|Schema\BasicError|Schema\ValidationError : ($call is Operation\Issues\RemoveAllLabels::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Issues\RemoveLabel::OPERATION_MATCH ? Schema\Label|Schema\BasicError : ($call is Operation\Issues\Lock::OPERATION_MATCH ? Schema\BasicError|Schema\ValidationError : ($call is Operation\Issues\Unlock::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Reactions\ListForIssue::OPERATION_MATCH ? Schema\Reaction|Schema\BasicError : ($call is Operation\Reactions\CreateForIssue::OPERATION_MATCH ? Schema\Reaction|Schema\ValidationError : ($call is Operation\Reactions\DeleteForIssue::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Issues\ListEventsForTimeline::OPERATION_MATCH ? Schema\TimelineIssueEvents|Schema\BasicError : ($call is Operation\Repos\ListDeployKeys::OPERATION_MATCH ? Schema\DeployKey : ($call is Operation\Repos\CreateDeployKey::OPERATION_MATCH ? Schema\DeployKey|Schema\ValidationError : ($call is Operation\Repos\GetDeployKey::OPERATION_MATCH ? Schema\DeployKey|Schema\BasicError : ($call is Operation\Repos\DeleteDeployKey::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Issues\ListLabelsForRepo::OPERATION_MATCH ? Schema\Label|Schema\BasicError : ($call is Operation\Issues\CreateLabel::OPERATION_MATCH ? Schema\Label|Schema\ValidationError|Schema\BasicError : ($call is Operation\Issues\GetLabel::OPERATION_MATCH ? Schema\Label|Schema\BasicError : ($call is Operation\Issues\DeleteLabel::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Issues\UpdateLabel::OPERATION_MATCH ? Schema\Label : ($call is Operation\Repos\ListLanguages::OPERATION_MATCH ? Schema\Language : ($call is Operation\Repos\EnableLfsForRepo::OPERATION_MATCH ? Schema\AuditLogEvent\Config : ($call is Operation\Repos\DisableLfsForRepo::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Licenses\GetForRepo::OPERATION_MATCH ? Schema\LicenseContent : ($call is Operation\Repos\MergeUpstream::OPERATION_MATCH ? Schema\MergedUpstream : ($call is Operation\Repos\Merge::OPERATION_MATCH ? Schema\Commit|Schema\BasicError|Schema\ValidationError : ($call is Operation\Issues\ListMilestones::OPERATION_MATCH ? Schema\Milestone|Schema\BasicError : ($call is Operation\Issues\CreateMilestone::OPERATION_MATCH ? Schema\Milestone|Schema\BasicError|Schema\ValidationError : ($call is Operation\Issues\GetMilestone::OPERATION_MATCH ? Schema\Milestone|Schema\BasicError : ($call is Operation\Issues\DeleteMilestone::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Issues\UpdateMilestone::OPERATION_MATCH ? Schema\Milestone : ($call is Operation\Issues\ListLabelsForMilestone::OPERATION_MATCH ? Schema\Label : ($call is Operation\Activity\ListRepoNotificationsForAuthenticatedUser::OPERATION_MATCH ? Schema\Thread : ($call is Operation\Activity\MarkRepoNotificationsAsRead::OPERATION_MATCH ? Schema\Operation\Activity\MarkRepoNotificationsAsRead\Response\Applicationjson\H202 : ($call is Operation\Repos\GetPages::OPERATION_MATCH ? Schema\Page|Schema\BasicError : ($call is Operation\Repos\UpdateInformationAboutPagesSite::OPERATION_MATCH ? Schema\ValidationError|Schema\BasicError|Schema\ScimError : ($call is Operation\Repos\CreatePagesSite::OPERATION_MATCH ? Schema\Page|Schema\ValidationError|Schema\BasicError : ($call is Operation\Repos\DeletePagesSite::OPERATION_MATCH ? Schema\ValidationError|Schema\BasicError : ($call is Operation\Repos\ListPagesBuilds::OPERATION_MATCH ? Schema\PageBuild : ($call is Operation\Repos\RequestPagesBuild::OPERATION_MATCH ? Schema\PageBuildStatus : ($call is Operation\Repos\GetLatestPagesBuild::OPERATION_MATCH ? Schema\PageBuild : ($call is Operation\Repos\GetPagesBuild::OPERATION_MATCH ? Schema\PageBuild : ($call is Operation\Repos\CreatePagesDeployment::OPERATION_MATCH ? Schema\PageDeployment|Schema\BasicError|Schema\ScimError|Schema\ValidationError : ($call is Operation\Repos\GetPagesHealthCheck::OPERATION_MATCH ? Schema\PagesHealthCheck|Schema\EmptyObject|Schema\BasicError : ($call is Operation\Projects\ListForRepo::OPERATION_MATCH ? Schema\Project|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Projects\CreateForRepo::OPERATION_MATCH ? Schema\Project|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Pulls\List_::OPERATION_MATCH ? Schema\PullRequestSimple|Schema\ValidationError : ($call is Operation\Pulls\Create::OPERATION_MATCH ? Schema\PullRequest|Schema\BasicError|Schema\ValidationError : ($call is Operation\Pulls\ListReviewCommentsForRepo::OPERATION_MATCH ? Schema\PullRequestReviewComment : ($call is Operation\Pulls\GetReviewComment::OPERATION_MATCH ? Schema\PullRequestReviewComment|Schema\BasicError : ($call is Operation\Pulls\DeleteReviewComment::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Pulls\UpdateReviewComment::OPERATION_MATCH ? Schema\PullRequestReviewComment : ($call is Operation\Reactions\ListForPullRequestReviewComment::OPERATION_MATCH ? Schema\Reaction|Schema\BasicError : ($call is Operation\Reactions\CreateForPullRequestReviewComment::OPERATION_MATCH ? Schema\Reaction|Schema\ValidationError : ($call is Operation\Reactions\DeleteForPullRequestComment::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Pulls\Get::OPERATION_MATCH ? Schema\PullRequest|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\Pulls\Update::OPERATION_MATCH ? Schema\PullRequest|Schema\ValidationError|Schema\BasicError : ($call is Operation\Codespaces\CreateWithPrForAuthenticatedUser::OPERATION_MATCH ? Schema\Codespace|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\Pulls\ListReviewComments::OPERATION_MATCH ? Schema\PullRequestReviewComment : ($call is Operation\Pulls\CreateReviewComment::OPERATION_MATCH ? Schema\PullRequestReviewComment|Schema\ValidationError|Schema\BasicError : ($call is Operation\Pulls\CreateReplyForReviewComment::OPERATION_MATCH ? Schema\PullRequestReviewComment|Schema\BasicError : ($call is Operation\Pulls\ListCommits::OPERATION_MATCH ? Schema\Commit : ($call is Operation\Pulls\ListFiles::OPERATION_MATCH ? Schema\DiffEntry|Schema\ValidationError|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\Pulls\CheckIfMerged::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Pulls\Merge::OPERATION_MATCH ? Schema\PullRequestMergeResult|Schema\Operation\Orgs\RemoveOutsideCollaborator\Response\Applicationjson\H422|Schema\ValidationError|Schema\BasicError : ($call is Operation\Pulls\ListRequestedReviewers::OPERATION_MATCH ? Schema\PullRequestReviewRequest : ($call is Operation\Pulls\RequestReviewers::OPERATION_MATCH ? Schema\PullRequestSimple|Schema\BasicError : ($call is Operation\Pulls\RemoveRequestedReviewers::OPERATION_MATCH ? Schema\PullRequestSimple|Schema\ValidationError : ($call is Operation\Pulls\ListReviews::OPERATION_MATCH ? Schema\PullRequestReview : ($call is Operation\Pulls\CreateReview::OPERATION_MATCH ? Schema\PullRequestReview|Schema\ValidationErrorSimple|Schema\BasicError : ($call is Operation\Pulls\GetReview::OPERATION_MATCH ? Schema\PullRequestReview|Schema\BasicError : ($call is Operation\Pulls\UpdateReview::OPERATION_MATCH ? Schema\PullRequestReview|Schema\ValidationErrorSimple : ($call is Operation\Pulls\DeletePendingReview::OPERATION_MATCH ? Schema\PullRequestReview|Schema\ValidationErrorSimple|Schema\BasicError : ($call is Operation\Pulls\ListCommentsForReview::OPERATION_MATCH ? Schema\ReviewComment|Schema\BasicError : ($call is Operation\Pulls\DismissReview::OPERATION_MATCH ? Schema\PullRequestReview|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Pulls\SubmitReview::OPERATION_MATCH ? Schema\PullRequestReview|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Pulls\UpdateBranch::OPERATION_MATCH ? Schema\Operation\Activity\MarkRepoNotificationsAsRead\Response\Applicationjson\H202|Schema\ValidationError|Schema\BasicError : ($call is Operation\Repos\GetReadme::OPERATION_MATCH ? Schema\ContentFile|Schema\BasicError|Schema\ValidationError : ($call is Operation\Repos\GetReadmeInDirectory::OPERATION_MATCH ? Schema\ContentFile|Schema\BasicError|Schema\ValidationError : ($call is Operation\Repos\ListReleases::OPERATION_MATCH ? Schema\Release|Schema\BasicError : ($call is Operation\Repos\CreateRelease::OPERATION_MATCH ? Schema\Release|Schema\BasicError|Schema\ValidationError : ($call is Operation\Repos\GetReleaseAsset::OPERATION_MATCH ? Schema\ReleaseAsset|Schema\BasicError : ($call is Operation\Repos\DeleteReleaseAsset::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\UpdateReleaseAsset::OPERATION_MATCH ? Schema\ReleaseAsset : ($call is Operation\Repos\GenerateReleaseNotes::OPERATION_MATCH ? Schema\ReleaseNotesContent|Schema\BasicError : ($call is Operation\Repos\GetLatestRelease::OPERATION_MATCH ? Schema\Release : ($call is Operation\Repos\GetReleaseByTag::OPERATION_MATCH ? Schema\Release|Schema\BasicError : ($call is Operation\Repos\GetRelease::OPERATION_MATCH ? Schema\Release|Schema\BasicError : ($call is Operation\Repos\DeleteRelease::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\UpdateRelease::OPERATION_MATCH ? Schema\Release|Schema\BasicError : ($call is Operation\Repos\ListReleaseAssets::OPERATION_MATCH ? Schema\ReleaseAsset : ($call is Operation\Repos\UploadReleaseAsset::OPERATION_MATCH ? Schema\ReleaseAsset : ($call is Operation\Reactions\ListForRelease::OPERATION_MATCH ? Schema\Reaction|Schema\BasicError : ($call is Operation\Reactions\CreateForRelease::OPERATION_MATCH ? Schema\Reaction|Schema\ValidationError : ($call is Operation\Reactions\DeleteForRelease::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\SecretScanning\ListAlertsForRepo::OPERATION_MATCH ? Schema\SecretScanningAlert|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\SecretScanning\GetAlert::OPERATION_MATCH ? Schema\SecretScanningAlert|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\SecretScanning\UpdateAlert::OPERATION_MATCH ? Schema\SecretScanningAlert|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\SecretScanning\ListLocationsForAlert::OPERATION_MATCH ? Schema\SecretScanningLocation|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\Activity\ListStargazersForRepo::OPERATION_MATCH ? Schema\Operation\Activity\ListStargazersForRepo\Response\Applicationjson\H200|Schema\ValidationError : ($call is Operation\Repos\GetCodeFrequencyStats::OPERATION_MATCH ? Schema\Operation\Repos\GetCodeFrequencyStats\Response\Applicationjson\H200|Schema\AuditLogEvent\Config : ($call is Operation\Repos\GetCommitActivityStats::OPERATION_MATCH ? Schema\CommitActivity|Schema\AuditLogEvent\Config : ($call is Operation\Repos\GetContributorsStats::OPERATION_MATCH ? Schema\ContributorActivity|Schema\AuditLogEvent\Config : ($call is Operation\Repos\GetParticipationStats::OPERATION_MATCH ? Schema\ParticipationStats|Schema\BasicError : ($call is Operation\Repos\GetPunchCardStats::OPERATION_MATCH ? Schema\Operation\Repos\GetCodeFrequencyStats\Response\Applicationjson\H200 : ($call is Operation\Repos\CreateCommitStatus::OPERATION_MATCH ? Schema\Status : ($call is Operation\Activity\ListWatchersForRepo::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Activity\GetRepoSubscription::OPERATION_MATCH ? Schema\RepositorySubscription|Schema\BasicError : ($call is Operation\Activity\SetRepoSubscription::OPERATION_MATCH ? Schema\RepositorySubscription : ($call is Operation\Activity\DeleteRepoSubscription::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListTags::OPERATION_MATCH ? Schema\Tag : ($call is Operation\Repos\ListTagProtection::OPERATION_MATCH ? Schema\TagProtection|Schema\BasicError : ($call is Operation\Repos\CreateTagProtection::OPERATION_MATCH ? Schema\TagProtection|Schema\BasicError : ($call is Operation\Repos\DeleteTagProtection::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Repos\DownloadTarballArchive::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\ListTeams::OPERATION_MATCH ? Schema\Team : ($call is Operation\Repos\GetAllTopics::OPERATION_MATCH ? Schema\Topic|Schema\BasicError : ($call is Operation\Repos\ReplaceAllTopics::OPERATION_MATCH ? Schema\Topic|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Repos\GetClones::OPERATION_MATCH ? Schema\CloneTraffic|Schema\BasicError : ($call is Operation\Repos\GetTopPaths::OPERATION_MATCH ? Schema\ContentTraffic|Schema\BasicError : ($call is Operation\Repos\GetTopReferrers::OPERATION_MATCH ? Schema\ReferrerTraffic|Schema\BasicError : ($call is Operation\Repos\GetViews::OPERATION_MATCH ? Schema\ViewTraffic|Schema\BasicError : ($call is Operation\Repos\Transfer::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Repos\CheckVulnerabilityAlerts::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\EnableVulnerabilityAlerts::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\DisableVulnerabilityAlerts::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\DownloadZipballArchive::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Repos\CreateUsingTemplate::OPERATION_MATCH ? Schema\Repository : ($call is Operation\Repos\ListPublic::OPERATION_MATCH ? Schema\MinimalRepository|Schema\ValidationError : ($call is Operation\Actions\ListEnvironmentSecrets::OPERATION_MATCH ? Schema\Operation\Actions\ListRepoSecrets\Response\Applicationjson\H200 : ($call is Operation\Actions\GetEnvironmentPublicKey::OPERATION_MATCH ? Schema\ActionsPublicKey : ($call is Operation\Actions\GetEnvironmentSecret::OPERATION_MATCH ? Schema\ActionsSecret : ($call is Operation\Actions\CreateOrUpdateEnvironmentSecret::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\DeleteEnvironmentSecret::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\ListEnvironmentVariables::OPERATION_MATCH ? Schema\Operation\Actions\ListRepoVariables\Response\Applicationjson\H200 : ($call is Operation\Actions\CreateEnvironmentVariable::OPERATION_MATCH ? Schema\EmptyObject : ($call is Operation\Actions\GetEnvironmentVariable::OPERATION_MATCH ? Schema\ActionsVariable : ($call is Operation\Actions\DeleteEnvironmentVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Actions\UpdateEnvironmentVariable::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Scim\ListProvisionedIdentities::OPERATION_MATCH ? Schema\ScimUserList|Schema\ScimError : ($call is Operation\Scim\ProvisionAndInviteUser::OPERATION_MATCH ? Schema\ScimUser|Schema\ScimError : ($call is Operation\Scim\GetProvisioningInformationForUser::OPERATION_MATCH ? Schema\ScimUser|Schema\ScimError : ($call is Operation\Scim\SetInformationForProvisionedUser::OPERATION_MATCH ? Schema\ScimUser|Schema\ScimError : ($call is Operation\Scim\DeleteUserFromOrg::OPERATION_MATCH ? Schema\ScimError : ($call is Operation\Scim\UpdateAttributeForUser::OPERATION_MATCH ? Schema\ScimUser|Schema\ScimError|Schema\BasicError : ($call is Operation\Search\Code::OPERATION_MATCH ? Schema\Operation\Search\Code\Response\Applicationjson\H200|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503|Schema\ValidationError|Schema\BasicError : ($call is Operation\Search\Commits::OPERATION_MATCH ? Schema\Operation\Search\Commits\Response\Applicationjson\H200 : ($call is Operation\Search\IssuesAndPullRequests::OPERATION_MATCH ? Schema\Operation\Search\IssuesAndPullRequests\Response\Applicationjson\H200|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503|Schema\ValidationError|Schema\BasicError : ($call is Operation\Search\Labels::OPERATION_MATCH ? Schema\Operation\Search\Labels\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationError : ($call is Operation\Search\Repos::OPERATION_MATCH ? Schema\Operation\Search\Repos\Response\Applicationjson\H200|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503|Schema\ValidationError : ($call is Operation\Search\Topics::OPERATION_MATCH ? Schema\Operation\Search\Topics\Response\Applicationjson\H200 : ($call is Operation\Search\Users::OPERATION_MATCH ? Schema\Operation\Search\Users\Response\Applicationjson\H200|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503|Schema\ValidationError : ($call is Operation\Teams\GetLegacy::OPERATION_MATCH ? Schema\TeamFull|Schema\BasicError : ($call is Operation\Teams\DeleteLegacy::OPERATION_MATCH ? Schema\BasicError|Schema\ValidationError : ($call is Operation\Teams\UpdateLegacy::OPERATION_MATCH ? Schema\TeamFull|Schema\BasicError|Schema\ValidationError : ($call is Operation\Teams\ListDiscussionsLegacy::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Operation\Teams\CreateDiscussionLegacy::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Operation\Teams\GetDiscussionLegacy::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Operation\Teams\DeleteDiscussionLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\UpdateDiscussionLegacy::OPERATION_MATCH ? Schema\TeamDiscussion : ($call is Operation\Teams\ListDiscussionCommentsLegacy::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Operation\Teams\CreateDiscussionCommentLegacy::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Operation\Teams\GetDiscussionCommentLegacy::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Operation\Teams\DeleteDiscussionCommentLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\UpdateDiscussionCommentLegacy::OPERATION_MATCH ? Schema\TeamDiscussionComment : ($call is Operation\Reactions\ListForTeamDiscussionCommentLegacy::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\CreateForTeamDiscussionCommentLegacy::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\ListForTeamDiscussionLegacy::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Reactions\CreateForTeamDiscussionLegacy::OPERATION_MATCH ? Schema\Reaction : ($call is Operation\Teams\ListPendingInvitationsLegacy::OPERATION_MATCH ? Schema\OrganizationInvitation : ($call is Operation\Teams\ListMembersLegacy::OPERATION_MATCH ? Schema\SimpleUser|Schema\BasicError : ($call is Operation\Teams\GetMemberLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\AddMemberLegacy::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Teams\RemoveMemberLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\GetMembershipForUserLegacy::OPERATION_MATCH ? Schema\TeamMembership|Schema\BasicError : ($call is Operation\Teams\AddOrUpdateMembershipForUserLegacy::OPERATION_MATCH ? Schema\TeamMembership|Schema\BasicError : ($call is Operation\Teams\RemoveMembershipForUserLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\ListProjectsLegacy::OPERATION_MATCH ? Schema\TeamProject|Schema\BasicError : ($call is Operation\Teams\CheckPermissionsForProjectLegacy::OPERATION_MATCH ? Schema\TeamProject : ($call is Operation\Teams\AddOrUpdateProjectPermissionsLegacy::OPERATION_MATCH ? Schema\Operation\Orgs\RemoveOutsideCollaborator\Response\Applicationjson\H422|Schema\BasicError|Schema\ValidationError : ($call is Operation\Teams\RemoveProjectLegacy::OPERATION_MATCH ? Schema\BasicError|Schema\ValidationError : ($call is Operation\Teams\ListReposLegacy::OPERATION_MATCH ? Schema\MinimalRepository|Schema\BasicError : ($call is Operation\Teams\CheckPermissionsForRepoLegacy::OPERATION_MATCH ? Schema\TeamRepository : ($call is Operation\Teams\AddOrUpdateRepoPermissionsLegacy::OPERATION_MATCH ? Schema\BasicError|Schema\ValidationError : ($call is Operation\Teams\RemoveRepoLegacy::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Teams\ListIdpGroupsForLegacy::OPERATION_MATCH ? Schema\GroupMapping|Schema\BasicError : ($call is Operation\Teams\CreateOrUpdateIdpGroupConnectionsLegacy::OPERATION_MATCH ? Schema\GroupMapping|Schema\ValidationError|Schema\BasicError : ($call is Operation\Teams\ListChildLegacy::OPERATION_MATCH ? Schema\Team|Schema\BasicError|Schema\ValidationError : ($call is Operation\Users\GetAuthenticated::OPERATION_MATCH ? Schema\Operation\Users\GetAuthenticated\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Users\UpdateAuthenticated::OPERATION_MATCH ? Schema\PrivateUser|Schema\BasicError|Schema\ValidationError : ($call is Operation\Users\ListBlockedByAuthenticatedUser::OPERATION_MATCH ? Schema\SimpleUser|Schema\BasicError : ($call is Operation\Users\CheckBlocked::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Users\Block::OPERATION_MATCH ? Schema\BasicError|Schema\ValidationError : ($call is Operation\Users\Unblock::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Codespaces\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Codespaces\ListInOrganization\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Codespaces\CreateForAuthenticatedUser::OPERATION_MATCH ? Schema\Codespace|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 : ($call is Operation\Codespaces\ListSecretsForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Codespaces\ListSecretsForAuthenticatedUser\Response\Applicationjson\H200 : ($call is Operation\Codespaces\GetPublicKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\CodespacesUserPublicKey : ($call is Operation\Codespaces\GetSecretForAuthenticatedUser::OPERATION_MATCH ? Schema\CodespacesSecret : ($call is Operation\Codespaces\CreateOrUpdateSecretForAuthenticatedUser::OPERATION_MATCH ? Schema\EmptyObject|Schema\ValidationError|Schema\BasicError : ($call is Operation\Codespaces\DeleteSecretForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Codespaces\ListRepositoriesForSecretForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Codespaces\SetRepositoriesForSecretForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Codespaces\AddRepositoryForSecretForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Codespaces\RemoveRepositoryForSecretForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Codespaces\GetForAuthenticatedUser::OPERATION_MATCH ? Schema\Codespace|Schema\BasicError : ($call is Operation\Codespaces\DeleteForAuthenticatedUser::OPERATION_MATCH ? Schema\AuditLogEvent\Config|Schema\BasicError : ($call is Operation\Codespaces\UpdateForAuthenticatedUser::OPERATION_MATCH ? Schema\Codespace|Schema\BasicError : ($call is Operation\Codespaces\ExportForAuthenticatedUser::OPERATION_MATCH ? Schema\CodespaceExportDetails|Schema\BasicError|Schema\ValidationError : ($call is Operation\Codespaces\GetExportDetailsForAuthenticatedUser::OPERATION_MATCH ? Schema\CodespaceExportDetails|Schema\BasicError : ($call is Operation\Codespaces\CodespaceMachinesForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Codespaces\RepoMachinesForAuthenticatedUser\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Codespaces\PublishForAuthenticatedUser::OPERATION_MATCH ? Schema\CodespaceWithFullRepository|Schema\BasicError|Schema\ValidationError : ($call is Operation\Codespaces\StartForAuthenticatedUser::OPERATION_MATCH ? Schema\Codespace|Schema\BasicError|Schema\ScimError : ($call is Operation\Codespaces\StopForAuthenticatedUser::OPERATION_MATCH ? Schema\Codespace|Schema\BasicError : ($call is Operation\Users\SetPrimaryEmailVisibilityForAuthenticatedUser::OPERATION_MATCH ? Schema\Email|Schema\BasicError|Schema\ValidationError : ($call is Operation\Users\ListEmailsForAuthenticatedUser::OPERATION_MATCH ? Schema\Email|Schema\BasicError : ($call is Operation\Users\AddEmailForAuthenticatedUser::OPERATION_MATCH ? Schema\Email|Schema\ValidationError|Schema\BasicError : ($call is Operation\Users\DeleteEmailForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError|Schema\ValidationError : ($call is Operation\Users\ListFollowersForAuthenticatedUser::OPERATION_MATCH ? Schema\SimpleUser|Schema\BasicError : ($call is Operation\Users\ListFollowedByAuthenticatedUser::OPERATION_MATCH ? Schema\SimpleUser|Schema\BasicError : ($call is Operation\Users\CheckPersonIsFollowedByAuthenticated::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Users\Follow::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Users\Unfollow::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Users\ListGpgKeysForAuthenticatedUser::OPERATION_MATCH ? Schema\GpgKey|Schema\BasicError : ($call is Operation\Users\CreateGpgKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\GpgKey|Schema\ValidationError|Schema\BasicError : ($call is Operation\Users\GetGpgKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\GpgKey|Schema\BasicError : ($call is Operation\Users\DeleteGpgKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError|Schema\ValidationError : ($call is Operation\Apps\ListInstallationsForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Orgs\ListAppInstallations\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Apps\ListInstallationReposForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Apps\ListInstallationReposForAuthenticatedUser\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Apps\AddRepoToInstallationForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Apps\RemoveRepoFromInstallationForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Interactions\GetRestrictionsForAuthenticatedUser::OPERATION_MATCH ? Schema\Operation\Interactions\GetRestrictionsForOrg\Response\Applicationjson\H200 : ($call is Operation\Interactions\SetRestrictionsForAuthenticatedUser::OPERATION_MATCH ? Schema\InteractionLimitResponse|Schema\ValidationError : ($call is Operation\Interactions\RemoveRestrictionsForAuthenticatedUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Issues\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\Issue|Schema\BasicError : ($call is Operation\Users\ListPublicSshKeysForAuthenticatedUser::OPERATION_MATCH ? Schema\Key|Schema\BasicError : ($call is Operation\Users\CreatePublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\Key|Schema\ValidationError|Schema\BasicError : ($call is Operation\Users\GetPublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\Key|Schema\BasicError : ($call is Operation\Users\DeletePublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Apps\ListSubscriptionsForAuthenticatedUser::OPERATION_MATCH ? Schema\UserMarketplacePurchase|Schema\BasicError : ($call is Operation\Apps\ListSubscriptionsForAuthenticatedUserStubbed::OPERATION_MATCH ? Schema\UserMarketplacePurchase|Schema\BasicError : ($call is Operation\Orgs\ListMembershipsForAuthenticatedUser::OPERATION_MATCH ? Schema\OrgMembership|Schema\BasicError|Schema\ValidationError : ($call is Operation\Orgs\GetMembershipForAuthenticatedUser::OPERATION_MATCH ? Schema\OrgMembership|Schema\BasicError : ($call is Operation\Orgs\UpdateMembershipForAuthenticatedUser::OPERATION_MATCH ? Schema\OrgMembership|Schema\BasicError|Schema\ValidationError : ($call is Operation\Migrations\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\Migration|Schema\BasicError : ($call is Operation\Migrations\StartForAuthenticatedUser::OPERATION_MATCH ? Schema\Migration|Schema\ValidationError|Schema\BasicError : ($call is Operation\Migrations\GetStatusForAuthenticatedUser::OPERATION_MATCH ? Schema\Migration|Schema\BasicError : ($call is Operation\Migrations\GetArchiveForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Migrations\DeleteArchiveForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Migrations\UnlockRepoForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Migrations\ListReposForAuthenticatedUser::OPERATION_MATCH ? Schema\MinimalRepository|Schema\BasicError : ($call is Operation\Orgs\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\OrganizationSimple|Schema\BasicError : ($call is Operation\Packages\ListPackagesForAuthenticatedUser::OPERATION_MATCH ? Schema\Package : ($call is Operation\Packages\GetPackageForAuthenticatedUser::OPERATION_MATCH ? Schema\Package : ($call is Operation\Packages\DeletePackageForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Packages\RestorePackageForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Packages\GetAllPackageVersionsForPackageOwnedByAuthenticatedUser::OPERATION_MATCH ? Schema\PackageVersion|Schema\BasicError : ($call is Operation\Packages\GetPackageVersionForAuthenticatedUser::OPERATION_MATCH ? Schema\PackageVersion : ($call is Operation\Packages\DeletePackageVersionForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Packages\RestorePackageVersionForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Projects\CreateForAuthenticatedUser::OPERATION_MATCH ? Schema\Project|Schema\BasicError|Schema\ValidationErrorSimple : ($call is Operation\Users\ListPublicEmailsForAuthenticatedUser::OPERATION_MATCH ? Schema\Email|Schema\BasicError : ($call is Operation\Repos\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\Repository|Schema\ValidationError|Schema\BasicError : ($call is Operation\Repos\CreateForAuthenticatedUser::OPERATION_MATCH ? Schema\Repository|Schema\BasicError|Schema\ValidationError|Schema\ScimError : ($call is Operation\Repos\ListInvitationsForAuthenticatedUser::OPERATION_MATCH ? Schema\RepositoryInvitation|Schema\BasicError : ($call is Operation\Repos\DeclineInvitationForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Repos\AcceptInvitationForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Users\ListSshSigningKeysForAuthenticatedUser::OPERATION_MATCH ? Schema\SshSigningKey|Schema\BasicError : ($call is Operation\Users\CreateSshSigningKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\SshSigningKey|Schema\ValidationError|Schema\BasicError : ($call is Operation\Users\GetSshSigningKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\SshSigningKey|Schema\BasicError : ($call is Operation\Users\DeleteSshSigningKeyForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Activity\ListReposStarredByAuthenticatedUser::OPERATION_MATCH ? Schema\Repository|Schema\StarredRepository|Schema\BasicError : ($call is Operation\Activity\CheckRepoIsStarredByAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Activity\StarRepoForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Activity\UnstarRepoForAuthenticatedUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Activity\ListWatchedReposForAuthenticatedUser::OPERATION_MATCH ? Schema\MinimalRepository|Schema\BasicError : ($call is Operation\Teams\ListForAuthenticatedUser::OPERATION_MATCH ? Schema\TeamFull|Schema\BasicError : ($call is Operation\Users\List_::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Users\GetByUsername::OPERATION_MATCH ? Schema\Operation\Users\GetAuthenticated\Response\Applicationjson\H200|Schema\BasicError : ($call is Operation\Activity\ListEventsForAuthenticatedUser::OPERATION_MATCH ? Schema\Event : ($call is Operation\Activity\ListOrgEventsForAuthenticatedUser::OPERATION_MATCH ? Schema\Event : ($call is Operation\Activity\ListPublicEventsForUser::OPERATION_MATCH ? Schema\Event : ($call is Operation\Users\ListFollowersForUser::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Users\ListFollowingForUser::OPERATION_MATCH ? Schema\SimpleUser : ($call is Operation\Users\CheckFollowingForUser::OPERATION_MATCH ? \Psr\Http\Message\ResponseInterface : ($call is Operation\Gists\ListForUser::OPERATION_MATCH ? Schema\BaseGist|Schema\ValidationError : ($call is Operation\Users\ListGpgKeysForUser::OPERATION_MATCH ? Schema\GpgKey : ($call is Operation\Users\GetContextForUser::OPERATION_MATCH ? Schema\Hovercard|Schema\BasicError|Schema\ValidationError : ($call is Operation\Apps\GetUserInstallation::OPERATION_MATCH ? Schema\Installation : ($call is Operation\Users\ListPublicKeysForUser::OPERATION_MATCH ? Schema\KeySimple : ($call is Operation\Orgs\ListForUser::OPERATION_MATCH ? Schema\OrganizationSimple : ($call is Operation\Packages\ListPackagesForUser::OPERATION_MATCH ? Schema\Package|Schema\BasicError : ($call is Operation\Packages\GetPackageForUser::OPERATION_MATCH ? Schema\Package : ($call is Operation\Packages\DeletePackageForUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Packages\RestorePackageForUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Packages\GetAllPackageVersionsForPackageOwnedByUser::OPERATION_MATCH ? Schema\PackageVersion|Schema\BasicError : ($call is Operation\Packages\GetPackageVersionForUser::OPERATION_MATCH ? Schema\PackageVersion : ($call is Operation\Packages\DeletePackageVersionForUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Packages\RestorePackageVersionForUser::OPERATION_MATCH ? Schema\BasicError : ($call is Operation\Projects\ListForUser::OPERATION_MATCH ? Schema\Project|Schema\ValidationError : ($call is Operation\Activity\ListReceivedEventsForUser::OPERATION_MATCH ? Schema\Event : ($call is Operation\Activity\ListReceivedPublicEventsForUser::OPERATION_MATCH ? Schema\Event : ($call is Operation\Repos\ListForUser::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Billing\GetGithubActionsBillingUser::OPERATION_MATCH ? Schema\ActionsBillingUsage : ($call is Operation\Billing\GetGithubPackagesBillingUser::OPERATION_MATCH ? Schema\PackagesBillingUsage : ($call is Operation\Billing\GetSharedStorageBillingUser::OPERATION_MATCH ? Schema\CombinedBillingUsage : ($call is Operation\Users\ListSshSigningKeysForUser::OPERATION_MATCH ? Schema\SshSigningKey : ($call is Operation\Activity\ListReposStarredByUser::OPERATION_MATCH ? Schema\Operation\Activity\ListReposStarredByUser\Response\Applicationjson\H200 : ($call is Operation\Activity\ListReposWatchedByUser::OPERATION_MATCH ? Schema\MinimalRepository : ($call is Operation\Meta\GetAllVersions::OPERATION_MATCH ? Schema\Operation\Meta\GetAllVersions\Response\Applicationjson\H200|Schema\BasicError : Schema\WebHookHeader\UserAgent
     */
    public function call(string $call, array $params = array())
    {
        return \React\Async\await($this->callAsync($call, $params));
    }
    /**
     * @return ($call is Operation\Meta\Root::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Root> : ($call is Operation\Apps\GetAuthenticated::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration> : ($call is Operation\Apps\CreateFromManifest::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Apps\CreateFromManifest\Response\Applicationjson\H201|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Apps\GetWebhookConfigForApp::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Operation\Apps\UpdateWebhookConfigForApp::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Operation\Apps\ListWebhookDeliveries::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDeliveryItem|Schema\BasicError|Schema\ScimError|Schema\ValidationError> : ($call is Operation\Apps\GetWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDelivery|Schema\BasicError|Schema\ScimError|Schema\ValidationError> : ($call is Operation\Apps\RedeliverWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuditLogEvent\Config|Schema\BasicError|Schema\ScimError|Schema\ValidationError> : ($call is Operation\Apps\ListInstallationRequestsForAuthenticatedApp::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IntegrationInstallationRequest|Schema\BasicError> : ($call is Operation\Apps\ListInstallations::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Installation> : ($call is Operation\Apps\GetInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Installation|Schema\BasicError> : ($call is Operation\Apps\DeleteInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Apps\CreateInstallationAccessToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\InstallationToken|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Apps\SuspendInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Apps\UnsuspendInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Apps\DeleteAuthorization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ValidationError> : ($call is Operation\Apps\CheckToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Authorization|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Apps\DeleteToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ValidationError> : ($call is Operation\Apps\ResetToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Authorization|Schema\ValidationError> : ($call is Operation\Apps\ScopeToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Authorization|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Apps\GetBySlug::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration|Schema\BasicError> : ($call is Operation\CodesOfConduct\GetAllCodesOfConduct::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeOfConduct> : ($call is Operation\CodesOfConduct\GetConductCode::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeOfConduct|Schema\BasicError> : ($call is Operation\Emojis\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Emojis\Get\Response\Applicationjson\H200> : ($call is Operation\EnterpriseAdmin\GetServerStatistics::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ServerStatistics> : ($call is Operation\Actions\GetActionsCacheUsageForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsCacheUsageOrgEnterprise> : ($call is Operation\Actions\SetActionsOidcCustomIssuerPolicyForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\EnterpriseAdmin\GetGithubActionsPermissionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsEnterprisePermissions> : ($call is Operation\EnterpriseAdmin\SetGithubActionsPermissionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\EnterpriseAdmin\ListSelectedOrganizationsEnabledGithubActionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListSelectedOrganizationsEnabledGithubActionsEnterprise\Response\Applicationjson\H200> : ($call is Operation\EnterpriseAdmin\SetSelectedOrganizationsEnabledGithubActionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\EnterpriseAdmin\EnableSelectedOrganizationGithubActionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\EnterpriseAdmin\DisableSelectedOrganizationGithubActionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\EnterpriseAdmin\GetAllowedActionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SelectedActions> : ($call is Operation\EnterpriseAdmin\SetAllowedActionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\GetGithubActionsDefaultWorkflowPermissionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsGetDefaultWorkflowPermissions> : ($call is Operation\Actions\SetGithubActionsDefaultWorkflowPermissionsEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\EnterpriseAdmin\ListSelfHostedRunnerGroupsForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListSelfHostedRunnerGroupsForEnterprise\Response\Applicationjson\H200> : ($call is Operation\EnterpriseAdmin\CreateSelfHostedRunnerGroupForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerGroupsEnterprise> : ($call is Operation\EnterpriseAdmin\GetSelfHostedRunnerGroupForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerGroupsEnterprise> : ($call is Operation\EnterpriseAdmin\DeleteSelfHostedRunnerGroupFromEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\EnterpriseAdmin\UpdateSelfHostedRunnerGroupForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerGroupsEnterprise> : ($call is Operation\EnterpriseAdmin\ListOrgAccessToSelfHostedRunnerGroupInEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListSelectedOrganizationsEnabledGithubActionsEnterprise\Response\Applicationjson\H200> : ($call is Operation\EnterpriseAdmin\SetOrgAccessToSelfHostedRunnerGroupInEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\EnterpriseAdmin\AddOrgAccessToSelfHostedRunnerGroupInEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\EnterpriseAdmin\RemoveOrgAccessToSelfHostedRunnerGroupInEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\EnterpriseAdmin\ListSelfHostedRunnersInGroupForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListSelfHostedRunnersInGroupForEnterprise\Response\Applicationjson\H200> : ($call is Operation\EnterpriseAdmin\SetSelfHostedRunnersInGroupForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\EnterpriseAdmin\AddSelfHostedRunnerToGroupForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\EnterpriseAdmin\RemoveSelfHostedRunnerFromGroupForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\EnterpriseAdmin\ListSelfHostedRunnersForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListSelfHostedRunnersForEnterprise\Response\Applicationjson\H200> : ($call is Operation\EnterpriseAdmin\ListRunnerApplicationsForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerApplication> : ($call is Operation\EnterpriseAdmin\CreateRegistrationTokenForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuthenticationToken> : ($call is Operation\EnterpriseAdmin\CreateRemoveTokenForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuthenticationToken> : ($call is Operation\EnterpriseAdmin\GetSelfHostedRunnerForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Runner> : ($call is Operation\EnterpriseAdmin\DeleteSelfHostedRunnerFromEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\EnterpriseAdmin\SetCustomLabelsForSelfHostedRunnerForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\EnterpriseAdmin\AddCustomLabelsToSelfHostedRunnerForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\EnterpriseAdmin\RemoveAllCustomLabelsFromSelfHostedRunnerForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\EnterpriseAdmin\RemoveCustomLabelFromSelfHostedRunnerForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\AnnouncementBanners\GetAnnouncementBannerForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AnnouncementBanner> : ($call is Operation\AnnouncementBanners\RemoveAnnouncementBannerForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\AnnouncementBanners\SetAnnouncementBannerForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AnnouncementBanner> : ($call is Operation\EnterpriseAdmin\GetAuditLog::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuditLogEvent> : ($call is Operation\CodeScanning\ListAlertsForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningOrganizationAlertItems|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\SecretScanning\GetSecurityAnalysisSettingsForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EnterpriseSecurityAnalysisSettings|Schema\BasicError> : ($call is Operation\SecretScanning\PatchSecurityAnalysisSettingsForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\EnterpriseAdmin\GetConsumedLicenses::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GetConsumedLicenses> : ($call is Operation\Dependabot\ListAlertsForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependabotAlertWithRepository|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\EnterpriseAdmin\GetLicenseSyncStatus::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GetLicenseSyncStatus> : ($call is Operation\SecretScanning\ListAlertsForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationSecretScanningAlert|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\Billing\GetGithubActionsBillingGhe::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsBillingUsage> : ($call is Operation\Billing\GetGithubAdvancedSecurityBillingGhe::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AdvancedSecurityActiveCommitters|Schema\BasicError> : ($call is Operation\Billing\GetGithubPackagesBillingGhe::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PackagesBillingUsage> : ($call is Operation\Billing\GetSharedStorageBillingGhe::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CombinedBillingUsage> : ($call is Operation\SecretScanning\PostSecurityProductEnablementForEnterprise::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Activity\ListPublicEvents::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\Activity\GetFeeds::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Feed> : ($call is Operation\Gists\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BaseGist|Schema\BasicError> : ($call is Operation\Gists\Create::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistSimple|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Gists\ListPublic::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BaseGist|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Gists\ListStarred::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BaseGist|Schema\BasicError> : ($call is Operation\Gists\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistSimple|Schema\Operation\Gists\Get\Response\Applicationjson\H403|Schema\BasicError> : ($call is Operation\Gists\Delete::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Gists\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistSimple|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Gists\ListComments::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistComment|Schema\BasicError> : ($call is Operation\Gists\CreateComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistComment|Schema\BasicError> : ($call is Operation\Gists\GetComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistComment|Schema\BasicError|Schema\Operation\Gists\Get\Response\Applicationjson\H403> : ($call is Operation\Gists\DeleteComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Gists\UpdateComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistComment|Schema\BasicError> : ($call is Operation\Gists\ListCommits::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistCommit|Schema\BasicError> : ($call is Operation\Gists\ListForks::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistSimple|Schema\BasicError> : ($call is Operation\Gists\Fork::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BaseGist|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Gists\CheckIsStarred::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Gists\CheckIsStarred\Response\Applicationjson\H404|Schema\BasicError> : ($call is Operation\Gists\Star::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Gists\Unstar::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Gists\GetRevision::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GistSimple|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Gitignore\GetAllTemplates::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebHookHeader\UserAgent> : ($call is Operation\Gitignore\GetTemplate::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitignoreTemplate> : ($call is Operation\Apps\ListReposAccessibleToInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Apps\ListReposAccessibleToInstallation\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Apps\RevokeInstallationAccessToken::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Issues\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Licenses\GetAllCommonlyUsed::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\LicenseSimple> : ($call is Operation\Licenses\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\License|Schema\BasicError> : ($call is Operation\Markdown\Render::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebHookHeader\UserAgent> : ($call is Operation\Markdown\RenderRaw::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebHookHeader\UserAgent> : ($call is Operation\Apps\GetSubscriptionPlanForAccount::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MarketplacePurchase|Schema\BasicError> : ($call is Operation\Apps\ListPlans::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MarketplaceListingPlan|Schema\BasicError> : ($call is Operation\Apps\ListAccountsForPlan::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MarketplacePurchase|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Apps\GetSubscriptionPlanForAccountStubbed::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MarketplacePurchase|Schema\BasicError> : ($call is Operation\Apps\ListPlansStubbed::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MarketplaceListingPlan|Schema\BasicError> : ($call is Operation\Apps\ListAccountsForPlanStubbed::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MarketplacePurchase|Schema\BasicError> : ($call is Operation\Meta\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ApiOverview> : ($call is Operation\Activity\ListPublicEventsForRepoNetwork::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event|Schema\BasicError> : ($call is Operation\Activity\ListNotificationsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Thread|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Activity\MarkNotificationsAsRead::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Activity\MarkNotificationsAsRead\Response\Applicationjson\H202|Schema\BasicError> : ($call is Operation\Activity\GetThread::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Thread|Schema\BasicError> : ($call is Operation\Activity\MarkThreadAsRead::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Activity\GetThreadSubscriptionForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ThreadSubscription|Schema\BasicError> : ($call is Operation\Activity\SetThreadSubscription::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ThreadSubscription|Schema\BasicError> : ($call is Operation\Activity\DeleteThreadSubscription::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Meta\GetOctocat::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebHookHeader\UserAgent> : ($call is Operation\Orgs\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationSimple> : ($call is Operation\Orgs\ListCustomRoles::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Orgs\ListCustomRoles\Response\Applicationjson\H200> : ($call is Operation\Orgs\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationFull|Schema\BasicError> : ($call is Operation\Orgs\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationFull|Schema\Operation\Orgs\Update\Response\Applicationjson\H422|Schema\BasicError> : ($call is Operation\Actions\GetActionsCacheUsageForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsCacheUsageOrgEnterprise> : ($call is Operation\Actions\GetActionsCacheUsageByRepoForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\GetActionsCacheUsageByRepoForOrg\Response\Applicationjson\H200> : ($call is Operation\Oidc\GetOidcCustomSubTemplateForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OidcCustomSub> : ($call is Operation\Oidc\UpdateOidcCustomSubTemplateForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject|Schema\BasicError> : ($call is Operation\Actions\GetGithubActionsPermissionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsOrganizationPermissions> : ($call is Operation\Actions\SetGithubActionsPermissionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization\Response\Applicationjson\H200> : ($call is Operation\Actions\SetSelectedRepositoriesEnabledGithubActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\EnableSelectedRepositoryGithubActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\DisableSelectedRepositoryGithubActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\GetAllowedActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SelectedActions> : ($call is Operation\Actions\SetAllowedActionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\GetGithubActionsDefaultWorkflowPermissionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsGetDefaultWorkflowPermissions> : ($call is Operation\Actions\SetGithubActionsDefaultWorkflowPermissionsOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListRequiredWorkflows::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRequiredWorkflows\Response\Applicationjson\H200> : ($call is Operation\Actions\CreateRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RequiredWorkflow|Schema\ValidationErrorSimple> : ($call is Operation\Actions\GetRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RequiredWorkflow> : ($call is Operation\Actions\DeleteRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\UpdateRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RequiredWorkflow|Schema\ValidationErrorSimple> : ($call is Operation\Actions\ListSelectedRepositoriesRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization\Response\Applicationjson\H200> : ($call is Operation\Actions\SetSelectedReposToRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\AddSelectedRepoToRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\RemoveSelectedRepoFromRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListSelfHostedRunnerGroupsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListSelfHostedRunnerGroupsForOrg\Response\Applicationjson\H200> : ($call is Operation\Actions\CreateSelfHostedRunnerGroupForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerGroupsOrg> : ($call is Operation\Actions\GetSelfHostedRunnerGroupForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerGroupsOrg> : ($call is Operation\Actions\DeleteSelfHostedRunnerGroupFromOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\UpdateSelfHostedRunnerGroupForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerGroupsOrg> : ($call is Operation\Actions\ListRepoAccessToSelfHostedRunnerGroupInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRepoAccessToSelfHostedRunnerGroupInOrg\Response\Applicationjson\H200> : ($call is Operation\Actions\SetRepoAccessToSelfHostedRunnerGroupInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\AddRepoAccessToSelfHostedRunnerGroupInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\RemoveRepoAccessToSelfHostedRunnerGroupInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListSelfHostedRunnersInGroupForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListSelfHostedRunnersInGroupForEnterprise\Response\Applicationjson\H200> : ($call is Operation\Actions\SetSelfHostedRunnersInGroupForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\AddSelfHostedRunnerToGroupForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\RemoveSelfHostedRunnerFromGroupForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListSelfHostedRunnersForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListSelfHostedRunnersForOrg\Response\Applicationjson\H200> : ($call is Operation\Actions\ListRunnerApplicationsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerApplication> : ($call is Operation\Actions\CreateRegistrationTokenForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuthenticationToken> : ($call is Operation\Actions\CreateRemoveTokenForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuthenticationToken> : ($call is Operation\Actions\GetSelfHostedRunnerForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Runner> : ($call is Operation\Actions\DeleteSelfHostedRunnerFromOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListLabelsForSelfHostedRunnerForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Actions\SetCustomLabelsForSelfHostedRunnerForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Actions\AddCustomLabelsToSelfHostedRunnerForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Actions\RemoveCustomLabelFromSelfHostedRunnerForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Actions\ListOrgSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListOrgSecrets\Response\Applicationjson\H200> : ($call is Operation\Actions\GetOrgPublicKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsPublicKey> : ($call is Operation\Actions\GetOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationActionsSecret> : ($call is Operation\Actions\CreateOrUpdateOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\DeleteOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListSelectedReposForOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200> : ($call is Operation\Actions\SetSelectedReposForOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\AddSelectedRepoToOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\RemoveSelectedRepoFromOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListOrgVariables::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListOrgVariables\Response\Applicationjson\H200> : ($call is Operation\Actions\CreateOrgVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\GetOrgVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationActionsVariable> : ($call is Operation\Actions\DeleteOrgVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\UpdateOrgVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListSelectedReposForOrgVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200> : ($call is Operation\Actions\SetSelectedReposForOrgVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\AddSelectedRepoToOrgVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\RemoveSelectedRepoFromOrgVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\AnnouncementBanners\GetAnnouncementBannerForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AnnouncementBanner> : ($call is Operation\AnnouncementBanners\RemoveAnnouncementBannerForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\AnnouncementBanners\SetAnnouncementBannerForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AnnouncementBanner> : ($call is Operation\Orgs\GetAuditLog::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuditLogEvent> : ($call is Operation\Orgs\ListBlockedUsers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Orgs\CheckBlockedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Orgs\BlockUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ValidationError> : ($call is Operation\Orgs\UnblockUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\CodeScanning\ListAlertsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningOrganizationAlertItems|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\Codespaces\ListInOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\ListInOrganization\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Codespaces\SetCodespacesBilling::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError|Schema\ValidationError> : ($call is Operation\Codespaces\SetCodespacesBillingUsers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError|Schema\ValidationError> : ($call is Operation\Codespaces\DeleteCodespacesBillingUsers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError|Schema\ValidationError> : ($call is Operation\Codespaces\ListOrgSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\ListOrgSecrets\Response\Applicationjson\H200> : ($call is Operation\Codespaces\GetOrgPublicKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodespacesPublicKey> : ($call is Operation\Codespaces\GetOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodespacesOrgSecret> : ($call is Operation\Codespaces\CreateOrUpdateOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Codespaces\DeleteOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Codespaces\ListSelectedReposForOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Codespaces\SetSelectedReposForOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Codespaces\AddSelectedRepoToOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError|Schema\ValidationError> : ($call is Operation\Codespaces\RemoveSelectedRepoFromOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError|Schema\ValidationError> : ($call is Operation\Orgs\ListSamlSsoAuthorizations::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CredentialAuthorization> : ($call is Operation\Orgs\RemoveSamlSsoAuthorization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Orgs\CreateCustomRole::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationCustomRepositoryRole|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Orgs\GetCustomRole::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationCustomRepositoryRole|Schema\BasicError> : ($call is Operation\Orgs\DeleteCustomRole::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Orgs\UpdateCustomRole::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationCustomRepositoryRole|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Dependabot\ListAlertsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependabotAlertWithRepository|Schema\BasicError|Schema\ScimError|Schema\ValidationErrorSimple> : ($call is Operation\Dependabot\ListOrgSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Dependabot\ListOrgSecrets\Response\Applicationjson\H200> : ($call is Operation\Dependabot\GetOrgPublicKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependabotPublicKey> : ($call is Operation\Dependabot\GetOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationDependabotSecret> : ($call is Operation\Dependabot\CreateOrUpdateOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Dependabot\DeleteOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Dependabot\ListSelectedReposForOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200> : ($call is Operation\Dependabot\SetSelectedReposForOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Dependabot\AddSelectedRepoToOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Dependabot\RemoveSelectedRepoFromOrgSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Activity\ListPublicOrgEvents::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Operation\Teams\ExternalIdpGroupInfoForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ExternalGroup> : ($call is Operation\Teams\ListExternalIdpGroupsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ExternalGroups> : ($call is Operation\Orgs\ListFailedInvitations::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationInvitation|Schema\BasicError> : ($call is Operation\Orgs\ListFineGrainedPermissions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryFineGrainedPermission> : ($call is Operation\Orgs\ListWebhooks::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgHook|Schema\BasicError> : ($call is Operation\Orgs\CreateWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgHook|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Orgs\GetWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgHook|Schema\BasicError> : ($call is Operation\Orgs\DeleteWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Orgs\UpdateWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgHook|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Orgs\GetWebhookConfigForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Operation\Orgs\UpdateWebhookConfigForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Operation\Orgs\ListWebhookDeliveries::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDeliveryItem|Schema\BasicError|Schema\ScimError|Schema\ValidationError> : ($call is Operation\Orgs\GetWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDelivery|Schema\BasicError|Schema\ScimError|Schema\ValidationError> : ($call is Operation\Orgs\RedeliverWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuditLogEvent\Config|Schema\BasicError|Schema\ScimError|Schema\ValidationError> : ($call is Operation\Orgs\PingWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Apps\GetOrgInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Installation> : ($call is Operation\Orgs\ListAppInstallations::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Orgs\ListAppInstallations\Response\Applicationjson\H200> : ($call is Operation\Interactions\GetRestrictionsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Interactions\GetRestrictionsForOrg\Response\Applicationjson\H200> : ($call is Operation\Interactions\SetRestrictionsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\InteractionLimitResponse|Schema\ValidationError> : ($call is Operation\Interactions\RemoveRestrictionsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Orgs\ListPendingInvitations::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationInvitation|Schema\BasicError> : ($call is Operation\Orgs\CreateInvitation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationInvitation|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Orgs\CancelInvitation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ValidationError|Schema\BasicError> : ($call is Operation\Orgs\ListInvitationTeams::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team|Schema\BasicError> : ($call is Operation\Issues\ListForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue|Schema\BasicError> : ($call is Operation\Orgs\ListMembers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser|Schema\ValidationError> : ($call is Operation\Orgs\CheckMembershipForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Orgs\RemoveMember::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Codespaces\GetCodespacesForUserInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\ListInOrganization\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Codespaces\DeleteFromOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuditLogEvent\Config|Schema\BasicError> : ($call is Operation\Codespaces\StopInOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Codespace|Schema\BasicError> : ($call is Operation\Orgs\GetMembershipForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgMembership|Schema\BasicError> : ($call is Operation\Orgs\SetMembershipForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgMembership|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Orgs\RemoveMembershipForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Migrations\ListForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Migration> : ($call is Operation\Migrations\StartForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Migration|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Migrations\GetStatusForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Migration|Schema\BasicError> : ($call is Operation\Migrations\DownloadArchiveForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Migrations\DeleteArchiveForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Migrations\UnlockRepoForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Migrations\ListReposForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository|Schema\BasicError> : ($call is Operation\Orgs\ListOutsideCollaborators::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Orgs\ConvertMemberToOutsideCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Gists\CheckIsStarred\Response\Applicationjson\H404|Schema\BasicError> : ($call is Operation\Orgs\RemoveOutsideCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Orgs\RemoveOutsideCollaborator\Response\Applicationjson\H422> : ($call is Operation\Packages\ListPackagesForOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Package|Schema\BasicError> : ($call is Operation\Packages\GetPackageForOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Package> : ($call is Operation\Packages\DeletePackageForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Packages\RestorePackageForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Packages\GetAllPackageVersionsForPackageOwnedByOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PackageVersion|Schema\BasicError> : ($call is Operation\Packages\GetPackageVersionForOrganization::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PackageVersion> : ($call is Operation\Packages\DeletePackageVersionForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Packages\RestorePackageVersionForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Projects\ListForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project|Schema\ValidationErrorSimple> : ($call is Operation\Projects\CreateForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Orgs\ListPublicMembers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Orgs\CheckPublicMembershipForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Orgs\SetPublicMembershipForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Orgs\RemovePublicMembershipForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Repos\CreateInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Repository|Schema\BasicError|Schema\ValidationError> : ($call is Operation\SecretScanning\ListAlertsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationSecretScanningAlert|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\Orgs\ListSecurityManagerTeams::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamSimple> : ($call is Operation\Orgs\AddSecurityManagerTeam::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Orgs\RemoveSecurityManagerTeam::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Billing\GetGithubActionsBillingOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsBillingUsage> : ($call is Operation\Billing\GetGithubAdvancedSecurityBillingOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AdvancedSecurityActiveCommitters|Schema\BasicError> : ($call is Operation\Billing\GetGithubPackagesBillingOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PackagesBillingUsage> : ($call is Operation\Billing\GetSharedStorageBillingOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CombinedBillingUsage> : ($call is Operation\Teams\ListIdpGroupsForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GroupMapping> : ($call is Operation\Teams\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team|Schema\BasicError> : ($call is Operation\Teams\Create::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Teams\GetByName::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull|Schema\BasicError> : ($call is Operation\Teams\DeleteInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\UpdateInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Teams\ListDiscussionsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Operation\Teams\CreateDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Operation\Teams\GetDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Operation\Teams\DeleteDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\UpdateDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Operation\Teams\ListDiscussionCommentsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Operation\Teams\CreateDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Operation\Teams\GetDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Operation\Teams\DeleteDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\UpdateDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Operation\Reactions\ListForTeamDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\CreateForTeamDiscussionCommentInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\DeleteForTeamDiscussionComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Reactions\ListForTeamDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\CreateForTeamDiscussionInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\DeleteForTeamDiscussion::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\ListLinkedExternalIdpGroupsToTeamForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ExternalGroups> : ($call is Operation\Teams\UnlinkExternalIdpGroupFromTeamForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\LinkExternalIdpGroupToTeamForOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ExternalGroup> : ($call is Operation\Teams\ListPendingInvitationsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationInvitation> : ($call is Operation\Teams\ListMembersInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Teams\GetMembershipForUserInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamMembership> : ($call is Operation\Teams\AddOrUpdateMembershipForUserInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamMembership> : ($call is Operation\Teams\RemoveMembershipForUserInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\ListProjectsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamProject> : ($call is Operation\Teams\CheckPermissionsForProjectInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamProject> : ($call is Operation\Teams\AddOrUpdateProjectPermissionsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Orgs\RemoveOutsideCollaborator\Response\Applicationjson\H422> : ($call is Operation\Teams\RemoveProjectInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\ListReposInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Teams\CheckPermissionsForRepoInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamRepository> : ($call is Operation\Teams\AddOrUpdateRepoPermissionsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\RemoveRepoInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\ListIdpGroupsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GroupMapping> : ($call is Operation\Teams\CreateOrUpdateIdpGroupConnectionsInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GroupMapping> : ($call is Operation\Teams\ListChildInOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Operation\Orgs\EnableOrDisableSecurityProductOnAllOrgRepos::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Projects\GetCard::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectCard|Schema\BasicError> : ($call is Operation\Projects\DeleteCard::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Projects\DeleteCard\Response\Applicationjson\H403|Schema\BasicError> : ($call is Operation\Projects\UpdateCard::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectCard|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Projects\MoveCard::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Gists\CheckIsStarred\Response\Applicationjson\H404|Schema\Operation\Projects\MoveCard\Response\Applicationjson\H403|Schema\BasicError|Schema\Operation\Projects\MoveCard\Response\Applicationjson\H503|Schema\ValidationError> : ($call is Operation\Projects\GetColumn::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectColumn|Schema\BasicError> : ($call is Operation\Projects\DeleteColumn::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Projects\UpdateColumn::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectColumn|Schema\BasicError> : ($call is Operation\Projects\ListCards::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectCard|Schema\BasicError> : ($call is Operation\Projects\CreateCard::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectCard|Schema\BasicError|Schema\Operation\Orgs\Update\Response\Applicationjson\H422|Schema\Operation\Projects\MoveCard\Response\Applicationjson\H503> : ($call is Operation\Projects\MoveColumn::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Gists\CheckIsStarred\Response\Applicationjson\H404|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Projects\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project|Schema\BasicError> : ($call is Operation\Projects\Delete::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Projects\DeleteCard\Response\Applicationjson\H403|Schema\BasicError> : ($call is Operation\Projects\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project|Schema\Operation\Projects\DeleteCard\Response\Applicationjson\H403|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Projects\ListCollaborators::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Projects\AddCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError|Schema\ValidationError> : ($call is Operation\Projects\RemoveCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError|Schema\ValidationError> : ($call is Operation\Projects\GetPermissionForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectCollaboratorPermission|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Projects\ListColumns::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectColumn|Schema\BasicError> : ($call is Operation\Projects\CreateColumn::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProjectColumn|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\RateLimit\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RateLimitOverview|Schema\BasicError> : ($call is Operation\Actions\ListRepoRequiredWorkflows::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRepoRequiredWorkflows\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Actions\GetRepoRequiredWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepoRequiredWorkflow|Schema\BasicError> : ($call is Operation\Actions\GetRepoRequiredWorkflowUsage::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WorkflowUsage|Schema\BasicError> : ($call is Operation\Repos\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\FullRepository|Schema\BasicError> : ($call is Operation\Repos\Delete::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Orgs\RemoveOutsideCollaborator\Response\Applicationjson\H422|Schema\BasicError> : ($call is Operation\Repos\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\FullRepository|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Actions\ListArtifactsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListArtifactsForRepo\Response\Applicationjson\H200> : ($call is Operation\Actions\GetArtifact::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Artifact> : ($call is Operation\Actions\DeleteArtifact::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\DownloadArtifact::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Actions\GetActionsCacheUsage::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsCacheUsageByRepository> : ($call is Operation\Actions\GetActionsCacheList::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsCacheList> : ($call is Operation\Actions\DeleteActionsCacheByKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsCacheList> : ($call is Operation\Actions\DeleteActionsCacheById::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\GetJobForWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Job> : ($call is Operation\Actions\DownloadJobLogsForWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ReRunJobForWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject|Schema\BasicError> : ($call is Operation\Actions\GetCustomOidcSubClaimForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OidcCustomSubRepo|Schema\BasicError|Schema\ScimError> : ($call is Operation\Actions\SetCustomOidcSubClaimForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject|Schema\BasicError|Schema\ScimError|Schema\ValidationErrorSimple> : ($call is Operation\Actions\GetGithubActionsPermissionsRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsRepositoryPermissions> : ($call is Operation\Actions\SetGithubActionsPermissionsRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\GetWorkflowAccessToRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsWorkflowAccessToRepository> : ($call is Operation\Actions\SetWorkflowAccessToRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\GetAllowedActionsRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SelectedActions> : ($call is Operation\Actions\SetAllowedActionsRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\GetGithubActionsDefaultWorkflowPermissionsRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsGetDefaultWorkflowPermissions> : ($call is Operation\Actions\SetGithubActionsDefaultWorkflowPermissionsRepository::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListRequiredWorkflowRuns::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRequiredWorkflowRuns\Response\Applicationjson\H200> : ($call is Operation\Actions\ListSelfHostedRunnersForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListSelfHostedRunnersForOrg\Response\Applicationjson\H200> : ($call is Operation\Actions\ListRunnerApplicationsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RunnerApplication> : ($call is Operation\Actions\CreateRegistrationTokenForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuthenticationToken> : ($call is Operation\Actions\CreateRemoveTokenForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuthenticationToken> : ($call is Operation\Actions\GetSelfHostedRunnerForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Runner> : ($call is Operation\Actions\DeleteSelfHostedRunnerFromRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListLabelsForSelfHostedRunnerForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Actions\SetCustomLabelsForSelfHostedRunnerForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Actions\AddCustomLabelsToSelfHostedRunnerForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Actions\RemoveCustomLabelFromSelfHostedRunnerForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Actions\ListWorkflowRunsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRequiredWorkflowRuns\Response\Applicationjson\H200> : ($call is Operation\Actions\GetWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WorkflowRun> : ($call is Operation\Actions\DeleteWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\GetReviewsForRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EnvironmentApprovals> : ($call is Operation\Actions\ApproveWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject|Schema\BasicError> : ($call is Operation\Actions\ListWorkflowRunArtifacts::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListArtifactsForRepo\Response\Applicationjson\H200> : ($call is Operation\Actions\GetWorkflowRunAttempt::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WorkflowRun> : ($call is Operation\Actions\ListJobsForWorkflowRunAttempt::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListJobsForWorkflowRunAttempt\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Actions\DownloadWorkflowRunAttemptLogs::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\CancelWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject|Schema\BasicError> : ($call is Operation\Actions\ListJobsForWorkflowRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListJobsForWorkflowRunAttempt\Response\Applicationjson\H200> : ($call is Operation\Actions\DownloadWorkflowRunLogs::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\DeleteWorkflowRunLogs::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Actions\GetPendingDeploymentsForRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PendingDeployment> : ($call is Operation\Actions\ReviewPendingDeploymentsForRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Deployment> : ($call is Operation\Actions\ReRunWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\ReRunWorkflowFailedJobs::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\GetWorkflowRunUsage::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WorkflowRunUsage> : ($call is Operation\Actions\ListRepoSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRepoSecrets\Response\Applicationjson\H200> : ($call is Operation\Actions\GetRepoPublicKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsPublicKey> : ($call is Operation\Actions\GetRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsSecret> : ($call is Operation\Actions\CreateOrUpdateRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\DeleteRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListRepoVariables::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRepoVariables\Response\Applicationjson\H200> : ($call is Operation\Actions\CreateRepoVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\GetRepoVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsVariable> : ($call is Operation\Actions\DeleteRepoVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\UpdateRepoVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListRepoWorkflows::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRepoWorkflows\Response\Applicationjson\H200> : ($call is Operation\Actions\GetWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Workflow> : ($call is Operation\Actions\DisableWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\CreateWorkflowDispatch::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\EnableWorkflow::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListWorkflowRuns::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRequiredWorkflowRuns\Response\Applicationjson\H200> : ($call is Operation\Actions\GetWorkflowUsage::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WorkflowUsage> : ($call is Operation\Issues\ListAssignees::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser|Schema\BasicError> : ($call is Operation\Issues\CheckUserCanBeAssigned::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Repos\ListAutolinks::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Autolink> : ($call is Operation\Repos\CreateAutolink::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Autolink|Schema\ValidationError> : ($call is Operation\Repos\GetAutolink::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Autolink|Schema\BasicError> : ($call is Operation\Repos\DeleteAutolink::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Repos\EnableAutomatedSecurityFixes::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\DisableAutomatedSecurityFixes::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListBranches::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ShortBranch|Schema\BasicError> : ($call is Operation\Repos\GetBranch::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BranchWithProtection|Schema\BasicError> : ($call is Operation\Repos\GetBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BranchProtection|Schema\BasicError> : ($call is Operation\Repos\UpdateBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranch|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Repos\DeleteBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Repos\GetAdminBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchAdminEnforced> : ($call is Operation\Repos\SetAdminBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchAdminEnforced> : ($call is Operation\Repos\DeleteAdminBranchProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Repos\GetPullRequestReviewProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchPullRequestReview> : ($call is Operation\Repos\DeletePullRequestReviewProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Repos\UpdatePullRequestReviewProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchPullRequestReview|Schema\ValidationError> : ($call is Operation\Repos\GetCommitSignatureProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchAdminEnforced|Schema\BasicError> : ($call is Operation\Repos\CreateCommitSignatureProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ProtectedBranchAdminEnforced|Schema\BasicError> : ($call is Operation\Repos\DeleteCommitSignatureProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Repos\GetStatusChecksProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\StatusCheckPolicy|Schema\BasicError> : ($call is Operation\Repos\RemoveStatusCheckProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\UpdateStatusCheckProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\StatusCheckPolicy|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Repos\GetAllStatusCheckContexts::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebHookHeader\UserAgent|Schema\BasicError> : ($call is Operation\Repos\SetStatusCheckContexts::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebHookHeader\UserAgent|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Repos\AddStatusCheckContexts::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebHookHeader\UserAgent|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Repos\RemoveStatusCheckContexts::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebHookHeader\UserAgent|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Repos\GetAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BranchRestrictionPolicy|Schema\BasicError> : ($call is Operation\Repos\DeleteAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\GetAppsWithAccessToProtectedBranch::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration|Schema\BasicError> : ($call is Operation\Repos\SetAppAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration|Schema\ValidationError> : ($call is Operation\Repos\AddAppAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration|Schema\ValidationError> : ($call is Operation\Repos\RemoveAppAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Integration|Schema\ValidationError> : ($call is Operation\Repos\GetTeamsWithAccessToProtectedBranch::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team|Schema\BasicError> : ($call is Operation\Repos\SetTeamAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team|Schema\ValidationError> : ($call is Operation\Repos\AddTeamAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team|Schema\ValidationError> : ($call is Operation\Repos\RemoveTeamAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team|Schema\ValidationError> : ($call is Operation\Repos\GetUsersWithAccessToProtectedBranch::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser|Schema\BasicError> : ($call is Operation\Repos\SetUserAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser|Schema\ValidationError> : ($call is Operation\Repos\AddUserAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser|Schema\ValidationError> : ($call is Operation\Repos\RemoveUserAccessRestrictions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser|Schema\ValidationError> : ($call is Operation\Repos\RenameBranch::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BranchWithProtection|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Checks\Create::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckRun> : ($call is Operation\Checks\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckRun> : ($call is Operation\Checks\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckRun> : ($call is Operation\Checks\ListAnnotations::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckAnnotation> : ($call is Operation\Checks\RerequestRun::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject|Schema\BasicError> : ($call is Operation\Checks\CreateSuite::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckSuite> : ($call is Operation\Checks\SetSuitesPreferences::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckSuitePreference> : ($call is Operation\Checks\GetSuite::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CheckSuite> : ($call is Operation\Checks\ListForSuite::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Checks\ListForSuite\Response\Applicationjson\H200> : ($call is Operation\Checks\RerequestSuite::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\CodeScanning\ListAlertsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAlertItems|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\CodeScanning\GetAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAlert|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\CodeScanning\UpdateAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAlert|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\CodeScanning\ListAlertInstances::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAlertInstance|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\CodeScanning\ListRecentAnalyses::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAnalysis|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\CodeScanning\GetAnalysis::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAnalysis|Schema\AuditLogEvent\Data|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\CodeScanning\DeleteAnalysis::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningAnalysisDeletion|Schema\BasicError|Schema\ScimError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\CodeScanning\ListCodeqlDatabases::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningCodeqlDatabase|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\CodeScanning\GetCodeqlDatabase::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningCodeqlDatabase|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\CodeScanning\UploadSarif::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningSarifsReceipt|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\CodeScanning\GetSarif::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeScanningSarifsStatus|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\Repos\CodeownersErrors::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodeownersErrors> : ($call is Operation\Codespaces\ListInRepositoryForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\ListInOrganization\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Codespaces\CreateWithRepoForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Codespace|Schema\BasicError|Schema\ScimError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\Codespaces\ListDevcontainersInRepositoryForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\ListDevcontainersInRepositoryForAuthenticatedUser\Response\Applicationjson\H200|Schema\BasicError|Schema\ScimError> : ($call is Operation\Codespaces\RepoMachinesForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\RepoMachinesForAuthenticatedUser\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Codespaces\PreFlightWithRepoForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\PreFlightWithRepoForAuthenticatedUser\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Codespaces\ListRepoSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\ListRepoSecrets\Response\Applicationjson\H200> : ($call is Operation\Codespaces\GetRepoPublicKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodespacesPublicKey> : ($call is Operation\Codespaces\GetRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepoCodespacesSecret> : ($call is Operation\Codespaces\CreateOrUpdateRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Codespaces\DeleteRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListCollaborators::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Collaborator|Schema\BasicError> : ($call is Operation\Repos\CheckCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\AddCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryInvitation|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Repos\RemoveCollaborator::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\GetCollaboratorPermissionLevel::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryCollaboratorPermission|Schema\BasicError> : ($call is Operation\Repos\ListCommitCommentsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComment> : ($call is Operation\Repos\GetCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComment|Schema\BasicError> : ($call is Operation\Repos\DeleteCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Repos\UpdateCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComment|Schema\BasicError> : ($call is Operation\Reactions\ListForCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction|Schema\BasicError> : ($call is Operation\Reactions\CreateForCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction|Schema\ValidationError> : ($call is Operation\Reactions\DeleteForCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListCommits::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Commit|Schema\BasicError|Schema\ScimError> : ($call is Operation\Repos\ListBranchesForHeadCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BranchShort|Schema\ValidationError> : ($call is Operation\Repos\ListCommentsForCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComment> : ($call is Operation\Repos\CreateCommitComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComment|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Repos\ListPullRequestsAssociatedWithCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestSimple> : ($call is Operation\Repos\GetCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Commit|Schema\ValidationError|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\Checks\ListForRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Checks\ListForSuite\Response\Applicationjson\H200> : ($call is Operation\Checks\ListSuitesForRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Checks\ListSuitesForRef\Response\Applicationjson\H200> : ($call is Operation\Repos\GetCombinedStatusForRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CombinedCommitStatus|Schema\BasicError> : ($call is Operation\Repos\ListCommitStatusesForRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Status|Schema\BasicError> : ($call is Operation\Repos\GetCommunityProfileMetrics::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommunityProfile> : ($call is Operation\Repos\CompareCommits::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitComparison|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\Repos\GetContent::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ContentTree|Schema\Operation\Repos\GetContent\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Repos\CreateOrUpdateFileContents::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\FileCommit|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Repos\DeleteFile::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\FileCommit|Schema\ValidationError|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\Repos\ListContributors::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Contributor|Schema\BasicError> : ($call is Operation\Dependabot\ListAlertsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependabotAlert|Schema\BasicError|Schema\ScimError|Schema\ValidationErrorSimple> : ($call is Operation\Dependabot\GetAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependabotAlert|Schema\BasicError> : ($call is Operation\Dependabot\UpdateAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependabotAlert|Schema\BasicError|Schema\ScimError|Schema\ValidationErrorSimple> : ($call is Operation\Dependabot\ListRepoSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Dependabot\ListRepoSecrets\Response\Applicationjson\H200> : ($call is Operation\Dependabot\GetRepoPublicKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependabotPublicKey> : ($call is Operation\Dependabot\GetRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependabotSecret> : ($call is Operation\Dependabot\CreateOrUpdateRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Dependabot\DeleteRepoSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\DependencyGraph\DiffRange::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DependencyGraphDiff|Schema\BasicError> : ($call is Operation\DependencyGraph\CreateRepositorySnapshot::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\DependencyGraph\CreateRepositorySnapshot\Response\Applicationjson\H201> : ($call is Operation\Repos\ListDeployments::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Deployment> : ($call is Operation\Repos\CreateDeployment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Deployment|Schema\Operation\Activity\MarkNotificationsAsRead\Response\Applicationjson\H202|Schema\ValidationError> : ($call is Operation\Repos\GetDeployment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Deployment|Schema\BasicError> : ($call is Operation\Repos\DeleteDeployment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Repos\ListDeploymentStatuses::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentStatus|Schema\BasicError> : ($call is Operation\Repos\CreateDeploymentStatus::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentStatus|Schema\ValidationError> : ($call is Operation\Repos\GetDeploymentStatus::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentStatus|Schema\BasicError> : ($call is Operation\Repos\CreateDispatchEvent::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ValidationError> : ($call is Operation\Repos\GetAllEnvironments::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Repos\GetAllEnvironments\Response\Applicationjson\H200> : ($call is Operation\Repos\GetEnvironment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Environment> : ($call is Operation\Repos\CreateOrUpdateEnvironment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Environment|Schema\BasicError> : ($call is Operation\Repos\DeleteAnEnvironment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListDeploymentBranchPolicies::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Repos\ListDeploymentBranchPolicies\Response\Applicationjson\H200> : ($call is Operation\Repos\CreateDeploymentBranchPolicy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentBranchPolicy> : ($call is Operation\Repos\GetDeploymentBranchPolicy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentBranchPolicy> : ($call is Operation\Repos\UpdateDeploymentBranchPolicy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeploymentBranchPolicy> : ($call is Operation\Repos\DeleteDeploymentBranchPolicy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Activity\ListRepoEvents::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Operation\Repos\ListForks::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository|Schema\BasicError|Schema\ScimError> : ($call is Operation\Repos\CreateFork::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\FullRepository|Schema\BasicError|Schema\ScimError|Schema\ValidationError> : ($call is Operation\Git\CreateBlob::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ShortBlob|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Git\GetBlob::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Blob|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Git\CreateCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitCommit|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Git\GetCommit::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitCommit|Schema\BasicError> : ($call is Operation\Git\ListMatchingRefs::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitRef> : ($call is Operation\Git\GetRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitRef|Schema\BasicError> : ($call is Operation\Git\CreateRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitRef|Schema\ValidationError> : ($call is Operation\Git\DeleteRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ValidationError> : ($call is Operation\Git\UpdateRef::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitRef|Schema\ValidationError> : ($call is Operation\Git\CreateTag::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitTag|Schema\ValidationError> : ($call is Operation\Git\GetTag::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitTag|Schema\BasicError> : ($call is Operation\Git\CreateTree::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitTree|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Git\GetTree::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GitTree|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Repos\ListWebhooks::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Hook|Schema\BasicError> : ($call is Operation\Repos\CreateWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Hook|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Repos\GetWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Hook|Schema\BasicError> : ($call is Operation\Repos\DeleteWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Repos\UpdateWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Hook|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Repos\GetWebhookConfigForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Operation\Repos\UpdateWebhookConfigForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\WebhookConfig> : ($call is Operation\Repos\ListWebhookDeliveries::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDeliveryItem|Schema\BasicError|Schema\ScimError|Schema\ValidationError> : ($call is Operation\Repos\GetWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\HookDelivery|Schema\BasicError|Schema\ScimError|Schema\ValidationError> : ($call is Operation\Repos\RedeliverWebhookDelivery::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuditLogEvent\Config|Schema\BasicError|Schema\ScimError|Schema\ValidationError> : ($call is Operation\Repos\PingWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Repos\TestPushWebhook::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Migrations\GetImportStatus::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Import|Schema\BasicError> : ($call is Operation\Migrations\StartImport::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Import|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Migrations\CancelImport::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Migrations\UpdateImport::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Import|Schema\BasicError> : ($call is Operation\Migrations\GetCommitAuthors::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PorterAuthor|Schema\BasicError> : ($call is Operation\Migrations\MapCommitAuthor::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PorterAuthor|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Migrations\GetLargeFiles::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PorterLargeFile|Schema\BasicError> : ($call is Operation\Migrations\SetLfsPreference::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Import|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Apps\GetRepoInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Installation|Schema\BasicError> : ($call is Operation\Interactions\GetRestrictionsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Interactions\GetRestrictionsForOrg\Response\Applicationjson\H200> : ($call is Operation\Interactions\SetRestrictionsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\InteractionLimitResponse> : ($call is Operation\Interactions\RemoveRestrictionsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListInvitations::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryInvitation> : ($call is Operation\Repos\DeleteInvitation::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\UpdateInvitation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryInvitation> : ($call is Operation\Issues\ListForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Issues\Create::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue|Schema\BasicError|Schema\ValidationError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\Issues\ListCommentsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueComment|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Issues\GetComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueComment|Schema\BasicError> : ($call is Operation\Issues\DeleteComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Issues\UpdateComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueComment|Schema\ValidationError> : ($call is Operation\Reactions\ListForIssueComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction|Schema\BasicError> : ($call is Operation\Reactions\CreateForIssueComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction|Schema\ValidationError> : ($call is Operation\Reactions\DeleteForIssueComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Issues\ListEventsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueEvent|Schema\ValidationError> : ($call is Operation\Issues\GetEvent::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueEvent|Schema\BasicError> : ($call is Operation\Issues\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue|Schema\BasicError> : ($call is Operation\Issues\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue|Schema\ValidationError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503|Schema\BasicError> : ($call is Operation\Issues\AddAssignees::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue> : ($call is Operation\Issues\RemoveAssignees::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue> : ($call is Operation\Issues\CheckUserCanBeAssignedToIssue::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Issues\ListComments::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueComment|Schema\BasicError> : ($call is Operation\Issues\CreateComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueComment|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Issues\ListEvents::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\IssueEventForIssue|Schema\BasicError> : ($call is Operation\Issues\ListLabelsOnIssue::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label|Schema\BasicError> : ($call is Operation\Issues\SetLabels::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Issues\AddLabels::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Issues\RemoveAllLabels::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Issues\RemoveLabel::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label|Schema\BasicError> : ($call is Operation\Issues\Lock::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError|Schema\ValidationError> : ($call is Operation\Issues\Unlock::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Reactions\ListForIssue::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction|Schema\BasicError> : ($call is Operation\Reactions\CreateForIssue::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction|Schema\ValidationError> : ($call is Operation\Reactions\DeleteForIssue::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Issues\ListEventsForTimeline::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TimelineIssueEvents|Schema\BasicError> : ($call is Operation\Repos\ListDeployKeys::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeployKey> : ($call is Operation\Repos\CreateDeployKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeployKey|Schema\ValidationError> : ($call is Operation\Repos\GetDeployKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DeployKey|Schema\BasicError> : ($call is Operation\Repos\DeleteDeployKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Issues\ListLabelsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label|Schema\BasicError> : ($call is Operation\Issues\CreateLabel::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Issues\GetLabel::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label|Schema\BasicError> : ($call is Operation\Issues\DeleteLabel::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Issues\UpdateLabel::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label> : ($call is Operation\Repos\ListLanguages::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Language> : ($call is Operation\Repos\EnableLfsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuditLogEvent\Config> : ($call is Operation\Repos\DisableLfsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Licenses\GetForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\LicenseContent> : ($call is Operation\Repos\MergeUpstream::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MergedUpstream> : ($call is Operation\Repos\Merge::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Commit|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Issues\ListMilestones::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Milestone|Schema\BasicError> : ($call is Operation\Issues\CreateMilestone::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Milestone|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Issues\GetMilestone::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Milestone|Schema\BasicError> : ($call is Operation\Issues\DeleteMilestone::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Issues\UpdateMilestone::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Milestone> : ($call is Operation\Issues\ListLabelsForMilestone::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Label> : ($call is Operation\Activity\ListRepoNotificationsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Thread> : ($call is Operation\Activity\MarkRepoNotificationsAsRead::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Activity\MarkRepoNotificationsAsRead\Response\Applicationjson\H202> : ($call is Operation\Repos\GetPages::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Page|Schema\BasicError> : ($call is Operation\Repos\UpdateInformationAboutPagesSite::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ValidationError|Schema\BasicError|Schema\ScimError> : ($call is Operation\Repos\CreatePagesSite::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Page|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Repos\DeletePagesSite::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ValidationError|Schema\BasicError> : ($call is Operation\Repos\ListPagesBuilds::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PageBuild> : ($call is Operation\Repos\RequestPagesBuild::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PageBuildStatus> : ($call is Operation\Repos\GetLatestPagesBuild::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PageBuild> : ($call is Operation\Repos\GetPagesBuild::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PageBuild> : ($call is Operation\Repos\CreatePagesDeployment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PageDeployment|Schema\BasicError|Schema\ScimError|Schema\ValidationError> : ($call is Operation\Repos\GetPagesHealthCheck::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PagesHealthCheck|Schema\EmptyObject|Schema\BasicError> : ($call is Operation\Projects\ListForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Projects\CreateForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Pulls\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestSimple|Schema\ValidationError> : ($call is Operation\Pulls\Create::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequest|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Pulls\ListReviewCommentsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment> : ($call is Operation\Pulls\GetReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment|Schema\BasicError> : ($call is Operation\Pulls\DeleteReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Pulls\UpdateReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment> : ($call is Operation\Reactions\ListForPullRequestReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction|Schema\BasicError> : ($call is Operation\Reactions\CreateForPullRequestReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction|Schema\ValidationError> : ($call is Operation\Reactions\DeleteForPullRequestComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Pulls\Get::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequest|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\Pulls\Update::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequest|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Codespaces\CreateWithPrForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Codespace|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\Pulls\ListReviewComments::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment> : ($call is Operation\Pulls\CreateReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Pulls\CreateReplyForReviewComment::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewComment|Schema\BasicError> : ($call is Operation\Pulls\ListCommits::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Commit> : ($call is Operation\Pulls\ListFiles::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\DiffEntry|Schema\ValidationError|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\Pulls\CheckIfMerged::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Pulls\Merge::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestMergeResult|Schema\Operation\Orgs\RemoveOutsideCollaborator\Response\Applicationjson\H422|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Pulls\ListRequestedReviewers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReviewRequest> : ($call is Operation\Pulls\RequestReviewers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestSimple|Schema\BasicError> : ($call is Operation\Pulls\RemoveRequestedReviewers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestSimple|Schema\ValidationError> : ($call is Operation\Pulls\ListReviews::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview> : ($call is Operation\Pulls\CreateReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview|Schema\ValidationErrorSimple|Schema\BasicError> : ($call is Operation\Pulls\GetReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview|Schema\BasicError> : ($call is Operation\Pulls\UpdateReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview|Schema\ValidationErrorSimple> : ($call is Operation\Pulls\DeletePendingReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview|Schema\ValidationErrorSimple|Schema\BasicError> : ($call is Operation\Pulls\ListCommentsForReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReviewComment|Schema\BasicError> : ($call is Operation\Pulls\DismissReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Pulls\SubmitReview::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PullRequestReview|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Pulls\UpdateBranch::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Activity\MarkRepoNotificationsAsRead\Response\Applicationjson\H202|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Repos\GetReadme::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ContentFile|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Repos\GetReadmeInDirectory::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ContentFile|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Repos\ListReleases::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release|Schema\BasicError> : ($call is Operation\Repos\CreateRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Repos\GetReleaseAsset::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReleaseAsset|Schema\BasicError> : ($call is Operation\Repos\DeleteReleaseAsset::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\UpdateReleaseAsset::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReleaseAsset> : ($call is Operation\Repos\GenerateReleaseNotes::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReleaseNotesContent|Schema\BasicError> : ($call is Operation\Repos\GetLatestRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release> : ($call is Operation\Repos\GetReleaseByTag::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release|Schema\BasicError> : ($call is Operation\Repos\GetRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release|Schema\BasicError> : ($call is Operation\Repos\DeleteRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\UpdateRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Release|Schema\BasicError> : ($call is Operation\Repos\ListReleaseAssets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReleaseAsset> : ($call is Operation\Repos\UploadReleaseAsset::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReleaseAsset> : ($call is Operation\Reactions\ListForRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction|Schema\BasicError> : ($call is Operation\Reactions\CreateForRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction|Schema\ValidationError> : ($call is Operation\Reactions\DeleteForRelease::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\SecretScanning\ListAlertsForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SecretScanningAlert|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\SecretScanning\GetAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SecretScanningAlert|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\SecretScanning\UpdateAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SecretScanningAlert|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\SecretScanning\ListLocationsForAlert::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SecretScanningLocation|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\Activity\ListStargazersForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Activity\ListStargazersForRepo\Response\Applicationjson\H200|Schema\ValidationError> : ($call is Operation\Repos\GetCodeFrequencyStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Repos\GetCodeFrequencyStats\Response\Applicationjson\H200|Schema\AuditLogEvent\Config> : ($call is Operation\Repos\GetCommitActivityStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CommitActivity|Schema\AuditLogEvent\Config> : ($call is Operation\Repos\GetContributorsStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ContributorActivity|Schema\AuditLogEvent\Config> : ($call is Operation\Repos\GetParticipationStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ParticipationStats|Schema\BasicError> : ($call is Operation\Repos\GetPunchCardStats::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Repos\GetCodeFrequencyStats\Response\Applicationjson\H200> : ($call is Operation\Repos\CreateCommitStatus::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Status> : ($call is Operation\Activity\ListWatchersForRepo::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Activity\GetRepoSubscription::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositorySubscription|Schema\BasicError> : ($call is Operation\Activity\SetRepoSubscription::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositorySubscription> : ($call is Operation\Activity\DeleteRepoSubscription::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListTags::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Tag> : ($call is Operation\Repos\ListTagProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TagProtection|Schema\BasicError> : ($call is Operation\Repos\CreateTagProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TagProtection|Schema\BasicError> : ($call is Operation\Repos\DeleteTagProtection::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Repos\DownloadTarballArchive::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\ListTeams::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team> : ($call is Operation\Repos\GetAllTopics::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Topic|Schema\BasicError> : ($call is Operation\Repos\ReplaceAllTopics::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Topic|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Repos\GetClones::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CloneTraffic|Schema\BasicError> : ($call is Operation\Repos\GetTopPaths::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ContentTraffic|Schema\BasicError> : ($call is Operation\Repos\GetTopReferrers::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ReferrerTraffic|Schema\BasicError> : ($call is Operation\Repos\GetViews::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ViewTraffic|Schema\BasicError> : ($call is Operation\Repos\Transfer::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Repos\CheckVulnerabilityAlerts::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\EnableVulnerabilityAlerts::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\DisableVulnerabilityAlerts::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\DownloadZipballArchive::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Repos\CreateUsingTemplate::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Repository> : ($call is Operation\Repos\ListPublic::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository|Schema\ValidationError> : ($call is Operation\Actions\ListEnvironmentSecrets::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRepoSecrets\Response\Applicationjson\H200> : ($call is Operation\Actions\GetEnvironmentPublicKey::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsPublicKey> : ($call is Operation\Actions\GetEnvironmentSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsSecret> : ($call is Operation\Actions\CreateOrUpdateEnvironmentSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\DeleteEnvironmentSecret::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\ListEnvironmentVariables::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListRepoVariables\Response\Applicationjson\H200> : ($call is Operation\Actions\CreateEnvironmentVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject> : ($call is Operation\Actions\GetEnvironmentVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsVariable> : ($call is Operation\Actions\DeleteEnvironmentVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Actions\UpdateEnvironmentVariable::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Scim\ListProvisionedIdentities::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ScimUserList|Schema\ScimError> : ($call is Operation\Scim\ProvisionAndInviteUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ScimUser|Schema\ScimError> : ($call is Operation\Scim\GetProvisioningInformationForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ScimUser|Schema\ScimError> : ($call is Operation\Scim\SetInformationForProvisionedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ScimUser|Schema\ScimError> : ($call is Operation\Scim\DeleteUserFromOrg::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ScimError> : ($call is Operation\Scim\UpdateAttributeForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ScimUser|Schema\ScimError|Schema\BasicError> : ($call is Operation\Search\Code::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Search\Code\Response\Applicationjson\H200|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Search\Commits::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Search\Commits\Response\Applicationjson\H200> : ($call is Operation\Search\IssuesAndPullRequests::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Search\IssuesAndPullRequests\Response\Applicationjson\H200|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Search\Labels::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Search\Labels\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Search\Repos::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Search\Repos\Response\Applicationjson\H200|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503|Schema\ValidationError> : ($call is Operation\Search\Topics::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Search\Topics\Response\Applicationjson\H200> : ($call is Operation\Search\Users::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Search\Users\Response\Applicationjson\H200|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503|Schema\ValidationError> : ($call is Operation\Teams\GetLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull|Schema\BasicError> : ($call is Operation\Teams\DeleteLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError|Schema\ValidationError> : ($call is Operation\Teams\UpdateLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Teams\ListDiscussionsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Operation\Teams\CreateDiscussionLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Operation\Teams\GetDiscussionLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Operation\Teams\DeleteDiscussionLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\UpdateDiscussionLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussion> : ($call is Operation\Teams\ListDiscussionCommentsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Operation\Teams\CreateDiscussionCommentLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Operation\Teams\GetDiscussionCommentLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Operation\Teams\DeleteDiscussionCommentLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\UpdateDiscussionCommentLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamDiscussionComment> : ($call is Operation\Reactions\ListForTeamDiscussionCommentLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\CreateForTeamDiscussionCommentLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\ListForTeamDiscussionLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Reactions\CreateForTeamDiscussionLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Reaction> : ($call is Operation\Teams\ListPendingInvitationsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationInvitation> : ($call is Operation\Teams\ListMembersLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser|Schema\BasicError> : ($call is Operation\Teams\GetMemberLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\AddMemberLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Teams\RemoveMemberLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\GetMembershipForUserLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamMembership|Schema\BasicError> : ($call is Operation\Teams\AddOrUpdateMembershipForUserLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamMembership|Schema\BasicError> : ($call is Operation\Teams\RemoveMembershipForUserLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\ListProjectsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamProject|Schema\BasicError> : ($call is Operation\Teams\CheckPermissionsForProjectLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamProject> : ($call is Operation\Teams\AddOrUpdateProjectPermissionsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Orgs\RemoveOutsideCollaborator\Response\Applicationjson\H422|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Teams\RemoveProjectLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError|Schema\ValidationError> : ($call is Operation\Teams\ListReposLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository|Schema\BasicError> : ($call is Operation\Teams\CheckPermissionsForRepoLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamRepository> : ($call is Operation\Teams\AddOrUpdateRepoPermissionsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError|Schema\ValidationError> : ($call is Operation\Teams\RemoveRepoLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Teams\ListIdpGroupsForLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GroupMapping|Schema\BasicError> : ($call is Operation\Teams\CreateOrUpdateIdpGroupConnectionsLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GroupMapping|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Teams\ListChildLegacy::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Team|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Users\GetAuthenticated::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Users\GetAuthenticated\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Users\UpdateAuthenticated::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PrivateUser|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Users\ListBlockedByAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser|Schema\BasicError> : ($call is Operation\Users\CheckBlocked::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Users\Block::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError|Schema\ValidationError> : ($call is Operation\Users\Unblock::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Codespaces\ListForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\ListInOrganization\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Codespaces\CreateForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Codespace|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503> : ($call is Operation\Codespaces\ListSecretsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\ListSecretsForAuthenticatedUser\Response\Applicationjson\H200> : ($call is Operation\Codespaces\GetPublicKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodespacesUserPublicKey> : ($call is Operation\Codespaces\GetSecretForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodespacesSecret> : ($call is Operation\Codespaces\CreateOrUpdateSecretForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\EmptyObject|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Codespaces\DeleteSecretForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Codespaces\ListRepositoriesForSecretForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Codespaces\SetRepositoriesForSecretForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Codespaces\AddRepositoryForSecretForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Codespaces\RemoveRepositoryForSecretForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Codespaces\GetForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Codespace|Schema\BasicError> : ($call is Operation\Codespaces\DeleteForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\AuditLogEvent\Config|Schema\BasicError> : ($call is Operation\Codespaces\UpdateForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Codespace|Schema\BasicError> : ($call is Operation\Codespaces\ExportForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodespaceExportDetails|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Codespaces\GetExportDetailsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodespaceExportDetails|Schema\BasicError> : ($call is Operation\Codespaces\CodespaceMachinesForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Codespaces\RepoMachinesForAuthenticatedUser\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Codespaces\PublishForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CodespaceWithFullRepository|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Codespaces\StartForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Codespace|Schema\BasicError|Schema\ScimError> : ($call is Operation\Codespaces\StopForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Codespace|Schema\BasicError> : ($call is Operation\Users\SetPrimaryEmailVisibilityForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Email|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Users\ListEmailsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Email|Schema\BasicError> : ($call is Operation\Users\AddEmailForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Email|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Users\DeleteEmailForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError|Schema\ValidationError> : ($call is Operation\Users\ListFollowersForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser|Schema\BasicError> : ($call is Operation\Users\ListFollowedByAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser|Schema\BasicError> : ($call is Operation\Users\CheckPersonIsFollowedByAuthenticated::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Users\Follow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Users\Unfollow::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Users\ListGpgKeysForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GpgKey|Schema\BasicError> : ($call is Operation\Users\CreateGpgKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GpgKey|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Users\GetGpgKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GpgKey|Schema\BasicError> : ($call is Operation\Users\DeleteGpgKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError|Schema\ValidationError> : ($call is Operation\Apps\ListInstallationsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Orgs\ListAppInstallations\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Apps\ListInstallationReposForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Apps\ListInstallationReposForAuthenticatedUser\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Apps\AddRepoToInstallationForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Apps\RemoveRepoFromInstallationForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Interactions\GetRestrictionsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Interactions\GetRestrictionsForOrg\Response\Applicationjson\H200> : ($call is Operation\Interactions\SetRestrictionsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\InteractionLimitResponse|Schema\ValidationError> : ($call is Operation\Interactions\RemoveRestrictionsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Issues\ListForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Issue|Schema\BasicError> : ($call is Operation\Users\ListPublicSshKeysForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Key|Schema\BasicError> : ($call is Operation\Users\CreatePublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Key|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Users\GetPublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Key|Schema\BasicError> : ($call is Operation\Users\DeletePublicSshKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Apps\ListSubscriptionsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\UserMarketplacePurchase|Schema\BasicError> : ($call is Operation\Apps\ListSubscriptionsForAuthenticatedUserStubbed::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\UserMarketplacePurchase|Schema\BasicError> : ($call is Operation\Orgs\ListMembershipsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgMembership|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Orgs\GetMembershipForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgMembership|Schema\BasicError> : ($call is Operation\Orgs\UpdateMembershipForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrgMembership|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Migrations\ListForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Migration|Schema\BasicError> : ($call is Operation\Migrations\StartForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Migration|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Migrations\GetStatusForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Migration|Schema\BasicError> : ($call is Operation\Migrations\GetArchiveForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Migrations\DeleteArchiveForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Migrations\UnlockRepoForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Migrations\ListReposForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository|Schema\BasicError> : ($call is Operation\Orgs\ListForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationSimple|Schema\BasicError> : ($call is Operation\Packages\ListPackagesForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Package> : ($call is Operation\Packages\GetPackageForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Package> : ($call is Operation\Packages\DeletePackageForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Packages\RestorePackageForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Packages\GetAllPackageVersionsForPackageOwnedByAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PackageVersion|Schema\BasicError> : ($call is Operation\Packages\GetPackageVersionForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PackageVersion> : ($call is Operation\Packages\DeletePackageVersionForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Packages\RestorePackageVersionForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Projects\CreateForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project|Schema\BasicError|Schema\ValidationErrorSimple> : ($call is Operation\Users\ListPublicEmailsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Email|Schema\BasicError> : ($call is Operation\Repos\ListForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Repository|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Repos\CreateForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Repository|Schema\BasicError|Schema\ValidationError|Schema\ScimError> : ($call is Operation\Repos\ListInvitationsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\RepositoryInvitation|Schema\BasicError> : ($call is Operation\Repos\DeclineInvitationForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Repos\AcceptInvitationForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Users\ListSshSigningKeysForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SshSigningKey|Schema\BasicError> : ($call is Operation\Users\CreateSshSigningKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SshSigningKey|Schema\ValidationError|Schema\BasicError> : ($call is Operation\Users\GetSshSigningKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SshSigningKey|Schema\BasicError> : ($call is Operation\Users\DeleteSshSigningKeyForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Activity\ListReposStarredByAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Repository|Schema\StarredRepository|Schema\BasicError> : ($call is Operation\Activity\CheckRepoIsStarredByAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Activity\StarRepoForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Activity\UnstarRepoForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Activity\ListWatchedReposForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository|Schema\BasicError> : ($call is Operation\Teams\ListForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\TeamFull|Schema\BasicError> : ($call is Operation\Users\List_::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Users\GetByUsername::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Users\GetAuthenticated\Response\Applicationjson\H200|Schema\BasicError> : ($call is Operation\Activity\ListEventsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Operation\Activity\ListOrgEventsForAuthenticatedUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Operation\Activity\ListPublicEventsForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Operation\Users\ListFollowersForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Users\ListFollowingForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SimpleUser> : ($call is Operation\Users\CheckFollowingForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<\Psr\Http\Message\ResponseInterface> : ($call is Operation\Gists\ListForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BaseGist|Schema\ValidationError> : ($call is Operation\Users\ListGpgKeysForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\GpgKey> : ($call is Operation\Users\GetContextForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Hovercard|Schema\BasicError|Schema\ValidationError> : ($call is Operation\Apps\GetUserInstallation::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Installation> : ($call is Operation\Users\ListPublicKeysForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\KeySimple> : ($call is Operation\Orgs\ListForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\OrganizationSimple> : ($call is Operation\Packages\ListPackagesForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Package|Schema\BasicError> : ($call is Operation\Packages\GetPackageForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Package> : ($call is Operation\Packages\DeletePackageForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Packages\RestorePackageForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Packages\GetAllPackageVersionsForPackageOwnedByUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PackageVersion|Schema\BasicError> : ($call is Operation\Packages\GetPackageVersionForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PackageVersion> : ($call is Operation\Packages\DeletePackageVersionForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Packages\RestorePackageVersionForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\BasicError> : ($call is Operation\Projects\ListForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Project|Schema\ValidationError> : ($call is Operation\Activity\ListReceivedEventsForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Operation\Activity\ListReceivedPublicEventsForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Event> : ($call is Operation\Repos\ListForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Billing\GetGithubActionsBillingUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\ActionsBillingUsage> : ($call is Operation\Billing\GetGithubPackagesBillingUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\PackagesBillingUsage> : ($call is Operation\Billing\GetSharedStorageBillingUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\CombinedBillingUsage> : ($call is Operation\Users\ListSshSigningKeysForUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\SshSigningKey> : ($call is Operation\Activity\ListReposStarredByUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Activity\ListReposStarredByUser\Response\Applicationjson\H200> : ($call is Operation\Activity\ListReposWatchedByUser::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\MinimalRepository> : ($call is Operation\Meta\GetAllVersions::OPERATION_MATCH ? \React\Promise\PromiseInterface<Schema\Operation\Meta\GetAllVersions\Response\Applicationjson\H200|Schema\BasicError> : \React\Promise\PromiseInterface<Schema\WebHookHeader\UserAgent
     */
    public function callAsync(string $call, array $params = array())
    {
        [$method, $path] = explode(' ', $call);
        $pathChunks = explode('/', $path);
        switch ($method) {
            case 'GET':
                if (array_key_exists(0, $pathChunks) == true && '' == $pathChunks[0]) {
                    if ('GET /' == $call) {
                        $requestBodyData = array();
                        foreach (\array_keys($params) as $param) {
                            if (\in_array($param, array()) != false) {
                                \array_push($requestBodyData, $param);
                            }
                        }
                        if (\array_key_exists(Hydrator\Operation\Root::class, $this->hydrator) == false) {
                            $this->hydrator[Hydrator\Operation\Root::class] = $this->hydrators->getObjectMapperOperation🌀Root();
                        }
                        $operation = new Operation\Meta\Root($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Root::class]);
                        $request = $operation->createRequest($requestBodyData);
                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Root {
                            return $operation->createResponse($response);
                        });
                    } elseif (array_key_exists(1, $pathChunks) == true && 'app' == $pathChunks[1]) {
                        if ('GET /app' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array()) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\App::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\App::class] = $this->hydrators->getObjectMapperOperation🌀App();
                            }
                            $operation = new Operation\Apps\GetAuthenticated($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App::class]);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Integration {
                                return $operation->createResponse($response);
                            });
                        } elseif (array_key_exists(2, $pathChunks) == true && 'hook' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'config' == $pathChunks[3]) {
                                if ('GET /app/hook/config' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array()) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\App\Hook\Config::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\App\Hook\Config::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Hook🌀Config();
                                    }
                                    $operation = new Operation\Apps\GetWebhookConfigForApp($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Hook\Config::class]);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WebhookConfig {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'deliveries' == $pathChunks[3]) {
                                if ('GET /app/hook/deliveries' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('cursor', 'redelivery', 'per_page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\App\Hook\Deliveries::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\App\Hook\Deliveries::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Hook🌀Deliveries();
                                    }
                                    $operation = new Operation\Apps\ListWebhookDeliveries($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Hook\Deliveries::class], $params['cursor'], $params['redelivery'], $params['per_page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\HookDeliveryItem|Schema\BasicError|Schema\ScimError|Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{delivery_id}' == $pathChunks[4]) {
                                    if ('GET /app/hook/deliveries/{delivery_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('delivery_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\App\Hook\Deliveries\CbDeliveryIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\App\Hook\Deliveries\CbDeliveryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Hook🌀Deliveries🌀CbDeliveryIdRcb();
                                        }
                                        $operation = new Operation\Apps\GetWebhookDelivery($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Hook\Deliveries\CbDeliveryIdRcb::class], $params['delivery_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\HookDelivery|Schema\BasicError|Schema\ScimError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'installation-requests' == $pathChunks[2]) {
                            if ('GET /app/installation-requests' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\App\InstallationRequests::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\App\InstallationRequests::class] = $this->hydrators->getObjectMapperOperation🌀App🌀InstallationRequests();
                                }
                                $operation = new Operation\Apps\ListInstallationRequestsForAuthenticatedApp($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\InstallationRequests::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\IntegrationInstallationRequest|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'installations' == $pathChunks[2]) {
                            if ('GET /app/installations' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('since', 'outdated', 'per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\App\Installations::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\App\Installations::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Installations();
                                }
                                $operation = new Operation\Apps\ListInstallations($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Installations::class], $params['since'], $params['outdated'], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Installation {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && '{installation_id}' == $pathChunks[3]) {
                                if ('GET /app/installations/{installation_id}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('installation_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\App\Installations\CbInstallationIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Installations🌀CbInstallationIdRcb();
                                    }
                                    $operation = new Operation\Apps\GetInstallation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb::class], $params['installation_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Installation|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'apps' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{app_slug}' == $pathChunks[2]) {
                            if ('GET /apps/{app_slug}' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('app_slug')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Apps\CbAppSlugRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Apps\CbAppSlugRcb::class] = $this->hydrators->getObjectMapperOperation🌀Apps🌀CbAppSlugRcb();
                                }
                                $operation = new Operation\Apps\GetBySlug($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Apps\CbAppSlugRcb::class], $params['app_slug']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Integration|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'codes_of_conduct' == $pathChunks[1]) {
                        if ('GET /codes_of_conduct' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array()) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\CodesOfConduct::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\CodesOfConduct::class] = $this->hydrators->getObjectMapperOperation🌀CodesOfConduct();
                            }
                            $operation = new Operation\CodesOfConduct\GetAllCodesOfConduct($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\CodesOfConduct::class]);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodeOfConduct {
                                return $operation->createResponse($response);
                            });
                        } elseif (array_key_exists(2, $pathChunks) == true && '{key}' == $pathChunks[2]) {
                            if ('GET /codes_of_conduct/{key}' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('key')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\CodesOfConduct\CbKeyRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\CodesOfConduct\CbKeyRcb::class] = $this->hydrators->getObjectMapperOperation🌀CodesOfConduct🌀CbKeyRcb();
                                }
                                $operation = new Operation\CodesOfConduct\GetConductCode($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\CodesOfConduct\CbKeyRcb::class], $params['key']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodeOfConduct|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'emojis' == $pathChunks[1]) {
                        if ('GET /emojis' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array()) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\Emojis::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Emojis::class] = $this->hydrators->getObjectMapperOperation🌀Emojis();
                            }
                            $operation = new Operation\Emojis\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Emojis::class]);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Emojis\Get\Response\Applicationjson\H200 {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'enterprise-installation' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{enterprise_or_org}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'server-statistics' == $pathChunks[3]) {
                                if ('GET /enterprise-installation/{enterprise_or_org}/server-statistics' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('enterprise_or_org', 'date_start', 'date_end')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\EnterpriseDashInstallation\CbEnterpriseOrOrgRcb\ServerDashStatistics::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\EnterpriseDashInstallation\CbEnterpriseOrOrgRcb\ServerDashStatistics::class] = $this->hydrators->getObjectMapperOperation🌀EnterpriseDashInstallation🌀CbEnterpriseOrOrgRcb🌀ServerDashStatistics();
                                    }
                                    $operation = new Operation\EnterpriseAdmin\GetServerStatistics($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\EnterpriseDashInstallation\CbEnterpriseOrOrgRcb\ServerDashStatistics::class], $params['enterprise_or_org'], $params['date_start'], $params['date_end']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ServerStatistics {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'enterprises' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{enterprise}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'actions' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'cache' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'usage' == $pathChunks[5]) {
                                        if ('GET /enterprises/{enterprise}/actions/cache/usage' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Cache\Usage::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Cache\Usage::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀Cache🌀Usage();
                                            }
                                            $operation = new Operation\Actions\GetActionsCacheUsageForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Cache\Usage::class], $params['enterprise']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsCacheUsageOrgEnterprise {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'permissions' == $pathChunks[4]) {
                                    if ('GET /enterprises/{enterprise}/actions/permissions' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('enterprise')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Permissions::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Permissions::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀Permissions();
                                        }
                                        $operation = new Operation\EnterpriseAdmin\GetGithubActionsPermissionsEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Permissions::class], $params['enterprise']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsEnterprisePermissions {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'organizations' == $pathChunks[5]) {
                                        if ('GET /enterprises/{enterprise}/actions/permissions/organizations' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Permissions\Organizations::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Permissions\Organizations::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀Permissions🌀Organizations();
                                            }
                                            $operation = new Operation\EnterpriseAdmin\ListSelectedOrganizationsEnabledGithubActionsEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Permissions\Organizations::class], $params['enterprise'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListSelectedOrganizationsEnabledGithubActionsEnterprise\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'selected-actions' == $pathChunks[5]) {
                                        if ('GET /enterprises/{enterprise}/actions/permissions/selected-actions' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Permissions\SelectedActions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Permissions\SelectedActions::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀Permissions🌀SelectedActions();
                                            }
                                            $operation = new Operation\EnterpriseAdmin\GetAllowedActionsEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Permissions\SelectedActions::class], $params['enterprise']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SelectedActions {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'workflow' == $pathChunks[5]) {
                                        if ('GET /enterprises/{enterprise}/actions/permissions/workflow' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Permissions\Workflow::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Permissions\Workflow::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀Permissions🌀Workflow();
                                            }
                                            $operation = new Operation\Actions\GetGithubActionsDefaultWorkflowPermissionsEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Permissions\Workflow::class], $params['enterprise']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsGetDefaultWorkflowPermissions {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'runner-groups' == $pathChunks[4]) {
                                    if ('GET /enterprises/{enterprise}/actions/runner-groups' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('enterprise', 'visible_to_organization', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerGroups::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerGroups::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀RunnerGroups();
                                        }
                                        $operation = new Operation\EnterpriseAdmin\ListSelfHostedRunnerGroupsForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerGroups::class], $params['enterprise'], $params['visible_to_organization'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListSelfHostedRunnerGroupsForEnterprise\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{runner_group_id}' == $pathChunks[5]) {
                                        if ('GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise', 'runner_group_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀RunnerDashGroups🌀CbRunnerGroupIdRcb();
                                            }
                                            $operation = new Operation\EnterpriseAdmin\GetSelfHostedRunnerGroupForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb::class], $params['enterprise'], $params['runner_group_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RunnerGroupsEnterprise {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'organizations' == $pathChunks[6]) {
                                            if ('GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('enterprise', 'runner_group_id', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb\Organizations::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb\Organizations::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀RunnerDashGroups🌀CbRunnerGroupIdRcb🌀Organizations();
                                                }
                                                $operation = new Operation\EnterpriseAdmin\ListOrgAccessToSelfHostedRunnerGroupInEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb\Organizations::class], $params['enterprise'], $params['runner_group_id'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListSelectedOrganizationsEnabledGithubActionsEnterprise\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'runners' == $pathChunks[6]) {
                                            if ('GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('enterprise', 'runner_group_id', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb\Runners::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb\Runners::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀RunnerDashGroups🌀CbRunnerGroupIdRcb🌀Runners();
                                                }
                                                $operation = new Operation\EnterpriseAdmin\ListSelfHostedRunnersInGroupForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb\Runners::class], $params['enterprise'], $params['runner_group_id'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListSelfHostedRunnersInGroupForEnterprise\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'runners' == $pathChunks[4]) {
                                    if ('GET /enterprises/{enterprise}/actions/runners' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('enterprise', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀Runners();
                                        }
                                        $operation = new Operation\EnterpriseAdmin\ListSelfHostedRunnersForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners::class], $params['enterprise'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListSelfHostedRunnersForEnterprise\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'downloads' == $pathChunks[5]) {
                                        if ('GET /enterprises/{enterprise}/actions/runners/downloads' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\Downloads::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\Downloads::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀Runners🌀Downloads();
                                            }
                                            $operation = new Operation\EnterpriseAdmin\ListRunnerApplicationsForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\Downloads::class], $params['enterprise']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RunnerApplication {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{runner_id}' == $pathChunks[5]) {
                                        if ('GET /enterprises/{enterprise}/actions/runners/{runner_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise', 'runner_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀Runners🌀CbRunnerIdRcb();
                                            }
                                            $operation = new Operation\EnterpriseAdmin\GetSelfHostedRunnerForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb::class], $params['enterprise'], $params['runner_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Runner {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'labels' == $pathChunks[6]) {
                                            if ('GET /enterprises/{enterprise}/actions/runners/{runner_id}/labels' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('enterprise', 'runner_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                }
                                                $operation = new Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $params['enterprise'], $params['runner_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'announcement' == $pathChunks[3]) {
                                if ('GET /enterprises/{enterprise}/announcement' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('enterprise')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Announcement::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Announcement::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Announcement();
                                    }
                                    $operation = new Operation\AnnouncementBanners\GetAnnouncementBannerForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Announcement::class], $params['enterprise']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AnnouncementBanner {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'audit-log' == $pathChunks[3]) {
                                if ('GET /enterprises/{enterprise}/audit-log' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('enterprise', 'phrase', 'include', 'after', 'before', 'order', 'page', 'per_page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\AuditLog::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\AuditLog::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀AuditLog();
                                    }
                                    $operation = new Operation\EnterpriseAdmin\GetAuditLog($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\AuditLog::class], $params['enterprise'], $params['phrase'], $params['include'], $params['after'], $params['before'], $params['order'], $params['page'], $params['per_page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AuditLogEvent {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'code-scanning' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'alerts' == $pathChunks[4]) {
                                    if ('GET /enterprises/{enterprise}/code-scanning/alerts' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('enterprise', 'tool_name', 'tool_guid', 'before', 'after', 'state', 'page', 'per_page', 'direction', 'sort')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\CodeScanning\Alerts::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\CodeScanning\Alerts::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀CodeScanning🌀Alerts();
                                        }
                                        $operation = new Operation\CodeScanning\ListAlertsForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\CodeScanning\Alerts::class], $params['enterprise'], $params['tool_name'], $params['tool_guid'], $params['before'], $params['after'], $params['state'], $params['page'], $params['per_page'], $params['direction'], $params['sort']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodeScanningOrganizationAlertItems|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'code_security_and_analysis' == $pathChunks[3]) {
                                if ('GET /enterprises/{enterprise}/code_security_and_analysis' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('enterprise')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\CodeSecurityAndAnalysis::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\CodeSecurityAndAnalysis::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀CodeSecurityAndAnalysis();
                                    }
                                    $operation = new Operation\SecretScanning\GetSecurityAnalysisSettingsForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\CodeSecurityAndAnalysis::class], $params['enterprise']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EnterpriseSecurityAnalysisSettings|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'consumed-licenses' == $pathChunks[3]) {
                                if ('GET /enterprises/{enterprise}/consumed-licenses' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('enterprise', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\ConsumedLicenses::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\ConsumedLicenses::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀ConsumedLicenses();
                                    }
                                    $operation = new Operation\EnterpriseAdmin\GetConsumedLicenses($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\ConsumedLicenses::class], $params['enterprise'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GetConsumedLicenses {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'dependabot' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'alerts' == $pathChunks[4]) {
                                    if ('GET /enterprises/{enterprise}/dependabot/alerts' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('enterprise', 'state', 'severity', 'ecosystem', 'package', 'scope', 'before', 'after', 'last', 'sort', 'direction', 'first', 'per_page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Dependabot\Alerts::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Dependabot\Alerts::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Dependabot🌀Alerts();
                                        }
                                        $operation = new Operation\Dependabot\ListAlertsForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Dependabot\Alerts::class], $params['enterprise'], $params['state'], $params['severity'], $params['ecosystem'], $params['package'], $params['scope'], $params['before'], $params['after'], $params['last'], $params['sort'], $params['direction'], $params['first'], $params['per_page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DependabotAlertWithRepository|Schema\BasicError|Schema\ValidationErrorSimple {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'license-sync-status' == $pathChunks[3]) {
                                if ('GET /enterprises/{enterprise}/license-sync-status' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('enterprise')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\LicenseSyncStatus::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\LicenseSyncStatus::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀LicenseSyncStatus();
                                    }
                                    $operation = new Operation\EnterpriseAdmin\GetLicenseSyncStatus($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\LicenseSyncStatus::class], $params['enterprise']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GetLicenseSyncStatus {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'secret-scanning' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'alerts' == $pathChunks[4]) {
                                    if ('GET /enterprises/{enterprise}/secret-scanning/alerts' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('enterprise', 'state', 'secret_type', 'resolution', 'before', 'after', 'sort', 'direction', 'per_page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\SecretScanning\Alerts::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\SecretScanning\Alerts::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀SecretScanning🌀Alerts();
                                        }
                                        $operation = new Operation\SecretScanning\ListAlertsForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\SecretScanning\Alerts::class], $params['enterprise'], $params['state'], $params['secret_type'], $params['resolution'], $params['before'], $params['after'], $params['sort'], $params['direction'], $params['per_page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationSecretScanningAlert|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'settings' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'billing' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'actions' == $pathChunks[5]) {
                                        if ('GET /enterprises/{enterprise}/settings/billing/actions' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Settings\Billing\Actions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Settings\Billing\Actions::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Settings🌀Billing🌀Actions();
                                            }
                                            $operation = new Operation\Billing\GetGithubActionsBillingGhe($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Settings\Billing\Actions::class], $params['enterprise']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsBillingUsage {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'advanced-security' == $pathChunks[5]) {
                                        if ('GET /enterprises/{enterprise}/settings/billing/advanced-security' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Settings\Billing\AdvancedSecurity::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Settings\Billing\AdvancedSecurity::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Settings🌀Billing🌀AdvancedSecurity();
                                            }
                                            $operation = new Operation\Billing\GetGithubAdvancedSecurityBillingGhe($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Settings\Billing\AdvancedSecurity::class], $params['enterprise'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AdvancedSecurityActiveCommitters|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'packages' == $pathChunks[5]) {
                                        if ('GET /enterprises/{enterprise}/settings/billing/packages' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Settings\Billing\Packages::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Settings\Billing\Packages::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Settings🌀Billing🌀Packages();
                                            }
                                            $operation = new Operation\Billing\GetGithubPackagesBillingGhe($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Settings\Billing\Packages::class], $params['enterprise']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PackagesBillingUsage {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'shared-storage' == $pathChunks[5]) {
                                        if ('GET /enterprises/{enterprise}/settings/billing/shared-storage' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Settings\Billing\SharedStorage::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Settings\Billing\SharedStorage::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Settings🌀Billing🌀SharedStorage();
                                            }
                                            $operation = new Operation\Billing\GetSharedStorageBillingGhe($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Settings\Billing\SharedStorage::class], $params['enterprise']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CombinedBillingUsage {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'events' == $pathChunks[1]) {
                        if ('GET /events' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array('per_page', 'page')) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\Events::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Events::class] = $this->hydrators->getObjectMapperOperation🌀Events();
                            }
                            $operation = new Operation\Activity\ListPublicEvents($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Events::class], $params['per_page'], $params['page']);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Event|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'feeds' == $pathChunks[1]) {
                        if ('GET /feeds' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array()) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\Feeds::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Feeds::class] = $this->hydrators->getObjectMapperOperation🌀Feeds();
                            }
                            $operation = new Operation\Activity\GetFeeds($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Feeds::class]);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Feed {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'gists' == $pathChunks[1]) {
                        if ('GET /gists' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array('since', 'per_page', 'page')) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\Gists::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Gists::class] = $this->hydrators->getObjectMapperOperation🌀Gists();
                            }
                            $operation = new Operation\Gists\List_($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists::class], $params['since'], $params['per_page'], $params['page']);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BaseGist|Schema\BasicError {
                                return $operation->createResponse($response);
                            });
                        } elseif (array_key_exists(2, $pathChunks) == true && 'public' == $pathChunks[2]) {
                            if ('GET /gists/public' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('since', 'per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Gists\Public_::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Gists\Public_::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀Public_();
                                }
                                $operation = new Operation\Gists\ListPublic($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\Public_::class], $params['since'], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BaseGist|Schema\ValidationError|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'starred' == $pathChunks[2]) {
                            if ('GET /gists/starred' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('since', 'per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Gists\Starred::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Gists\Starred::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀Starred();
                                }
                                $operation = new Operation\Gists\ListStarred($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\Starred::class], $params['since'], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BaseGist|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && '{gist_id}' == $pathChunks[2]) {
                            if ('GET /gists/{gist_id}' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('gist_id')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb();
                                }
                                $operation = new Operation\Gists\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb::class], $params['gist_id']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GistSimple|Schema\Operation\Gists\Get\Response\Applicationjson\H403|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && 'comments' == $pathChunks[3]) {
                                if ('GET /gists/{gist_id}/comments' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('gist_id', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Comments::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Comments();
                                    }
                                    $operation = new Operation\Gists\ListComments($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments::class], $params['gist_id'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GistComment|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{comment_id}' == $pathChunks[4]) {
                                    if ('GET /gists/{gist_id}/comments/{comment_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('gist_id', 'comment_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Comments🌀CbCommentIdRcb();
                                        }
                                        $operation = new Operation\Gists\GetComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class], $params['gist_id'], $params['comment_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GistComment|Schema\BasicError|Schema\Operation\Gists\Get\Response\Applicationjson\H403 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'commits' == $pathChunks[3]) {
                                if ('GET /gists/{gist_id}/commits' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('gist_id', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Commits::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Commits::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Commits();
                                    }
                                    $operation = new Operation\Gists\ListCommits($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Commits::class], $params['gist_id'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GistCommit|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'forks' == $pathChunks[3]) {
                                if ('GET /gists/{gist_id}/forks' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('gist_id', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Forks::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Forks::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Forks();
                                    }
                                    $operation = new Operation\Gists\ListForks($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Forks::class], $params['gist_id'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GistSimple|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'star' == $pathChunks[3]) {
                                if ('GET /gists/{gist_id}/star' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('gist_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Star::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Star::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Star();
                                    }
                                    $operation = new Operation\Gists\CheckIsStarred($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Star::class], $params['gist_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Gists\CheckIsStarred\Response\Applicationjson\H404|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && '{sha}' == $pathChunks[3]) {
                                if ('GET /gists/{gist_id}/{sha}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('gist_id', 'sha')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\CbShaRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\CbShaRcb::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀CbShaRcb();
                                    }
                                    $operation = new Operation\Gists\GetRevision($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\CbShaRcb::class], $params['gist_id'], $params['sha']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GistSimple|Schema\ValidationError|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'gitignore' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'templates' == $pathChunks[2]) {
                            if ('GET /gitignore/templates' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array()) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Gitignore\Templates::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Gitignore\Templates::class] = $this->hydrators->getObjectMapperOperation🌀Gitignore🌀Templates();
                                }
                                $operation = new Operation\Gitignore\GetAllTemplates($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gitignore\Templates::class]);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WebHookHeader\UserAgent {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && '{name}' == $pathChunks[3]) {
                                if ('GET /gitignore/templates/{name}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('name')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Gitignore\Templates\CbNameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gitignore\Templates\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Gitignore🌀Templates🌀CbNameRcb();
                                    }
                                    $operation = new Operation\Gitignore\GetTemplate($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gitignore\Templates\CbNameRcb::class], $params['name']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GitignoreTemplate {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'installation' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'repositories' == $pathChunks[2]) {
                            if ('GET /installation/repositories' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Installation\Repositories::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Installation\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Installation🌀Repositories();
                                }
                                $operation = new Operation\Apps\ListReposAccessibleToInstallation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Installation\Repositories::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Apps\ListReposAccessibleToInstallation\Response\Applicationjson\H200|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'issues' == $pathChunks[1]) {
                        if ('GET /issues' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array('labels', 'since', 'collab', 'orgs', 'owned', 'pulls', 'filter', 'state', 'sort', 'direction', 'per_page', 'page')) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\Issues::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Issues::class] = $this->hydrators->getObjectMapperOperation🌀Issues();
                            }
                            $operation = new Operation\Issues\List_($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Issues::class], $params['labels'], $params['since'], $params['collab'], $params['orgs'], $params['owned'], $params['pulls'], $params['filter'], $params['state'], $params['sort'], $params['direction'], $params['per_page'], $params['page']);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Issue|Schema\ValidationError|Schema\BasicError {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'licenses' == $pathChunks[1]) {
                        if ('GET /licenses' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array('featured', 'per_page', 'page')) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\Licenses::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Licenses::class] = $this->hydrators->getObjectMapperOperation🌀Licenses();
                            }
                            $operation = new Operation\Licenses\GetAllCommonlyUsed($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Licenses::class], $params['featured'], $params['per_page'], $params['page']);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\LicenseSimple {
                                return $operation->createResponse($response);
                            });
                        } elseif (array_key_exists(2, $pathChunks) == true && '{license}' == $pathChunks[2]) {
                            if ('GET /licenses/{license}' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('license')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Licenses\CbLicenseRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Licenses\CbLicenseRcb::class] = $this->hydrators->getObjectMapperOperation🌀Licenses🌀CbLicenseRcb();
                                }
                                $operation = new Operation\Licenses\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Licenses\CbLicenseRcb::class], $params['license']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\License|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'marketplace_listing' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'accounts' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{account_id}' == $pathChunks[3]) {
                                if ('GET /marketplace_listing/accounts/{account_id}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('account_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\MarketplaceListing\Accounts\CbAccountIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\MarketplaceListing\Accounts\CbAccountIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀MarketplaceListing🌀Accounts🌀CbAccountIdRcb();
                                    }
                                    $operation = new Operation\Apps\GetSubscriptionPlanForAccount($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\MarketplaceListing\Accounts\CbAccountIdRcb::class], $params['account_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MarketplacePurchase|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'plans' == $pathChunks[2]) {
                            if ('GET /marketplace_listing/plans' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\MarketplaceListing\Plans::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\MarketplaceListing\Plans::class] = $this->hydrators->getObjectMapperOperation🌀MarketplaceListing🌀Plans();
                                }
                                $operation = new Operation\Apps\ListPlans($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\MarketplaceListing\Plans::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MarketplaceListingPlan|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && '{plan_id}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'accounts' == $pathChunks[4]) {
                                    if ('GET /marketplace_listing/plans/{plan_id}/accounts' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('plan_id', 'direction', 'sort', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\MarketplaceListing\Plans\CbPlanIdRcb\Accounts::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\MarketplaceListing\Plans\CbPlanIdRcb\Accounts::class] = $this->hydrators->getObjectMapperOperation🌀MarketplaceListing🌀Plans🌀CbPlanIdRcb🌀Accounts();
                                        }
                                        $operation = new Operation\Apps\ListAccountsForPlan($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\MarketplaceListing\Plans\CbPlanIdRcb\Accounts::class], $params['plan_id'], $params['direction'], $params['sort'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MarketplacePurchase|Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'stubbed' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'accounts' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{account_id}' == $pathChunks[4]) {
                                    if ('GET /marketplace_listing/stubbed/accounts/{account_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('account_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\MarketplaceListing\Stubbed\Accounts\CbAccountIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\MarketplaceListing\Stubbed\Accounts\CbAccountIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀MarketplaceListing🌀Stubbed🌀Accounts🌀CbAccountIdRcb();
                                        }
                                        $operation = new Operation\Apps\GetSubscriptionPlanForAccountStubbed($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\MarketplaceListing\Stubbed\Accounts\CbAccountIdRcb::class], $params['account_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MarketplacePurchase|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'plans' == $pathChunks[3]) {
                                if ('GET /marketplace_listing/stubbed/plans' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\MarketplaceListing\Stubbed\Plans::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\MarketplaceListing\Stubbed\Plans::class] = $this->hydrators->getObjectMapperOperation🌀MarketplaceListing🌀Stubbed🌀Plans();
                                    }
                                    $operation = new Operation\Apps\ListPlansStubbed($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\MarketplaceListing\Stubbed\Plans::class], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MarketplaceListingPlan|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{plan_id}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'accounts' == $pathChunks[5]) {
                                        if ('GET /marketplace_listing/stubbed/plans/{plan_id}/accounts' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('plan_id', 'direction', 'sort', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\MarketplaceListing\Stubbed\Plans\CbPlanIdRcb\Accounts::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\MarketplaceListing\Stubbed\Plans\CbPlanIdRcb\Accounts::class] = $this->hydrators->getObjectMapperOperation🌀MarketplaceListing🌀Stubbed🌀Plans🌀CbPlanIdRcb🌀Accounts();
                                            }
                                            $operation = new Operation\Apps\ListAccountsForPlanStubbed($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\MarketplaceListing\Stubbed\Plans\CbPlanIdRcb\Accounts::class], $params['plan_id'], $params['direction'], $params['sort'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MarketplacePurchase|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'meta' == $pathChunks[1]) {
                        if ('GET /meta' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array()) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\Meta::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Meta::class] = $this->hydrators->getObjectMapperOperation🌀Meta();
                            }
                            $operation = new Operation\Meta\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Meta::class]);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ApiOverview {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'networks' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{owner}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{repo}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'events' == $pathChunks[4]) {
                                    if ('GET /networks/{owner}/{repo}/events' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Networks\CbOwnerRcb\CbRepoRcb\Events::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Networks\CbOwnerRcb\CbRepoRcb\Events::class] = $this->hydrators->getObjectMapperOperation🌀Networks🌀CbOwnerRcb🌀CbRepoRcb🌀Events();
                                        }
                                        $operation = new Operation\Activity\ListPublicEventsForRepoNetwork($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Networks\CbOwnerRcb\CbRepoRcb\Events::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Event|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'notifications' == $pathChunks[1]) {
                        if ('GET /notifications' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array('since', 'before', 'all', 'participating', 'page', 'per_page')) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\Notifications::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Notifications::class] = $this->hydrators->getObjectMapperOperation🌀Notifications();
                            }
                            $operation = new Operation\Activity\ListNotificationsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Notifications::class], $params['since'], $params['before'], $params['all'], $params['participating'], $params['page'], $params['per_page']);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Thread|Schema\BasicError|Schema\ValidationError {
                                return $operation->createResponse($response);
                            });
                        } elseif (array_key_exists(2, $pathChunks) == true && 'threads' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{thread_id}' == $pathChunks[3]) {
                                if ('GET /notifications/threads/{thread_id}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('thread_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Notifications\Threads\CbThreadIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Notifications🌀Threads🌀CbThreadIdRcb();
                                    }
                                    $operation = new Operation\Activity\GetThread($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb::class], $params['thread_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Thread|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && 'subscription' == $pathChunks[4]) {
                                    if ('GET /notifications/threads/{thread_id}/subscription' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('thread_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class] = $this->hydrators->getObjectMapperOperation🌀Notifications🌀Threads🌀CbThreadIdRcb🌀Subscription();
                                        }
                                        $operation = new Operation\Activity\GetThreadSubscriptionForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class], $params['thread_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ThreadSubscription|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'octocat' == $pathChunks[1]) {
                        if ('GET /octocat' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array('s')) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\Octocat::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Octocat::class] = $this->hydrators->getObjectMapperOperation🌀Octocat();
                            }
                            $operation = new Operation\Meta\GetOctocat($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Octocat::class], $params['s']);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WebHookHeader\UserAgent {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'organizations' == $pathChunks[1]) {
                        if ('GET /organizations' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array('since', 'per_page')) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\Organizations::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Organizations::class] = $this->hydrators->getObjectMapperOperation🌀Organizations();
                            }
                            $operation = new Operation\Orgs\List_($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Organizations::class], $params['since'], $params['per_page']);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationSimple {
                                return $operation->createResponse($response);
                            });
                        } elseif (array_key_exists(2, $pathChunks) == true && '{organization_id}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'custom_roles' == $pathChunks[3]) {
                                if ('GET /organizations/{organization_id}/custom_roles' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('organization_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Organizations\CbOrganizationIdRcb\CustomRoles::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Organizations\CbOrganizationIdRcb\CustomRoles::class] = $this->hydrators->getObjectMapperOperation🌀Organizations🌀CbOrganizationIdRcb🌀CustomRoles();
                                    }
                                    $operation = new Operation\Orgs\ListCustomRoles($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Organizations\CbOrganizationIdRcb\CustomRoles::class], $params['organization_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Orgs\ListCustomRoles\Response\Applicationjson\H200 {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'orgs' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{org}' == $pathChunks[2]) {
                            if ('GET /orgs/{org}' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('org')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb();
                                }
                                $operation = new Operation\Orgs\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb::class], $params['org']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationFull|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && 'actions' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'cache' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'usage' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/actions/cache/usage' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Cache\Usage::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Cache\Usage::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Cache🌀Usage();
                                            }
                                            $operation = new Operation\Actions\GetActionsCacheUsageForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Cache\Usage::class], $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsCacheUsageOrgEnterprise {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'usage-by-repository' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/actions/cache/usage-by-repository' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Cache\UsageByRepository::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Cache\UsageByRepository::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Cache🌀UsageByRepository();
                                            }
                                            $operation = new Operation\Actions\GetActionsCacheUsageByRepoForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Cache\UsageByRepository::class], $params['org'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\GetActionsCacheUsageByRepoForOrg\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'oidc' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'customization' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'sub' == $pathChunks[6]) {
                                            if ('GET /orgs/{org}/actions/oidc/customization/sub' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Oidc\Customization\Sub::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Oidc\Customization\Sub::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Oidc🌀Customization🌀Sub();
                                                }
                                                $operation = new Operation\Oidc\GetOidcCustomSubTemplateForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Oidc\Customization\Sub::class], $params['org']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OidcCustomSub {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'permissions' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/actions/permissions' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Permissions();
                                        }
                                        $operation = new Operation\Actions\GetGithubActionsPermissionsOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions::class], $params['org']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsOrganizationPermissions {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'repositories' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/actions/permissions/repositories' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\Repositories::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Permissions🌀Repositories();
                                            }
                                            $operation = new Operation\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\Repositories::class], $params['org'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'selected-actions' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/actions/permissions/selected-actions' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\SelectedActions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\SelectedActions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Permissions🌀SelectedActions();
                                            }
                                            $operation = new Operation\Actions\GetAllowedActionsOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\SelectedActions::class], $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SelectedActions {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'workflow' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/actions/permissions/workflow' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\Workflow::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\Workflow::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Permissions🌀Workflow();
                                            }
                                            $operation = new Operation\Actions\GetGithubActionsDefaultWorkflowPermissionsOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Permissions\Workflow::class], $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsGetDefaultWorkflowPermissions {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'required_workflows' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/actions/required_workflows' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀RequiredWorkflows();
                                        }
                                        $operation = new Operation\Actions\ListRequiredWorkflows($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows::class], $params['org'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListRequiredWorkflows\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{required_workflow_id}' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/actions/required_workflows/{required_workflow_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'required_workflow_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀RequiredWorkflows🌀CbRequiredWorkflowIdRcb();
                                            }
                                            $operation = new Operation\Actions\GetRequiredWorkflow($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb::class], $params['org'], $params['required_workflow_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RequiredWorkflow {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if ('GET /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'required_workflow_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb\Repositories::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀RequiredWorkflows🌀CbRequiredWorkflowIdRcb🌀Repositories();
                                                }
                                                $operation = new Operation\Actions\ListSelectedRepositoriesRequiredWorkflow($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb\Repositories::class], $params['org'], $params['required_workflow_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListSelectedRepositoriesEnabledGithubActionsOrganization\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'runner-groups' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/actions/runner-groups' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'visible_to_repository', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerGroups::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerGroups::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀RunnerGroups();
                                        }
                                        $operation = new Operation\Actions\ListSelfHostedRunnerGroupsForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerGroups::class], $params['org'], $params['visible_to_repository'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListSelfHostedRunnerGroupsForOrg\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{runner_group_id}' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/actions/runner-groups/{runner_group_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'runner_group_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀RunnerDashGroups🌀CbRunnerGroupIdRcb();
                                            }
                                            $operation = new Operation\Actions\GetSelfHostedRunnerGroupForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb::class], $params['org'], $params['runner_group_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RunnerGroupsOrg {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if ('GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'runner_group_id', 'page', 'per_page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb\Repositories::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀RunnerDashGroups🌀CbRunnerGroupIdRcb🌀Repositories();
                                                }
                                                $operation = new Operation\Actions\ListRepoAccessToSelfHostedRunnerGroupInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb\Repositories::class], $params['org'], $params['runner_group_id'], $params['page'], $params['per_page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListRepoAccessToSelfHostedRunnerGroupInOrg\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'runners' == $pathChunks[6]) {
                                            if ('GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'runner_group_id', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb\Runners::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb\Runners::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀RunnerDashGroups🌀CbRunnerGroupIdRcb🌀Runners();
                                                }
                                                $operation = new Operation\Actions\ListSelfHostedRunnersInGroupForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb\Runners::class], $params['org'], $params['runner_group_id'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListSelfHostedRunnersInGroupForEnterprise\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'runners' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/actions/runners' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners();
                                        }
                                        $operation = new Operation\Actions\ListSelfHostedRunnersForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners::class], $params['org'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListSelfHostedRunnersForOrg\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'downloads' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/actions/runners/downloads' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\Downloads::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\Downloads::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀Downloads();
                                            }
                                            $operation = new Operation\Actions\ListRunnerApplicationsForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\Downloads::class], $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RunnerApplication {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{runner_id}' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/actions/runners/{runner_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'runner_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀CbRunnerIdRcb();
                                            }
                                            $operation = new Operation\Actions\GetSelfHostedRunnerForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb::class], $params['org'], $params['runner_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Runner {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'labels' == $pathChunks[6]) {
                                            if ('GET /orgs/{org}/actions/runners/{runner_id}/labels' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'runner_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                }
                                                $operation = new Operation\Actions\ListLabelsForSelfHostedRunnerForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $params['org'], $params['runner_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'secrets' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/actions/secrets' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Secrets();
                                        }
                                        $operation = new Operation\Actions\ListOrgSecrets($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets::class], $params['org'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListOrgSecrets\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'public-key' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/actions/secrets/public-key' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\PublicKey::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\PublicKey::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Secrets🌀PublicKey();
                                            }
                                            $operation = new Operation\Actions\GetOrgPublicKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\PublicKey::class], $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsPublicKey {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{secret_name}' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/actions/secrets/{secret_name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'secret_name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Secrets🌀CbSecretNameRcb();
                                            }
                                            $operation = new Operation\Actions\GetOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb::class], $params['org'], $params['secret_name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationActionsSecret {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if ('GET /orgs/{org}/actions/secrets/{secret_name}/repositories' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'secret_name', 'page', 'per_page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb\Repositories::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Secrets🌀CbSecretNameRcb🌀Repositories();
                                                }
                                                $operation = new Operation\Actions\ListSelectedReposForOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb\Repositories::class], $params['org'], $params['secret_name'], $params['page'], $params['per_page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'variables' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/actions/variables' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Variables();
                                        }
                                        $operation = new Operation\Actions\ListOrgVariables($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables::class], $params['org'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListOrgVariables\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{name}' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/actions/variables/{name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables\CbNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Variables🌀CbNameRcb();
                                            }
                                            $operation = new Operation\Actions\GetOrgVariable($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables\CbNameRcb::class], $params['org'], $params['name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationActionsVariable {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if ('GET /orgs/{org}/actions/variables/{name}/repositories' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'name', 'page', 'per_page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables\CbNameRcb\Repositories::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables\CbNameRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Variables🌀CbNameRcb🌀Repositories();
                                                }
                                                $operation = new Operation\Actions\ListSelectedReposForOrgVariable($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables\CbNameRcb\Repositories::class], $params['org'], $params['name'], $params['page'], $params['per_page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'announcement' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/announcement' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Announcement::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Announcement::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Announcement();
                                    }
                                    $operation = new Operation\AnnouncementBanners\GetAnnouncementBannerForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Announcement::class], $params['org']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AnnouncementBanner {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'audit-log' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/audit-log' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'phrase', 'include', 'after', 'before', 'order', 'per_page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\AuditLog::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\AuditLog::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀AuditLog();
                                    }
                                    $operation = new Operation\Orgs\GetAuditLog($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\AuditLog::class], $params['org'], $params['phrase'], $params['include'], $params['after'], $params['before'], $params['order'], $params['per_page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AuditLogEvent {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'blocks' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/blocks' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Blocks::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Blocks::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Blocks();
                                    }
                                    $operation = new Operation\Orgs\ListBlockedUsers($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Blocks::class], $params['org'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/blocks/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Blocks\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Blocks\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Blocks🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\CheckBlockedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Blocks\CbUsernameRcb::class], $params['org'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'code-scanning' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'alerts' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/code-scanning/alerts' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'tool_name', 'tool_guid', 'before', 'after', 'state', 'severity', 'page', 'per_page', 'direction', 'sort')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\CodeScanning\Alerts::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\CodeScanning\Alerts::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀CodeScanning🌀Alerts();
                                        }
                                        $operation = new Operation\CodeScanning\ListAlertsForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\CodeScanning\Alerts::class], $params['org'], $params['tool_name'], $params['tool_guid'], $params['before'], $params['after'], $params['state'], $params['severity'], $params['page'], $params['per_page'], $params['direction'], $params['sort']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodeScanningOrganizationAlertItems|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'codespaces' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/codespaces' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces();
                                    }
                                    $operation = new Operation\Codespaces\ListInOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces::class], $params['org'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Codespaces\ListInOrganization\Response\Applicationjson\H200|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && 'secrets' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/codespaces/secrets' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets();
                                        }
                                        $operation = new Operation\Codespaces\ListOrgSecrets($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets::class], $params['org'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Codespaces\ListOrgSecrets\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'public-key' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/codespaces/secrets/public-key' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\PublicKey::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\PublicKey::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets🌀PublicKey();
                                            }
                                            $operation = new Operation\Codespaces\GetOrgPublicKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\PublicKey::class], $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodespacesPublicKey {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{secret_name}' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/codespaces/secrets/{secret_name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'secret_name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb();
                                            }
                                            $operation = new Operation\Codespaces\GetOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class], $params['org'], $params['secret_name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodespacesOrgSecret {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if ('GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'secret_name', 'page', 'per_page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb🌀Repositories();
                                                }
                                                $operation = new Operation\Codespaces\ListSelectedReposForOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories::class], $params['org'], $params['secret_name'], $params['page'], $params['per_page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'credential-authorizations' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/credential-authorizations' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'page', 'login', 'per_page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\CredentialAuthorizations::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\CredentialAuthorizations::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀CredentialAuthorizations();
                                    }
                                    $operation = new Operation\Orgs\ListSamlSsoAuthorizations($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\CredentialAuthorizations::class], $params['org'], $params['page'], $params['login'], $params['per_page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CredentialAuthorization {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'custom_roles' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{role_id}' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/custom_roles/{role_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'role_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\CustomRoles\CbRoleIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\CustomRoles\CbRoleIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀CustomRoles🌀CbRoleIdRcb();
                                        }
                                        $operation = new Operation\Orgs\GetCustomRole($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\CustomRoles\CbRoleIdRcb::class], $params['org'], $params['role_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationCustomRepositoryRole|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'dependabot' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'alerts' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/dependabot/alerts' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'state', 'severity', 'ecosystem', 'package', 'scope', 'before', 'after', 'last', 'sort', 'direction', 'first', 'per_page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Alerts::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Alerts::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Dependabot🌀Alerts();
                                        }
                                        $operation = new Operation\Dependabot\ListAlertsForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Alerts::class], $params['org'], $params['state'], $params['severity'], $params['ecosystem'], $params['package'], $params['scope'], $params['before'], $params['after'], $params['last'], $params['sort'], $params['direction'], $params['first'], $params['per_page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DependabotAlertWithRepository|Schema\BasicError|Schema\ScimError|Schema\ValidationErrorSimple {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'secrets' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/dependabot/secrets' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Dependabot🌀Secrets();
                                        }
                                        $operation = new Operation\Dependabot\ListOrgSecrets($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets::class], $params['org'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Dependabot\ListOrgSecrets\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'public-key' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/dependabot/secrets/public-key' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\PublicKey::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\PublicKey::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Dependabot🌀Secrets🌀PublicKey();
                                            }
                                            $operation = new Operation\Dependabot\GetOrgPublicKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\PublicKey::class], $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DependabotPublicKey {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{secret_name}' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/dependabot/secrets/{secret_name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'secret_name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Dependabot🌀Secrets🌀CbSecretNameRcb();
                                            }
                                            $operation = new Operation\Dependabot\GetOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb::class], $params['org'], $params['secret_name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationDependabotSecret {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if ('GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'secret_name', 'page', 'per_page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb\Repositories::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Dependabot🌀Secrets🌀CbSecretNameRcb🌀Repositories();
                                                }
                                                $operation = new Operation\Dependabot\ListSelectedReposForOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb\Repositories::class], $params['org'], $params['secret_name'], $params['page'], $params['per_page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'events' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/events' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Events::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Events::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Events();
                                    }
                                    $operation = new Operation\Activity\ListPublicOrgEvents($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Events::class], $params['org'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Event {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'external-group' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{group_id}' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/external-group/{group_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'group_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\ExternalDashGroup\CbGroupIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\ExternalDashGroup\CbGroupIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀ExternalDashGroup🌀CbGroupIdRcb();
                                        }
                                        $operation = new Operation\Teams\ExternalIdpGroupInfoForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\ExternalDashGroup\CbGroupIdRcb::class], $params['org'], $params['group_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ExternalGroup {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'external-groups' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/external-groups' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'page', 'display_name', 'per_page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\ExternalGroups::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\ExternalGroups::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀ExternalGroups();
                                    }
                                    $operation = new Operation\Teams\ListExternalIdpGroupsForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\ExternalGroups::class], $params['org'], $params['page'], $params['display_name'], $params['per_page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ExternalGroups {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'failed_invitations' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/failed_invitations' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\FailedInvitations::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\FailedInvitations::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀FailedInvitations();
                                    }
                                    $operation = new Operation\Orgs\ListFailedInvitations($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\FailedInvitations::class], $params['org'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationInvitation|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'fine_grained_permissions' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/fine_grained_permissions' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\FineGrainedPermissions::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\FineGrainedPermissions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀FineGrainedPermissions();
                                    }
                                    $operation = new Operation\Orgs\ListFineGrainedPermissions($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\FineGrainedPermissions::class], $params['org']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RepositoryFineGrainedPermission {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'hooks' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/hooks' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks();
                                    }
                                    $operation = new Operation\Orgs\ListWebhooks($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks::class], $params['org'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrgHook|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{hook_id}' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/hooks/{hook_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'hook_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb();
                                        }
                                        $operation = new Operation\Orgs\GetWebhook($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class], $params['org'], $params['hook_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrgHook|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'config' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/hooks/{hook_id}/config' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'hook_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Config::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Config::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb🌀Config();
                                            }
                                            $operation = new Operation\Orgs\GetWebhookConfigForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Config::class], $params['org'], $params['hook_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WebhookConfig {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'deliveries' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/hooks/{hook_id}/deliveries' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'hook_id', 'cursor', 'redelivery', 'per_page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb🌀Deliveries();
                                            }
                                            $operation = new Operation\Orgs\ListWebhookDeliveries($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries::class], $params['org'], $params['hook_id'], $params['cursor'], $params['redelivery'], $params['per_page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\HookDeliveryItem|Schema\BasicError|Schema\ScimError|Schema\ValidationError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{delivery_id}' == $pathChunks[6]) {
                                            if ('GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'hook_id', 'delivery_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb🌀Deliveries🌀CbDeliveryIdRcb();
                                                }
                                                $operation = new Operation\Orgs\GetWebhookDelivery($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb::class], $params['org'], $params['hook_id'], $params['delivery_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\HookDelivery|Schema\BasicError|Schema\ScimError|Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'installation' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/installation' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Installation::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Installation::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Installation();
                                    }
                                    $operation = new Operation\Apps\GetOrgInstallation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Installation::class], $params['org']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Installation {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'installations' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/installations' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Installations::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Installations::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Installations();
                                    }
                                    $operation = new Operation\Orgs\ListAppInstallations($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Installations::class], $params['org'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Orgs\ListAppInstallations\Response\Applicationjson\H200 {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'interaction-limits' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/interaction-limits' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\InteractionLimits::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\InteractionLimits::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀InteractionLimits();
                                    }
                                    $operation = new Operation\Interactions\GetRestrictionsForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\InteractionLimits::class], $params['org']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Interactions\GetRestrictionsForOrg\Response\Applicationjson\H200 {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'invitations' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/invitations' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'per_page', 'page', 'role', 'invitation_source')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Invitations::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Invitations::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Invitations();
                                    }
                                    $operation = new Operation\Orgs\ListPendingInvitations($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Invitations::class], $params['org'], $params['per_page'], $params['page'], $params['role'], $params['invitation_source']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationInvitation|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{invitation_id}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'teams' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/invitations/{invitation_id}/teams' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'invitation_id', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Invitations\CbInvitationIdRcb\Teams::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Invitations\CbInvitationIdRcb\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Invitations🌀CbInvitationIdRcb🌀Teams();
                                            }
                                            $operation = new Operation\Orgs\ListInvitationTeams($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Invitations\CbInvitationIdRcb\Teams::class], $params['org'], $params['invitation_id'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Team|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'issues' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/issues' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'labels', 'since', 'filter', 'state', 'sort', 'direction', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Issues::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Issues::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Issues();
                                    }
                                    $operation = new Operation\Issues\ListForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Issues::class], $params['org'], $params['labels'], $params['since'], $params['filter'], $params['state'], $params['sort'], $params['direction'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Issue|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'members' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/members' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'filter', 'role', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Members::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Members();
                                    }
                                    $operation = new Operation\Orgs\ListMembers($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members::class], $params['org'], $params['filter'], $params['role'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser|Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/members/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Orgs\CheckMembershipForUser($params['org'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'codespaces' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/members/{username}/codespaces' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'username', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Members🌀CbUsernameRcb🌀Codespaces();
                                            }
                                            $operation = new Operation\Codespaces\GetCodespacesForUserInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces::class], $params['org'], $params['username'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Codespaces\ListInOrganization\Response\Applicationjson\H200|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'memberships' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/memberships/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Memberships🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\GetMembershipForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class], $params['org'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrgMembership|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'migrations' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/migrations' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'exclude', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Migrations::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Migrations();
                                    }
                                    $operation = new Operation\Migrations\ListForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations::class], $params['org'], $params['exclude'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Migration {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{migration_id}' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/migrations/{migration_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'migration_id', 'exclude')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Migrations🌀CbMigrationIdRcb();
                                        }
                                        $operation = new Operation\Migrations\GetStatusForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb::class], $params['org'], $params['migration_id'], $params['exclude']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Migration|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'archive' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/migrations/{migration_id}/archive' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'migration_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Archive::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Archive::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Migrations🌀CbMigrationIdRcb🌀Archive();
                                            }
                                            $operation = new Operation\Migrations\DownloadArchiveForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Archive::class], $params['org'], $params['migration_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'repositories' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/migrations/{migration_id}/repositories' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'migration_id', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Repositories::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Migrations🌀CbMigrationIdRcb🌀Repositories();
                                            }
                                            $operation = new Operation\Migrations\ListReposForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Repositories::class], $params['org'], $params['migration_id'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MinimalRepository|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'outside_collaborators' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/outside_collaborators' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'filter', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀OutsideCollaborators();
                                    }
                                    $operation = new Operation\Orgs\ListOutsideCollaborators($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators::class], $params['org'], $params['filter'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'packages' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/packages' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('package_type', 'org', 'visibility', 'page', 'per_page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Packages::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Packages();
                                    }
                                    $operation = new Operation\Packages\ListPackagesForOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages::class], $params['package_type'], $params['org'], $params['visibility'], $params['page'], $params['per_page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Package|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{package_type}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{package_name}' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/packages/{package_type}/{package_name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('package_type', 'package_name', 'org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb();
                                            }
                                            $operation = new Operation\Packages\GetPackageForOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class], $params['package_type'], $params['package_name'], $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Package {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'versions' == $pathChunks[6]) {
                                            if ('GET /orgs/{org}/packages/{package_type}/{package_name}/versions' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('package_type', 'package_name', 'org', 'page', 'per_page', 'state')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions();
                                                }
                                                $operation = new Operation\Packages\GetAllPackageVersionsForPackageOwnedByOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class], $params['package_type'], $params['package_name'], $params['org'], $params['page'], $params['per_page'], $params['state']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PackageVersion|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{package_version_id}' == $pathChunks[7]) {
                                                if ('GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('package_type', 'package_name', 'org', 'package_version_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb();
                                                    }
                                                    $operation = new Operation\Packages\GetPackageVersionForOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class], $params['package_type'], $params['package_name'], $params['org'], $params['package_version_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PackageVersion {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'projects' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/projects' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'state', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Projects::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Projects::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Projects();
                                    }
                                    $operation = new Operation\Projects\ListForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Projects::class], $params['org'], $params['state'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Project|Schema\ValidationErrorSimple {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'public_members' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/public_members' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\PublicMembers::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\PublicMembers::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀PublicMembers();
                                    }
                                    $operation = new Operation\Orgs\ListPublicMembers($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\PublicMembers::class], $params['org'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/public_members/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Orgs\CheckPublicMembershipForUser($params['org'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'repos' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/repos' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'type', 'direction', 'sort', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Repos::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Repos::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Repos();
                                    }
                                    $operation = new Operation\Repos\ListForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Repos::class], $params['org'], $params['type'], $params['direction'], $params['sort'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MinimalRepository {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'secret-scanning' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'alerts' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/secret-scanning/alerts' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'state', 'secret_type', 'resolution', 'before', 'after', 'sort', 'direction', 'page', 'per_page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\SecretScanning\Alerts::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\SecretScanning\Alerts::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀SecretScanning🌀Alerts();
                                        }
                                        $operation = new Operation\SecretScanning\ListAlertsForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\SecretScanning\Alerts::class], $params['org'], $params['state'], $params['secret_type'], $params['resolution'], $params['before'], $params['after'], $params['sort'], $params['direction'], $params['page'], $params['per_page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationSecretScanningAlert|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'security-managers' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/security-managers' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\SecurityManagers::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\SecurityManagers::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀SecurityManagers();
                                    }
                                    $operation = new Operation\Orgs\ListSecurityManagerTeams($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\SecurityManagers::class], $params['org']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamSimple {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'settings' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'billing' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'actions' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/settings/billing/actions' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\Actions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\Actions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Settings🌀Billing🌀Actions();
                                            }
                                            $operation = new Operation\Billing\GetGithubActionsBillingOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\Actions::class], $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsBillingUsage {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'advanced-security' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/settings/billing/advanced-security' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\AdvancedSecurity::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\AdvancedSecurity::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Settings🌀Billing🌀AdvancedSecurity();
                                            }
                                            $operation = new Operation\Billing\GetGithubAdvancedSecurityBillingOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\AdvancedSecurity::class], $params['org'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AdvancedSecurityActiveCommitters|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'packages' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/settings/billing/packages' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\Packages::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\Packages::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Settings🌀Billing🌀Packages();
                                            }
                                            $operation = new Operation\Billing\GetGithubPackagesBillingOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\Packages::class], $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PackagesBillingUsage {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'shared-storage' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/settings/billing/shared-storage' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\SharedStorage::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\SharedStorage::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Settings🌀Billing🌀SharedStorage();
                                            }
                                            $operation = new Operation\Billing\GetSharedStorageBillingOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Settings\Billing\SharedStorage::class], $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CombinedBillingUsage {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'team-sync' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'groups' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/team-sync/groups' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'page', 'q', 'per_page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\TeamSync\Groups::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\TeamSync\Groups::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀TeamSync🌀Groups();
                                        }
                                        $operation = new Operation\Teams\ListIdpGroupsForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\TeamSync\Groups::class], $params['org'], $params['page'], $params['q'], $params['per_page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GroupMapping {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'teams' == $pathChunks[3]) {
                                if ('GET /orgs/{org}/teams' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams();
                                    }
                                    $operation = new Operation\Teams\List_($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams::class], $params['org'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Team|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{team_slug}' == $pathChunks[4]) {
                                    if ('GET /orgs/{org}/teams/{team_slug}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'team_slug')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb();
                                        }
                                        $operation = new Operation\Teams\GetByName($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb::class], $params['org'], $params['team_slug']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamFull|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'discussions' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/teams/{team_slug}/discussions' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'team_slug', 'pinned', 'direction', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions();
                                            }
                                            $operation = new Operation\Teams\ListDiscussionsInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions::class], $params['org'], $params['team_slug'], $params['pinned'], $params['direction'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamDiscussion {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{discussion_number}' == $pathChunks[6]) {
                                            if ('GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'team_slug', 'discussion_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb();
                                                }
                                                $operation = new Operation\Teams\GetDiscussionInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb::class], $params['org'], $params['team_slug'], $params['discussion_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamDiscussion {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'comments' == $pathChunks[7]) {
                                                if ('GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'team_slug', 'discussion_number', 'direction', 'per_page', 'page')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments();
                                                    }
                                                    $operation = new Operation\Teams\ListDiscussionCommentsInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments::class], $params['org'], $params['team_slug'], $params['discussion_number'], $params['direction'], $params['per_page'], $params['page']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamDiscussionComment {
                                                        return $operation->createResponse($response);
                                                    });
                                                } elseif (array_key_exists(8, $pathChunks) == true && '{comment_number}' == $pathChunks[8]) {
                                                    if ('GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('org', 'team_slug', 'discussion_number', 'comment_number')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments🌀CbCommentNumberRcb();
                                                        }
                                                        $operation = new Operation\Teams\GetDiscussionCommentInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class], $params['org'], $params['team_slug'], $params['discussion_number'], $params['comment_number']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamDiscussionComment {
                                                            return $operation->createResponse($response);
                                                        });
                                                    } elseif (array_key_exists(9, $pathChunks) == true && 'reactions' == $pathChunks[9]) {
                                                        if ('GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions' == $call) {
                                                            $requestBodyData = array();
                                                            foreach (\array_keys($params) as $param) {
                                                                if (\in_array($param, array('org', 'team_slug', 'discussion_number', 'comment_number', 'content', 'per_page', 'page')) != false) {
                                                                    \array_push($requestBodyData, $param);
                                                                }
                                                            }
                                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments🌀CbCommentNumberRcb🌀Reactions();
                                                            }
                                                            $operation = new Operation\Reactions\ListForTeamDiscussionCommentInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class], $params['org'], $params['team_slug'], $params['discussion_number'], $params['comment_number'], $params['content'], $params['per_page'], $params['page']);
                                                            $request = $operation->createRequest($requestBodyData);
                                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction {
                                                                return $operation->createResponse($response);
                                                            });
                                                        }
                                                    }
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'reactions' == $pathChunks[7]) {
                                                if ('GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'team_slug', 'discussion_number', 'content', 'per_page', 'page')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Reactions();
                                                    }
                                                    $operation = new Operation\Reactions\ListForTeamDiscussionInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Reactions::class], $params['org'], $params['team_slug'], $params['discussion_number'], $params['content'], $params['per_page'], $params['page']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'external-groups' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/teams/{team_slug}/external-groups' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'team_slug')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\ExternalDashGroups::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\ExternalDashGroups::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀ExternalDashGroups();
                                            }
                                            $operation = new Operation\Teams\ListLinkedExternalIdpGroupsToTeamForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\ExternalDashGroups::class], $params['org'], $params['team_slug']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ExternalGroups {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'invitations' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/teams/{team_slug}/invitations' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'team_slug', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Invitations::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Invitations::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Invitations();
                                            }
                                            $operation = new Operation\Teams\ListPendingInvitationsInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Invitations::class], $params['org'], $params['team_slug'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationInvitation {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'members' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/teams/{team_slug}/members' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'team_slug', 'role', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Members::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Members::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Members();
                                            }
                                            $operation = new Operation\Teams\ListMembersInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Members::class], $params['org'], $params['team_slug'], $params['role'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'memberships' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{username}' == $pathChunks[6]) {
                                            if ('GET /orgs/{org}/teams/{team_slug}/memberships/{username}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'team_slug', 'username')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Memberships\CbUsernameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Memberships\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Memberships🌀CbUsernameRcb();
                                                }
                                                $operation = new Operation\Teams\GetMembershipForUserInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Memberships\CbUsernameRcb::class], $params['org'], $params['team_slug'], $params['username']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamMembership {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'projects' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/teams/{team_slug}/projects' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'team_slug', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Projects();
                                            }
                                            $operation = new Operation\Teams\ListProjectsInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects::class], $params['org'], $params['team_slug'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamProject {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{project_id}' == $pathChunks[6]) {
                                            if ('GET /orgs/{org}/teams/{team_slug}/projects/{project_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'team_slug', 'project_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects\CbProjectIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects\CbProjectIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Projects🌀CbProjectIdRcb();
                                                }
                                                $operation = new Operation\Teams\CheckPermissionsForProjectInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects\CbProjectIdRcb::class], $params['org'], $params['team_slug'], $params['project_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamProject {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'repos' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/teams/{team_slug}/repos' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'team_slug', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Repos::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Repos::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Repos();
                                            }
                                            $operation = new Operation\Teams\ListReposInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Repos::class], $params['org'], $params['team_slug'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MinimalRepository {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{owner}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{repo}' == $pathChunks[7]) {
                                                if ('GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'team_slug', 'owner', 'repo')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Repos\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Repos\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Repos🌀CbOwnerRcb🌀CbRepoRcb();
                                                    }
                                                    $operation = new Operation\Teams\CheckPermissionsForRepoInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Repos\CbOwnerRcb\CbRepoRcb::class], $params['org'], $params['team_slug'], $params['owner'], $params['repo']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamRepository {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'team-sync' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'group-mappings' == $pathChunks[6]) {
                                            if ('GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'team_slug')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\TeamDashSync\GroupDashMappings::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\TeamDashSync\GroupDashMappings::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀TeamDashSync🌀GroupDashMappings();
                                                }
                                                $operation = new Operation\Teams\ListIdpGroupsInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\TeamDashSync\GroupDashMappings::class], $params['org'], $params['team_slug']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GroupMapping {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'teams' == $pathChunks[5]) {
                                        if ('GET /orgs/{org}/teams/{team_slug}/teams' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'team_slug', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Teams::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Teams();
                                            }
                                            $operation = new Operation\Teams\ListChildInOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Teams::class], $params['org'], $params['team_slug'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Team {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'projects' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'columns' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'cards' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{card_id}' == $pathChunks[4]) {
                                    if ('GET /projects/columns/cards/{card_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('card_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀Cards🌀CbCardIdRcb();
                                        }
                                        $operation = new Operation\Projects\GetCard($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class], $params['card_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ProjectCard|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && '{column_id}' == $pathChunks[3]) {
                                if ('GET /projects/columns/{column_id}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('column_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀CbColumnIdRcb();
                                    }
                                    $operation = new Operation\Projects\GetColumn($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class], $params['column_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ProjectColumn|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && 'cards' == $pathChunks[4]) {
                                    if ('GET /projects/columns/{column_id}/cards' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('column_id', 'archived_state', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Cards::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Cards::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀CbColumnIdRcb🌀Cards();
                                        }
                                        $operation = new Operation\Projects\ListCards($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Cards::class], $params['column_id'], $params['archived_state'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ProjectCard|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && '{project_id}' == $pathChunks[2]) {
                            if ('GET /projects/{project_id}' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('project_id')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb();
                                }
                                $operation = new Operation\Projects\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb::class], $params['project_id']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Project|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && 'collaborators' == $pathChunks[3]) {
                                if ('GET /projects/{project_id}/collaborators' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('project_id', 'affiliation', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb🌀Collaborators();
                                    }
                                    $operation = new Operation\Projects\ListCollaborators($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators::class], $params['project_id'], $params['affiliation'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser|Schema\BasicError|Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'permission' == $pathChunks[5]) {
                                        if ('GET /projects/{project_id}/collaborators/{username}/permission' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('project_id', 'username')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb\Permission::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb\Permission::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb🌀Collaborators🌀CbUsernameRcb🌀Permission();
                                            }
                                            $operation = new Operation\Projects\GetPermissionForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb\Permission::class], $params['project_id'], $params['username']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ProjectCollaboratorPermission|Schema\BasicError|Schema\ValidationError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'columns' == $pathChunks[3]) {
                                if ('GET /projects/{project_id}/columns' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('project_id', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb\Columns::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Columns::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb🌀Columns();
                                    }
                                    $operation = new Operation\Projects\ListColumns($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Columns::class], $params['project_id'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ProjectColumn|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'rate_limit' == $pathChunks[1]) {
                        if ('GET /rate_limit' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array()) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\RateLimit::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\RateLimit::class] = $this->hydrators->getObjectMapperOperation🌀RateLimit();
                            }
                            $operation = new Operation\RateLimit\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\RateLimit::class]);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RateLimitOverview|Schema\BasicError {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'repos' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{org}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{repo}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'actions' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'required_workflows' == $pathChunks[5]) {
                                        if ('GET /repos/{org}/{repo}/actions/required_workflows' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'repo', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOrgRcb🌀CbRepoRcb🌀Actions🌀RequiredWorkflows();
                                            }
                                            $operation = new Operation\Actions\ListRepoRequiredWorkflows($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows::class], $params['org'], $params['repo'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListRepoRequiredWorkflows\Response\Applicationjson\H200|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{required_workflow_id_for_repo}' == $pathChunks[6]) {
                                            if ('GET /repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'repo', 'required_workflow_id_for_repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOrgRcb🌀CbRepoRcb🌀Actions🌀RequiredWorkflows🌀CbRequiredWorkflowIdForRepoRcb();
                                                }
                                                $operation = new Operation\Actions\GetRepoRequiredWorkflow($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb::class], $params['org'], $params['repo'], $params['required_workflow_id_for_repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RepoRequiredWorkflow|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'timing' == $pathChunks[7]) {
                                                if ('GET /repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'repo', 'required_workflow_id_for_repo')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb\Timing::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb\Timing::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOrgRcb🌀CbRepoRcb🌀Actions🌀RequiredWorkflows🌀CbRequiredWorkflowIdForRepoRcb🌀Timing();
                                                    }
                                                    $operation = new Operation\Actions\GetRepoRequiredWorkflowUsage($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOrgRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb\Timing::class], $params['org'], $params['repo'], $params['required_workflow_id_for_repo']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WorkflowUsage|Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && '{owner}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{repo}' == $pathChunks[3]) {
                                if ('GET /repos/{owner}/{repo}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('owner', 'repo')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb();
                                    }
                                    $operation = new Operation\Repos\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class], $params['owner'], $params['repo']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\FullRepository|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && 'actions' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'artifacts' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/actions/artifacts' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'name', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Artifacts();
                                            }
                                            $operation = new Operation\Actions\ListArtifactsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts::class], $params['owner'], $params['repo'], $params['name'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListArtifactsForRepo\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{artifact_id}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'artifact_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts\CbArtifactIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts\CbArtifactIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Artifacts🌀CbArtifactIdRcb();
                                                }
                                                $operation = new Operation\Actions\GetArtifact($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts\CbArtifactIdRcb::class], $params['owner'], $params['repo'], $params['artifact_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Artifact {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{archive_format}' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'artifact_id', 'archive_format')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts\CbArtifactIdRcb\CbArchiveFormatRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts\CbArtifactIdRcb\CbArchiveFormatRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Artifacts🌀CbArtifactIdRcb🌀CbArchiveFormatRcb();
                                                    }
                                                    $operation = new Operation\Actions\DownloadArtifact($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Artifacts\CbArtifactIdRcb\CbArchiveFormatRcb::class], $params['owner'], $params['repo'], $params['artifact_id'], $params['archive_format']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'cache' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'usage' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/actions/cache/usage' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Cache\Usage::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Cache\Usage::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Cache🌀Usage();
                                                }
                                                $operation = new Operation\Actions\GetActionsCacheUsage($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Cache\Usage::class], $params['owner'], $params['repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsCacheUsageByRepository {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'caches' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/actions/caches' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'ref', 'key', 'per_page', 'page', 'sort', 'direction')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Caches::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Caches::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Caches();
                                            }
                                            $operation = new Operation\Actions\GetActionsCacheList($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Caches::class], $params['owner'], $params['repo'], $params['ref'], $params['key'], $params['per_page'], $params['page'], $params['sort'], $params['direction']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsCacheList {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'jobs' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{job_id}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/actions/jobs/{job_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'job_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Jobs\CbJobIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Jobs\CbJobIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Jobs🌀CbJobIdRcb();
                                                }
                                                $operation = new Operation\Actions\GetJobForWorkflowRun($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Jobs\CbJobIdRcb::class], $params['owner'], $params['repo'], $params['job_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Job {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'logs' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'job_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Actions\DownloadJobLogsForWorkflowRun($params['owner'], $params['repo'], $params['job_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'oidc' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'customization' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'sub' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/actions/oidc/customization/sub' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Oidc\Customization\Sub::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Oidc\Customization\Sub::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Oidc🌀Customization🌀Sub();
                                                    }
                                                    $operation = new Operation\Actions\GetCustomOidcSubClaimForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Oidc\Customization\Sub::class], $params['owner'], $params['repo']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OidcCustomSubRepo|Schema\BasicError|Schema\ScimError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'permissions' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/actions/permissions' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Permissions();
                                            }
                                            $operation = new Operation\Actions\GetGithubActionsPermissionsRepository($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsRepositoryPermissions {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'access' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/actions/permissions/access' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\Access::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\Access::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Permissions🌀Access();
                                                }
                                                $operation = new Operation\Actions\GetWorkflowAccessToRepository($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\Access::class], $params['owner'], $params['repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsWorkflowAccessToRepository {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'selected-actions' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/actions/permissions/selected-actions' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\SelectedActions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\SelectedActions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Permissions🌀SelectedActions();
                                                }
                                                $operation = new Operation\Actions\GetAllowedActionsRepository($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\SelectedActions::class], $params['owner'], $params['repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SelectedActions {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'workflow' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/actions/permissions/workflow' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\Workflow::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\Workflow::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Permissions🌀Workflow();
                                                }
                                                $operation = new Operation\Actions\GetGithubActionsDefaultWorkflowPermissionsRepository($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Permissions\Workflow::class], $params['owner'], $params['repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsGetDefaultWorkflowPermissions {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'required_workflows' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{required_workflow_id_for_repo}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'runs' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'required_workflow_id_for_repo', 'actor', 'branch', 'event', 'status', 'created', 'check_suite_id', 'head_sha', 'per_page', 'page', 'exclude_pull_requests')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb\Runs::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb\Runs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀RequiredWorkflows🌀CbRequiredWorkflowIdForRepoRcb🌀Runs();
                                                    }
                                                    $operation = new Operation\Actions\ListRequiredWorkflowRuns($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdForRepoRcb\Runs::class], $params['owner'], $params['repo'], $params['required_workflow_id_for_repo'], $params['actor'], $params['branch'], $params['event'], $params['status'], $params['created'], $params['check_suite_id'], $params['head_sha'], $params['per_page'], $params['page'], $params['exclude_pull_requests']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListRequiredWorkflowRuns\Response\Applicationjson\H200 {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'runners' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/actions/runners' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners();
                                            }
                                            $operation = new Operation\Actions\ListSelfHostedRunnersForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListSelfHostedRunnersForOrg\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'downloads' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/actions/runners/downloads' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\Downloads::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\Downloads::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀Downloads();
                                                }
                                                $operation = new Operation\Actions\ListRunnerApplicationsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\Downloads::class], $params['owner'], $params['repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RunnerApplication {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{runner_id}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/actions/runners/{runner_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'runner_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀CbRunnerIdRcb();
                                                }
                                                $operation = new Operation\Actions\GetSelfHostedRunnerForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb::class], $params['owner'], $params['repo'], $params['runner_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Runner {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'labels' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'runner_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                    }
                                                    $operation = new Operation\Actions\ListLabelsForSelfHostedRunnerForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $params['owner'], $params['repo'], $params['runner_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'runs' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/actions/runs' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'actor', 'branch', 'event', 'status', 'created', 'check_suite_id', 'head_sha', 'per_page', 'page', 'exclude_pull_requests')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs();
                                            }
                                            $operation = new Operation\Actions\ListWorkflowRunsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs::class], $params['owner'], $params['repo'], $params['actor'], $params['branch'], $params['event'], $params['status'], $params['created'], $params['check_suite_id'], $params['head_sha'], $params['per_page'], $params['page'], $params['exclude_pull_requests']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListRequiredWorkflowRuns\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{run_id}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/actions/runs/{run_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'run_id', 'exclude_pull_requests')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb();
                                                }
                                                $operation = new Operation\Actions\GetWorkflowRun($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb::class], $params['owner'], $params['repo'], $params['run_id'], $params['exclude_pull_requests']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WorkflowRun {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'approvals' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'run_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Approvals::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Approvals::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Approvals();
                                                    }
                                                    $operation = new Operation\Actions\GetReviewsForRun($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Approvals::class], $params['owner'], $params['repo'], $params['run_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EnvironmentApprovals {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'artifacts' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'run_id', 'per_page', 'page')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Artifacts::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Artifacts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Artifacts();
                                                    }
                                                    $operation = new Operation\Actions\ListWorkflowRunArtifacts($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Artifacts::class], $params['owner'], $params['repo'], $params['run_id'], $params['per_page'], $params['page']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListArtifactsForRepo\Response\Applicationjson\H200 {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'attempts' == $pathChunks[7]) {
                                                if (array_key_exists(8, $pathChunks) == true && '{attempt_number}' == $pathChunks[8]) {
                                                    if ('GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'run_id', 'attempt_number', 'exclude_pull_requests')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Attempts\CbAttemptNumberRcb::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Attempts\CbAttemptNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Attempts🌀CbAttemptNumberRcb();
                                                        }
                                                        $operation = new Operation\Actions\GetWorkflowRunAttempt($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Attempts\CbAttemptNumberRcb::class], $params['owner'], $params['repo'], $params['run_id'], $params['attempt_number'], $params['exclude_pull_requests']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WorkflowRun {
                                                            return $operation->createResponse($response);
                                                        });
                                                    } elseif (array_key_exists(9, $pathChunks) == true && 'jobs' == $pathChunks[9]) {
                                                        if ('GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs' == $call) {
                                                            $requestBodyData = array();
                                                            foreach (\array_keys($params) as $param) {
                                                                if (\in_array($param, array('owner', 'repo', 'run_id', 'attempt_number', 'per_page', 'page')) != false) {
                                                                    \array_push($requestBodyData, $param);
                                                                }
                                                            }
                                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Attempts\CbAttemptNumberRcb\Jobs::class, $this->hydrator) == false) {
                                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Attempts\CbAttemptNumberRcb\Jobs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Attempts🌀CbAttemptNumberRcb🌀Jobs();
                                                            }
                                                            $operation = new Operation\Actions\ListJobsForWorkflowRunAttempt($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Attempts\CbAttemptNumberRcb\Jobs::class], $params['owner'], $params['repo'], $params['run_id'], $params['attempt_number'], $params['per_page'], $params['page']);
                                                            $request = $operation->createRequest($requestBodyData);
                                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListJobsForWorkflowRunAttempt\Response\Applicationjson\H200|Schema\BasicError {
                                                                return $operation->createResponse($response);
                                                            });
                                                        }
                                                    } elseif (array_key_exists(9, $pathChunks) == true && 'logs' == $pathChunks[9]) {
                                                        if ('GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs' == $call) {
                                                            $requestBodyData = array();
                                                            foreach (\array_keys($params) as $param) {
                                                                if (\in_array($param, array('owner', 'repo', 'run_id', 'attempt_number')) != false) {
                                                                    \array_push($requestBodyData, $param);
                                                                }
                                                            }
                                                            $operation = new Operation\Actions\DownloadWorkflowRunAttemptLogs($params['owner'], $params['repo'], $params['run_id'], $params['attempt_number']);
                                                            $request = $operation->createRequest($requestBodyData);
                                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                                return $operation->createResponse($response);
                                                            });
                                                        }
                                                    }
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'jobs' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'run_id', 'filter', 'per_page', 'page')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Jobs::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Jobs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Jobs();
                                                    }
                                                    $operation = new Operation\Actions\ListJobsForWorkflowRun($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Jobs::class], $params['owner'], $params['repo'], $params['run_id'], $params['filter'], $params['per_page'], $params['page']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListJobsForWorkflowRunAttempt\Response\Applicationjson\H200 {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'logs' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'run_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Actions\DownloadWorkflowRunLogs($params['owner'], $params['repo'], $params['run_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'pending_deployments' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'run_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\PendingDeployments::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\PendingDeployments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀PendingDeployments();
                                                    }
                                                    $operation = new Operation\Actions\GetPendingDeploymentsForRun($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\PendingDeployments::class], $params['owner'], $params['repo'], $params['run_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PendingDeployment {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'timing' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'run_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Timing::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Timing::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Timing();
                                                    }
                                                    $operation = new Operation\Actions\GetWorkflowRunUsage($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Timing::class], $params['owner'], $params['repo'], $params['run_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WorkflowRunUsage {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'secrets' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/actions/secrets' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Secrets();
                                            }
                                            $operation = new Operation\Actions\ListRepoSecrets($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListRepoSecrets\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'public-key' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/actions/secrets/public-key' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\PublicKey::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\PublicKey::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Secrets🌀PublicKey();
                                                }
                                                $operation = new Operation\Actions\GetRepoPublicKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\PublicKey::class], $params['owner'], $params['repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsPublicKey {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{secret_name}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/actions/secrets/{secret_name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'secret_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Secrets🌀CbSecretNameRcb();
                                                }
                                                $operation = new Operation\Actions\GetRepoSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\CbSecretNameRcb::class], $params['owner'], $params['repo'], $params['secret_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsSecret {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'variables' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/actions/variables' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Variables();
                                            }
                                            $operation = new Operation\Actions\ListRepoVariables($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListRepoVariables\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{name}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/actions/variables/{name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables\CbNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Variables🌀CbNameRcb();
                                                }
                                                $operation = new Operation\Actions\GetRepoVariable($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables\CbNameRcb::class], $params['owner'], $params['repo'], $params['name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsVariable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'workflows' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/actions/workflows' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Workflows();
                                            }
                                            $operation = new Operation\Actions\ListRepoWorkflows($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListRepoWorkflows\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{workflow_id}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'workflow_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Workflows🌀CbWorkflowIdRcb();
                                                }
                                                $operation = new Operation\Actions\GetWorkflow($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb::class], $params['owner'], $params['repo'], $params['workflow_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Workflow {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'runs' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'workflow_id', 'actor', 'branch', 'event', 'status', 'created', 'check_suite_id', 'head_sha', 'per_page', 'page', 'exclude_pull_requests')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb\Runs::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb\Runs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Workflows🌀CbWorkflowIdRcb🌀Runs();
                                                    }
                                                    $operation = new Operation\Actions\ListWorkflowRuns($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb\Runs::class], $params['owner'], $params['repo'], $params['workflow_id'], $params['actor'], $params['branch'], $params['event'], $params['status'], $params['created'], $params['check_suite_id'], $params['head_sha'], $params['per_page'], $params['page'], $params['exclude_pull_requests']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListRequiredWorkflowRuns\Response\Applicationjson\H200 {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'timing' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'workflow_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb\Timing::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb\Timing::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Workflows🌀CbWorkflowIdRcb🌀Timing();
                                                    }
                                                    $operation = new Operation\Actions\GetWorkflowUsage($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Workflows\CbWorkflowIdRcb\Timing::class], $params['owner'], $params['repo'], $params['workflow_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WorkflowUsage {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'assignees' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/assignees' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Assignees::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Assignees::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Assignees();
                                        }
                                        $operation = new Operation\Issues\ListAssignees($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Assignees::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{assignee}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/assignees/{assignee}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'assignee')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Assignees\CbAssigneeRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Assignees\CbAssigneeRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Assignees🌀CbAssigneeRcb();
                                            }
                                            $operation = new Operation\Issues\CheckUserCanBeAssigned($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Assignees\CbAssigneeRcb::class], $params['owner'], $params['repo'], $params['assignee']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'autolinks' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/autolinks' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Autolinks();
                                        }
                                        $operation = new Operation\Repos\ListAutolinks($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks::class], $params['owner'], $params['repo'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Autolink {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{autolink_id}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/autolinks/{autolink_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'autolink_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks\CbAutolinkIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks\CbAutolinkIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Autolinks🌀CbAutolinkIdRcb();
                                            }
                                            $operation = new Operation\Repos\GetAutolink($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks\CbAutolinkIdRcb::class], $params['owner'], $params['repo'], $params['autolink_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Autolink|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'branches' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/branches' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'protected', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches();
                                        }
                                        $operation = new Operation\Repos\ListBranches($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches::class], $params['owner'], $params['repo'], $params['protected'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ShortBranch|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{branch}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/branches/{branch}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb();
                                            }
                                            $operation = new Operation\Repos\GetBranch($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb::class], $params['owner'], $params['repo'], $params['branch']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BranchWithProtection|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'protection' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/branches/{branch}/protection' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection();
                                                }
                                                $operation = new Operation\Repos\GetBranchProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class], $params['owner'], $params['repo'], $params['branch']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BranchProtection|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'enforce_admins' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀EnforceAdmins();
                                                    }
                                                    $operation = new Operation\Repos\GetAdminBranchProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class], $params['owner'], $params['repo'], $params['branch']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ProtectedBranchAdminEnforced {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'required_pull_request_reviews' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredPullRequestReviews();
                                                    }
                                                    $operation = new Operation\Repos\GetPullRequestReviewProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class], $params['owner'], $params['repo'], $params['branch']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ProtectedBranchPullRequestReview {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'required_signatures' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredSignatures();
                                                    }
                                                    $operation = new Operation\Repos\GetCommitSignatureProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class], $params['owner'], $params['repo'], $params['branch']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ProtectedBranchAdminEnforced|Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'required_status_checks' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredStatusChecks();
                                                    }
                                                    $operation = new Operation\Repos\GetStatusChecksProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks::class], $params['owner'], $params['repo'], $params['branch']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\StatusCheckPolicy|Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                } elseif (array_key_exists(8, $pathChunks) == true && 'contexts' == $pathChunks[8]) {
                                                    if ('GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredStatusChecks🌀Contexts();
                                                        }
                                                        $operation = new Operation\Repos\GetAllStatusCheckContexts($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class], $params['owner'], $params['repo'], $params['branch']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WebHookHeader\UserAgent|Schema\BasicError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'restrictions' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions();
                                                    }
                                                    $operation = new Operation\Repos\GetAccessRestrictions($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions::class], $params['owner'], $params['repo'], $params['branch']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BranchRestrictionPolicy|Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                } elseif (array_key_exists(8, $pathChunks) == true && 'apps' == $pathChunks[8]) {
                                                    if ('GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Apps();
                                                        }
                                                        $operation = new Operation\Repos\GetAppsWithAccessToProtectedBranch($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class], $params['owner'], $params['repo'], $params['branch']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Integration|Schema\BasicError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                } elseif (array_key_exists(8, $pathChunks) == true && 'teams' == $pathChunks[8]) {
                                                    if ('GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Teams();
                                                        }
                                                        $operation = new Operation\Repos\GetTeamsWithAccessToProtectedBranch($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class], $params['owner'], $params['repo'], $params['branch']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Team|Schema\BasicError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                } elseif (array_key_exists(8, $pathChunks) == true && 'users' == $pathChunks[8]) {
                                                    if ('GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Users();
                                                        }
                                                        $operation = new Operation\Repos\GetUsersWithAccessToProtectedBranch($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class], $params['owner'], $params['repo'], $params['branch']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser|Schema\BasicError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'check-runs' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{check_run_id}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/check-runs/{check_run_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'check_run_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckDashRuns🌀CbCheckRunIdRcb();
                                            }
                                            $operation = new Operation\Checks\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb::class], $params['owner'], $params['repo'], $params['check_run_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CheckRun {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'annotations' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'check_run_id', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb\Annotations::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb\Annotations::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckDashRuns🌀CbCheckRunIdRcb🌀Annotations();
                                                }
                                                $operation = new Operation\Checks\ListAnnotations($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb\Annotations::class], $params['owner'], $params['repo'], $params['check_run_id'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CheckAnnotation {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'check-suites' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{check_suite_id}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/check-suites/{check_suite_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'check_suite_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckDashSuites🌀CbCheckSuiteIdRcb();
                                            }
                                            $operation = new Operation\Checks\GetSuite($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb::class], $params['owner'], $params['repo'], $params['check_suite_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CheckSuite {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'check-runs' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'check_suite_id', 'check_name', 'status', 'filter', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb\CheckDashRuns::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb\CheckDashRuns::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckDashSuites🌀CbCheckSuiteIdRcb🌀CheckDashRuns();
                                                }
                                                $operation = new Operation\Checks\ListForSuite($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb\CheckDashRuns::class], $params['owner'], $params['repo'], $params['check_suite_id'], $params['check_name'], $params['status'], $params['filter'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Checks\ListForSuite\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'code-scanning' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'alerts' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/code-scanning/alerts' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'tool_name', 'tool_guid', 'ref', 'state', 'severity', 'page', 'per_page', 'direction', 'sort')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Alerts::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Alerts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeScanning🌀Alerts();
                                            }
                                            $operation = new Operation\CodeScanning\ListAlertsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Alerts::class], $params['owner'], $params['repo'], $params['tool_name'], $params['tool_guid'], $params['ref'], $params['state'], $params['severity'], $params['page'], $params['per_page'], $params['direction'], $params['sort']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodeScanningAlertItems|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{alert_number}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'alert_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeDashScanning🌀Alerts🌀CbAlertNumberRcb();
                                                }
                                                $operation = new Operation\CodeScanning\GetAlert($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb::class], $params['owner'], $params['repo'], $params['alert_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodeScanningAlert|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'instances' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'alert_number', 'ref', 'page', 'per_page')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb\Instances::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb\Instances::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeDashScanning🌀Alerts🌀CbAlertNumberRcb🌀Instances();
                                                    }
                                                    $operation = new Operation\CodeScanning\ListAlertInstances($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb\Instances::class], $params['owner'], $params['repo'], $params['alert_number'], $params['ref'], $params['page'], $params['per_page']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodeScanningAlertInstance|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'analyses' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/code-scanning/analyses' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'tool_name', 'tool_guid', 'ref', 'sarif_id', 'page', 'per_page', 'direction', 'sort')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Analyses::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Analyses::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeScanning🌀Analyses();
                                            }
                                            $operation = new Operation\CodeScanning\ListRecentAnalyses($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Analyses::class], $params['owner'], $params['repo'], $params['tool_name'], $params['tool_guid'], $params['ref'], $params['sarif_id'], $params['page'], $params['per_page'], $params['direction'], $params['sort']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodeScanningAnalysis|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{analysis_id}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'analysis_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Analyses\CbAnalysisIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Analyses\CbAnalysisIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeDashScanning🌀Analyses🌀CbAnalysisIdRcb();
                                                }
                                                $operation = new Operation\CodeScanning\GetAnalysis($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Analyses\CbAnalysisIdRcb::class], $params['owner'], $params['repo'], $params['analysis_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodeScanningAnalysis|Schema\AuditLogEvent\Data|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'codeql' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'databases' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/code-scanning/codeql/databases' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Codeql\Databases::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Codeql\Databases::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeScanning🌀Codeql🌀Databases();
                                                }
                                                $operation = new Operation\CodeScanning\ListCodeqlDatabases($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Codeql\Databases::class], $params['owner'], $params['repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodeScanningCodeqlDatabase|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{language}' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'language')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Codeql\Databases\CbLanguageRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Codeql\Databases\CbLanguageRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeScanning🌀Codeql🌀Databases🌀CbLanguageRcb();
                                                    }
                                                    $operation = new Operation\CodeScanning\GetCodeqlDatabase($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Codeql\Databases\CbLanguageRcb::class], $params['owner'], $params['repo'], $params['language']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodeScanningCodeqlDatabase|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'sarifs' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{sarif_id}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'sarif_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Sarifs\CbSarifIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Sarifs\CbSarifIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeDashScanning🌀Sarifs🌀CbSarifIdRcb();
                                                }
                                                $operation = new Operation\CodeScanning\GetSarif($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Sarifs\CbSarifIdRcb::class], $params['owner'], $params['repo'], $params['sarif_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodeScanningSarifsStatus|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'codeowners' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'errors' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/codeowners/errors' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'ref')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codeowners\Errors::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codeowners\Errors::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codeowners🌀Errors();
                                            }
                                            $operation = new Operation\Repos\CodeownersErrors($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codeowners\Errors::class], $params['owner'], $params['repo'], $params['ref']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodeownersErrors {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'codespaces' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/codespaces' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces();
                                        }
                                        $operation = new Operation\Codespaces\ListInRepositoryForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Codespaces\ListInOrganization\Response\Applicationjson\H200|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'devcontainers' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/codespaces/devcontainers' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Devcontainers::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Devcontainers::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces🌀Devcontainers();
                                            }
                                            $operation = new Operation\Codespaces\ListDevcontainersInRepositoryForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Devcontainers::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Codespaces\ListDevcontainersInRepositoryForAuthenticatedUser\Response\Applicationjson\H200|Schema\BasicError|Schema\ScimError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'machines' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/codespaces/machines' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'location', 'client_ip')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Machines::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Machines::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces🌀Machines();
                                            }
                                            $operation = new Operation\Codespaces\RepoMachinesForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Machines::class], $params['owner'], $params['repo'], $params['location'], $params['client_ip']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Codespaces\RepoMachinesForAuthenticatedUser\Response\Applicationjson\H200|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'new' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/codespaces/new' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'ref', 'client_ip')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\New_::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\New_::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces🌀New_();
                                            }
                                            $operation = new Operation\Codespaces\PreFlightWithRepoForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\New_::class], $params['owner'], $params['repo'], $params['ref'], $params['client_ip']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Codespaces\PreFlightWithRepoForAuthenticatedUser\Response\Applicationjson\H200|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'secrets' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/codespaces/secrets' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces🌀Secrets();
                                            }
                                            $operation = new Operation\Codespaces\ListRepoSecrets($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Codespaces\ListRepoSecrets\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'public-key' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/codespaces/secrets/public-key' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\PublicKey::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\PublicKey::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces🌀Secrets🌀PublicKey();
                                                }
                                                $operation = new Operation\Codespaces\GetRepoPublicKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\PublicKey::class], $params['owner'], $params['repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodespacesPublicKey {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{secret_name}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'secret_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb();
                                                }
                                                $operation = new Operation\Codespaces\GetRepoSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\CbSecretNameRcb::class], $params['owner'], $params['repo'], $params['secret_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RepoCodespacesSecret {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'collaborators' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/collaborators' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'permission', 'affiliation', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Collaborators();
                                        }
                                        $operation = new Operation\Repos\ListCollaborators($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators::class], $params['owner'], $params['repo'], $params['permission'], $params['affiliation'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Collaborator|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{username}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/collaborators/{username}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'username')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Repos\CheckCollaborator($params['owner'], $params['repo'], $params['username']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'permission' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/collaborators/{username}/permission' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'username')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators\CbUsernameRcb\Permission::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators\CbUsernameRcb\Permission::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Collaborators🌀CbUsernameRcb🌀Permission();
                                                }
                                                $operation = new Operation\Repos\GetCollaboratorPermissionLevel($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators\CbUsernameRcb\Permission::class], $params['owner'], $params['repo'], $params['username']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RepositoryCollaboratorPermission|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'comments' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/comments' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Comments();
                                        }
                                        $operation = new Operation\Repos\ListCommitCommentsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CommitComment {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{comment_id}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/comments/{comment_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'comment_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Comments🌀CbCommentIdRcb();
                                            }
                                            $operation = new Operation\Repos\GetCommitComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class], $params['owner'], $params['repo'], $params['comment_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CommitComment|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'reactions' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/comments/{comment_id}/reactions' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'comment_id', 'content', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb\Reactions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Comments🌀CbCommentIdRcb🌀Reactions();
                                                }
                                                $operation = new Operation\Reactions\ListForCommitComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb\Reactions::class], $params['owner'], $params['repo'], $params['comment_id'], $params['content'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'commits' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/commits' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'sha', 'path', 'author', 'committer', 'since', 'until', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits();
                                        }
                                        $operation = new Operation\Repos\ListCommits($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits::class], $params['owner'], $params['repo'], $params['sha'], $params['path'], $params['author'], $params['committer'], $params['since'], $params['until'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Commit|Schema\BasicError|Schema\ScimError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{commit_sha}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'branches-where-head' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'commit_sha')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\BranchesDashWhereDashHead::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\BranchesDashWhereDashHead::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbCommitShaRcb🌀BranchesDashWhereDashHead();
                                                }
                                                $operation = new Operation\Repos\ListBranchesForHeadCommit($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\BranchesDashWhereDashHead::class], $params['owner'], $params['repo'], $params['commit_sha']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BranchShort|Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'comments' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/commits/{commit_sha}/comments' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'commit_sha', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Comments::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbCommitShaRcb🌀Comments();
                                                }
                                                $operation = new Operation\Repos\ListCommentsForCommit($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Comments::class], $params['owner'], $params['repo'], $params['commit_sha'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CommitComment {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'pulls' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'commit_sha', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Pulls::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Pulls::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbCommitShaRcb🌀Pulls();
                                                }
                                                $operation = new Operation\Repos\ListPullRequestsAssociatedWithCommit($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Pulls::class], $params['owner'], $params['repo'], $params['commit_sha'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestSimple {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{ref}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/commits/{ref}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'ref', 'page', 'per_page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbRefRcb();
                                            }
                                            $operation = new Operation\Repos\GetCommit($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb::class], $params['owner'], $params['repo'], $params['ref'], $params['page'], $params['per_page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Commit|Schema\ValidationError|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'check-runs' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/commits/{ref}/check-runs' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'ref', 'check_name', 'status', 'app_id', 'filter', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\CheckRuns::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\CheckRuns::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbRefRcb🌀CheckRuns();
                                                }
                                                $operation = new Operation\Checks\ListForRef($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\CheckRuns::class], $params['owner'], $params['repo'], $params['ref'], $params['check_name'], $params['status'], $params['app_id'], $params['filter'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Checks\ListForSuite\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'check-suites' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/commits/{ref}/check-suites' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'ref', 'app_id', 'check_name', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\CheckSuites::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\CheckSuites::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbRefRcb🌀CheckSuites();
                                                }
                                                $operation = new Operation\Checks\ListSuitesForRef($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\CheckSuites::class], $params['owner'], $params['repo'], $params['ref'], $params['app_id'], $params['check_name'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Checks\ListSuitesForRef\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'status' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/commits/{ref}/status' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'ref', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\Status::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\Status::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbRefRcb🌀Status();
                                                }
                                                $operation = new Operation\Repos\GetCombinedStatusForRef($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\Status::class], $params['owner'], $params['repo'], $params['ref'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CombinedCommitStatus|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'statuses' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/commits/{ref}/statuses' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'ref', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\Statuses::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\Statuses::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbRefRcb🌀Statuses();
                                                }
                                                $operation = new Operation\Repos\ListCommitStatusesForRef($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbRefRcb\Statuses::class], $params['owner'], $params['repo'], $params['ref'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Status|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'community' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'profile' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/community/profile' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Community\Profile::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Community\Profile::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Community🌀Profile();
                                            }
                                            $operation = new Operation\Repos\GetCommunityProfileMetrics($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Community\Profile::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CommunityProfile {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'compare' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{basehead}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/compare/{basehead}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'basehead', 'page', 'per_page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Compare\CbBaseheadRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Compare\CbBaseheadRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Compare🌀CbBaseheadRcb();
                                            }
                                            $operation = new Operation\Repos\CompareCommits($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Compare\CbBaseheadRcb::class], $params['owner'], $params['repo'], $params['basehead'], $params['page'], $params['per_page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CommitComparison|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'contents' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{path}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/contents/{path}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'path', 'ref')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Contents🌀CbPathRcb();
                                            }
                                            $operation = new Operation\Repos\GetContent($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class], $params['owner'], $params['repo'], $params['path'], $params['ref']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ContentTree|Schema\Operation\Repos\GetContent\Response\Applicationjson\H200|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'contributors' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/contributors' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'anon', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contributors::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contributors::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Contributors();
                                        }
                                        $operation = new Operation\Repos\ListContributors($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contributors::class], $params['owner'], $params['repo'], $params['anon'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Contributor|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'dependabot' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'alerts' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/dependabot/alerts' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'state', 'severity', 'ecosystem', 'package', 'manifest', 'scope', 'before', 'after', 'last', 'sort', 'direction', 'page', 'per_page', 'first')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Dependabot🌀Alerts();
                                            }
                                            $operation = new Operation\Dependabot\ListAlertsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts::class], $params['owner'], $params['repo'], $params['state'], $params['severity'], $params['ecosystem'], $params['package'], $params['manifest'], $params['scope'], $params['before'], $params['after'], $params['last'], $params['sort'], $params['direction'], $params['page'], $params['per_page'], $params['first']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DependabotAlert|Schema\BasicError|Schema\ScimError|Schema\ValidationErrorSimple {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{alert_number}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'alert_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts\CbAlertNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts\CbAlertNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Dependabot🌀Alerts🌀CbAlertNumberRcb();
                                                }
                                                $operation = new Operation\Dependabot\GetAlert($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts\CbAlertNumberRcb::class], $params['owner'], $params['repo'], $params['alert_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DependabotAlert|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'secrets' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/dependabot/secrets' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Dependabot🌀Secrets();
                                            }
                                            $operation = new Operation\Dependabot\ListRepoSecrets($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Dependabot\ListRepoSecrets\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'public-key' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/dependabot/secrets/public-key' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\PublicKey::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\PublicKey::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Dependabot🌀Secrets🌀PublicKey();
                                                }
                                                $operation = new Operation\Dependabot\GetRepoPublicKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\PublicKey::class], $params['owner'], $params['repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DependabotPublicKey {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{secret_name}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'secret_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Dependabot🌀Secrets🌀CbSecretNameRcb();
                                                }
                                                $operation = new Operation\Dependabot\GetRepoSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\CbSecretNameRcb::class], $params['owner'], $params['repo'], $params['secret_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DependabotSecret {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'dependency-graph' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'compare' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{basehead}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'basehead', 'name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\DependencyGraph\Compare\CbBaseheadRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\DependencyGraph\Compare\CbBaseheadRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀DependencyGraph🌀Compare🌀CbBaseheadRcb();
                                                }
                                                $operation = new Operation\DependencyGraph\DiffRange($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\DependencyGraph\Compare\CbBaseheadRcb::class], $params['owner'], $params['repo'], $params['basehead'], $params['name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DependencyGraphDiff|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'deployments' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/deployments' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'sha', 'ref', 'task', 'environment', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Deployments();
                                        }
                                        $operation = new Operation\Repos\ListDeployments($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments::class], $params['owner'], $params['repo'], $params['sha'], $params['ref'], $params['task'], $params['environment'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Deployment {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{deployment_id}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/deployments/{deployment_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'deployment_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Deployments🌀CbDeploymentIdRcb();
                                            }
                                            $operation = new Operation\Repos\GetDeployment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb::class], $params['owner'], $params['repo'], $params['deployment_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Deployment|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'statuses' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'deployment_id', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Deployments🌀CbDeploymentIdRcb🌀Statuses();
                                                }
                                                $operation = new Operation\Repos\ListDeploymentStatuses($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses::class], $params['owner'], $params['repo'], $params['deployment_id'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DeploymentStatus|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{status_id}' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'deployment_id', 'status_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses\CbStatusIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses\CbStatusIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Deployments🌀CbDeploymentIdRcb🌀Statuses🌀CbStatusIdRcb();
                                                    }
                                                    $operation = new Operation\Repos\GetDeploymentStatus($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses\CbStatusIdRcb::class], $params['owner'], $params['repo'], $params['deployment_id'], $params['status_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DeploymentStatus|Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'environments' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/environments' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Environments();
                                        }
                                        $operation = new Operation\Repos\GetAllEnvironments($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Repos\GetAllEnvironments\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{environment_name}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/environments/{environment_name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'environment_name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Environments🌀CbEnvironmentNameRcb();
                                            }
                                            $operation = new Operation\Repos\GetEnvironment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb::class], $params['owner'], $params['repo'], $params['environment_name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Environment {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'deployment-branch-policies' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'environment_name', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Environments🌀CbEnvironmentNameRcb🌀DeploymentDashBranchDashPolicies();
                                                }
                                                $operation = new Operation\Repos\ListDeploymentBranchPolicies($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies::class], $params['owner'], $params['repo'], $params['environment_name'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Repos\ListDeploymentBranchPolicies\Response\Applicationjson\H200 {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{branch_policy_id}' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'environment_name', 'branch_policy_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies\CbBranchPolicyIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies\CbBranchPolicyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Environments🌀CbEnvironmentNameRcb🌀DeploymentDashBranchDashPolicies🌀CbBranchPolicyIdRcb();
                                                    }
                                                    $operation = new Operation\Repos\GetDeploymentBranchPolicy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies\CbBranchPolicyIdRcb::class], $params['owner'], $params['repo'], $params['environment_name'], $params['branch_policy_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DeploymentBranchPolicy {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'events' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/events' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Events::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Events::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Events();
                                        }
                                        $operation = new Operation\Activity\ListRepoEvents($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Events::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Event {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'forks' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/forks' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'sort', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Forks::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Forks::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Forks();
                                        }
                                        $operation = new Operation\Repos\ListForks($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Forks::class], $params['owner'], $params['repo'], $params['sort'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MinimalRepository|Schema\BasicError|Schema\ScimError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'git' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'blobs' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{file_sha}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/git/blobs/{file_sha}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'file_sha')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Blobs\CbFileShaRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Blobs\CbFileShaRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Blobs🌀CbFileShaRcb();
                                                }
                                                $operation = new Operation\Git\GetBlob($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Blobs\CbFileShaRcb::class], $params['owner'], $params['repo'], $params['file_sha']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Blob|Schema\BasicError|Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'commits' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{commit_sha}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/git/commits/{commit_sha}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'commit_sha')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Commits\CbCommitShaRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Commits\CbCommitShaRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Commits🌀CbCommitShaRcb();
                                                }
                                                $operation = new Operation\Git\GetCommit($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Commits\CbCommitShaRcb::class], $params['owner'], $params['repo'], $params['commit_sha']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GitCommit|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'matching-refs' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{ref}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/git/matching-refs/{ref}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'ref')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\MatchingRefs\CbRefRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\MatchingRefs\CbRefRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀MatchingRefs🌀CbRefRcb();
                                                }
                                                $operation = new Operation\Git\ListMatchingRefs($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\MatchingRefs\CbRefRcb::class], $params['owner'], $params['repo'], $params['ref']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GitRef {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'ref' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{ref}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/git/ref/{ref}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'ref')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Ref\CbRefRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Ref\CbRefRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Ref🌀CbRefRcb();
                                                }
                                                $operation = new Operation\Git\GetRef($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Ref\CbRefRcb::class], $params['owner'], $params['repo'], $params['ref']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GitRef|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'tags' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{tag_sha}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/git/tags/{tag_sha}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'tag_sha')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Tags\CbTagShaRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Tags\CbTagShaRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Tags🌀CbTagShaRcb();
                                                }
                                                $operation = new Operation\Git\GetTag($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Tags\CbTagShaRcb::class], $params['owner'], $params['repo'], $params['tag_sha']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GitTag|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'trees' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{tree_sha}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/git/trees/{tree_sha}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'tree_sha', 'recursive')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Trees\CbTreeShaRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Trees\CbTreeShaRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Trees🌀CbTreeShaRcb();
                                                }
                                                $operation = new Operation\Git\GetTree($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Trees\CbTreeShaRcb::class], $params['owner'], $params['repo'], $params['tree_sha'], $params['recursive']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GitTree|Schema\ValidationError|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'hooks' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/hooks' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks();
                                        }
                                        $operation = new Operation\Repos\ListWebhooks($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Hook|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{hook_id}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/hooks/{hook_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'hook_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb();
                                            }
                                            $operation = new Operation\Repos\GetWebhook($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class], $params['owner'], $params['repo'], $params['hook_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Hook|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'config' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/hooks/{hook_id}/config' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'hook_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Config::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Config::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb🌀Config();
                                                }
                                                $operation = new Operation\Repos\GetWebhookConfigForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Config::class], $params['owner'], $params['repo'], $params['hook_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WebhookConfig {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'deliveries' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'hook_id', 'cursor', 'redelivery', 'per_page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb🌀Deliveries();
                                                }
                                                $operation = new Operation\Repos\ListWebhookDeliveries($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries::class], $params['owner'], $params['repo'], $params['hook_id'], $params['cursor'], $params['redelivery'], $params['per_page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\HookDeliveryItem|Schema\BasicError|Schema\ScimError|Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{delivery_id}' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'hook_id', 'delivery_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb🌀Deliveries🌀CbDeliveryIdRcb();
                                                    }
                                                    $operation = new Operation\Repos\GetWebhookDelivery($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb::class], $params['owner'], $params['repo'], $params['hook_id'], $params['delivery_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\HookDelivery|Schema\BasicError|Schema\ScimError|Schema\ValidationError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'import' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/import' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Import();
                                        }
                                        $operation = new Operation\Migrations\GetImportStatus($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Import|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'authors' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/import/authors' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'since')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Authors::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Authors::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Import🌀Authors();
                                            }
                                            $operation = new Operation\Migrations\GetCommitAuthors($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Authors::class], $params['owner'], $params['repo'], $params['since']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PorterAuthor|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'large_files' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/import/large_files' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\LargeFiles::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\LargeFiles::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Import🌀LargeFiles();
                                            }
                                            $operation = new Operation\Migrations\GetLargeFiles($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\LargeFiles::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PorterLargeFile|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'installation' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/installation' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Installation::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Installation::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Installation();
                                        }
                                        $operation = new Operation\Apps\GetRepoInstallation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Installation::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Installation|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'interaction-limits' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/interaction-limits' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\InteractionLimits::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\InteractionLimits::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀InteractionLimits();
                                        }
                                        $operation = new Operation\Interactions\GetRestrictionsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\InteractionLimits::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Interactions\GetRestrictionsForOrg\Response\Applicationjson\H200 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'invitations' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/invitations' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Invitations::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Invitations::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Invitations();
                                        }
                                        $operation = new Operation\Repos\ListInvitations($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Invitations::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RepositoryInvitation {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'issues' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/issues' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'milestone', 'assignee', 'creator', 'mentioned', 'labels', 'since', 'state', 'sort', 'direction', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues();
                                        }
                                        $operation = new Operation\Issues\ListForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues::class], $params['owner'], $params['repo'], $params['milestone'], $params['assignee'], $params['creator'], $params['mentioned'], $params['labels'], $params['since'], $params['state'], $params['sort'], $params['direction'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Issue|Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'comments' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/issues/comments' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'direction', 'since', 'sort', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀Comments();
                                            }
                                            $operation = new Operation\Issues\ListCommentsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments::class], $params['owner'], $params['repo'], $params['direction'], $params['since'], $params['sort'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\IssueComment|Schema\ValidationError|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{comment_id}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/issues/comments/{comment_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'comment_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀Comments🌀CbCommentIdRcb();
                                                }
                                                $operation = new Operation\Issues\GetComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb::class], $params['owner'], $params['repo'], $params['comment_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\IssueComment|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'reactions' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'comment_id', 'content', 'per_page', 'page')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb\Reactions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀Comments🌀CbCommentIdRcb🌀Reactions();
                                                    }
                                                    $operation = new Operation\Reactions\ListForIssueComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb\Reactions::class], $params['owner'], $params['repo'], $params['comment_id'], $params['content'], $params['per_page'], $params['page']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction|Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'events' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/issues/events' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Events::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Events::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀Events();
                                            }
                                            $operation = new Operation\Issues\ListEventsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Events::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\IssueEvent|Schema\ValidationError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{event_id}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/issues/events/{event_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'event_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Events\CbEventIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Events\CbEventIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀Events🌀CbEventIdRcb();
                                                }
                                                $operation = new Operation\Issues\GetEvent($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Events\CbEventIdRcb::class], $params['owner'], $params['repo'], $params['event_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\IssueEvent|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{issue_number}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/issues/{issue_number}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'issue_number')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb();
                                            }
                                            $operation = new Operation\Issues\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb::class], $params['owner'], $params['repo'], $params['issue_number']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Issue|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'assignees' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{assignee}' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'issue_number', 'assignee')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees\CbAssigneeRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees\CbAssigneeRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Assignees🌀CbAssigneeRcb();
                                                    }
                                                    $operation = new Operation\Issues\CheckUserCanBeAssignedToIssue($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees\CbAssigneeRcb::class], $params['owner'], $params['repo'], $params['issue_number'], $params['assignee']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'comments' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/issues/{issue_number}/comments' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'issue_number', 'since', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Comments::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Comments();
                                                }
                                                $operation = new Operation\Issues\ListComments($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Comments::class], $params['owner'], $params['repo'], $params['issue_number'], $params['since'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\IssueComment|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'events' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/issues/{issue_number}/events' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'issue_number', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Events::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Events::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Events();
                                                }
                                                $operation = new Operation\Issues\ListEvents($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Events::class], $params['owner'], $params['repo'], $params['issue_number'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\IssueEventForIssue|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'labels' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/issues/{issue_number}/labels' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'issue_number', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Labels();
                                                }
                                                $operation = new Operation\Issues\ListLabelsOnIssue($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class], $params['owner'], $params['repo'], $params['issue_number'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Label|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'reactions' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/issues/{issue_number}/reactions' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'issue_number', 'content', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Reactions();
                                                }
                                                $operation = new Operation\Reactions\ListForIssue($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Reactions::class], $params['owner'], $params['repo'], $params['issue_number'], $params['content'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'timeline' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/issues/{issue_number}/timeline' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'issue_number', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Timeline::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Timeline::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Timeline();
                                                }
                                                $operation = new Operation\Issues\ListEventsForTimeline($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Timeline::class], $params['owner'], $params['repo'], $params['issue_number'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TimelineIssueEvents|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'keys' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/keys' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Keys();
                                        }
                                        $operation = new Operation\Repos\ListDeployKeys($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DeployKey {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{key_id}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/keys/{key_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'key_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys\CbKeyIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys\CbKeyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Keys🌀CbKeyIdRcb();
                                            }
                                            $operation = new Operation\Repos\GetDeployKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys\CbKeyIdRcb::class], $params['owner'], $params['repo'], $params['key_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DeployKey|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'labels' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/labels' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Labels();
                                        }
                                        $operation = new Operation\Issues\ListLabelsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Label|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{name}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/labels/{name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels\CbNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Labels🌀CbNameRcb();
                                            }
                                            $operation = new Operation\Issues\GetLabel($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels\CbNameRcb::class], $params['owner'], $params['repo'], $params['name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Label|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'languages' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/languages' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Languages::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Languages::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Languages();
                                        }
                                        $operation = new Operation\Repos\ListLanguages($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Languages::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Language {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'license' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/license' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\License::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\License::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀License();
                                        }
                                        $operation = new Operation\Licenses\GetForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\License::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\LicenseContent {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'milestones' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/milestones' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'state', 'sort', 'direction', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Milestones();
                                        }
                                        $operation = new Operation\Issues\ListMilestones($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones::class], $params['owner'], $params['repo'], $params['state'], $params['sort'], $params['direction'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Milestone|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{milestone_number}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/milestones/{milestone_number}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'milestone_number')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Milestones🌀CbMilestoneNumberRcb();
                                            }
                                            $operation = new Operation\Issues\GetMilestone($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class], $params['owner'], $params['repo'], $params['milestone_number']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Milestone|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'labels' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'milestone_number', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Milestones🌀CbMilestoneNumberRcb🌀Labels();
                                                }
                                                $operation = new Operation\Issues\ListLabelsForMilestone($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb\Labels::class], $params['owner'], $params['repo'], $params['milestone_number'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Label {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'notifications' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/notifications' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'since', 'before', 'all', 'participating', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Notifications::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Notifications::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Notifications();
                                        }
                                        $operation = new Operation\Activity\ListRepoNotificationsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Notifications::class], $params['owner'], $params['repo'], $params['since'], $params['before'], $params['all'], $params['participating'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Thread {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'pages' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/pages' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages();
                                        }
                                        $operation = new Operation\Repos\GetPages($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Page|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'builds' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/pages/builds' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages🌀Builds();
                                            }
                                            $operation = new Operation\Repos\ListPagesBuilds($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PageBuild {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'latest' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/pages/builds/latest' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds\Latest::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds\Latest::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages🌀Builds🌀Latest();
                                                }
                                                $operation = new Operation\Repos\GetLatestPagesBuild($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds\Latest::class], $params['owner'], $params['repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PageBuild {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{build_id}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/pages/builds/{build_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'build_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds\CbBuildIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds\CbBuildIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages🌀Builds🌀CbBuildIdRcb();
                                                }
                                                $operation = new Operation\Repos\GetPagesBuild($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds\CbBuildIdRcb::class], $params['owner'], $params['repo'], $params['build_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PageBuild {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'health' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/pages/health' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Health::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Health::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages🌀Health();
                                            }
                                            $operation = new Operation\Repos\GetPagesHealthCheck($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Health::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PagesHealthCheck|Schema\EmptyObject|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'projects' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/projects' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'state', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Projects::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Projects::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Projects();
                                        }
                                        $operation = new Operation\Projects\ListForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Projects::class], $params['owner'], $params['repo'], $params['state'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Project|Schema\BasicError|Schema\ValidationErrorSimple {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'pulls' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/pulls' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'head', 'base', 'direction', 'state', 'sort', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls();
                                        }
                                        $operation = new Operation\Pulls\List_($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls::class], $params['owner'], $params['repo'], $params['head'], $params['base'], $params['direction'], $params['state'], $params['sort'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestSimple|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'comments' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/pulls/comments' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'sort', 'direction', 'since', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀Comments();
                                            }
                                            $operation = new Operation\Pulls\ListReviewCommentsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments::class], $params['owner'], $params['repo'], $params['sort'], $params['direction'], $params['since'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestReviewComment {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{comment_id}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/pulls/comments/{comment_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'comment_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀Comments🌀CbCommentIdRcb();
                                                }
                                                $operation = new Operation\Pulls\GetReviewComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class], $params['owner'], $params['repo'], $params['comment_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestReviewComment|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'reactions' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'comment_id', 'content', 'per_page', 'page')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb\Reactions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀Comments🌀CbCommentIdRcb🌀Reactions();
                                                    }
                                                    $operation = new Operation\Reactions\ListForPullRequestReviewComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb\Reactions::class], $params['owner'], $params['repo'], $params['comment_id'], $params['content'], $params['per_page'], $params['page']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction|Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{pull_number}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/pulls/{pull_number}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'pull_number')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb();
                                            }
                                            $operation = new Operation\Pulls\Get($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb::class], $params['owner'], $params['repo'], $params['pull_number']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequest|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'comments' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/pulls/{pull_number}/comments' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'pull_number', 'direction', 'since', 'sort', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Comments();
                                                }
                                                $operation = new Operation\Pulls\ListReviewComments($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments::class], $params['owner'], $params['repo'], $params['pull_number'], $params['direction'], $params['since'], $params['sort'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestReviewComment {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'commits' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/pulls/{pull_number}/commits' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'pull_number', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Commits::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Commits::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Commits();
                                                }
                                                $operation = new Operation\Pulls\ListCommits($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Commits::class], $params['owner'], $params['repo'], $params['pull_number'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Commit {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'files' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/pulls/{pull_number}/files' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'pull_number', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Files::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Files::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Files();
                                                }
                                                $operation = new Operation\Pulls\ListFiles($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Files::class], $params['owner'], $params['repo'], $params['pull_number'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DiffEntry|Schema\ValidationError|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'merge' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/pulls/{pull_number}/merge' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'pull_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Pulls\CheckIfMerged($params['owner'], $params['repo'], $params['pull_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'requested_reviewers' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'pull_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀RequestedReviewers();
                                                }
                                                $operation = new Operation\Pulls\ListRequestedReviewers($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class], $params['owner'], $params['repo'], $params['pull_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestReviewRequest {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'reviews' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'pull_number', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Reviews();
                                                }
                                                $operation = new Operation\Pulls\ListReviews($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews::class], $params['owner'], $params['repo'], $params['pull_number'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestReview {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{review_id}' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'pull_number', 'review_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Reviews🌀CbReviewIdRcb();
                                                    }
                                                    $operation = new Operation\Pulls\GetReview($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class], $params['owner'], $params['repo'], $params['pull_number'], $params['review_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestReview|Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                } elseif (array_key_exists(8, $pathChunks) == true && 'comments' == $pathChunks[8]) {
                                                    if ('GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'pull_number', 'review_id', 'per_page', 'page')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Comments::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Reviews🌀CbReviewIdRcb🌀Comments();
                                                        }
                                                        $operation = new Operation\Pulls\ListCommentsForReview($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Comments::class], $params['owner'], $params['repo'], $params['pull_number'], $params['review_id'], $params['per_page'], $params['page']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ReviewComment|Schema\BasicError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'readme' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/readme' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'ref')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Readme::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Readme::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Readme();
                                        }
                                        $operation = new Operation\Repos\GetReadme($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Readme::class], $params['owner'], $params['repo'], $params['ref']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ContentFile|Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{dir}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/readme/{dir}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'dir', 'ref')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Readme\CbDirRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Readme\CbDirRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Readme🌀CbDirRcb();
                                            }
                                            $operation = new Operation\Repos\GetReadmeInDirectory($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Readme\CbDirRcb::class], $params['owner'], $params['repo'], $params['dir'], $params['ref']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ContentFile|Schema\BasicError|Schema\ValidationError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'releases' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/releases' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases();
                                        }
                                        $operation = new Operation\Repos\ListReleases($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Release|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'assets' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{asset_id}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/releases/assets/{asset_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'asset_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Assets\CbAssetIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Assets\CbAssetIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀Assets🌀CbAssetIdRcb();
                                                }
                                                $operation = new Operation\Repos\GetReleaseAsset($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Assets\CbAssetIdRcb::class], $params['owner'], $params['repo'], $params['asset_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ReleaseAsset|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'latest' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/releases/latest' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Latest::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Latest::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀Latest();
                                            }
                                            $operation = new Operation\Repos\GetLatestRelease($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Latest::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Release {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'tags' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{tag}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/releases/tags/{tag}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'tag')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Tags\CbTagRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Tags\CbTagRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀Tags🌀CbTagRcb();
                                                }
                                                $operation = new Operation\Repos\GetReleaseByTag($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Tags\CbTagRcb::class], $params['owner'], $params['repo'], $params['tag']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Release|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{release_id}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/releases/{release_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'release_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀CbReleaseIdRcb();
                                            }
                                            $operation = new Operation\Repos\GetRelease($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb::class], $params['owner'], $params['repo'], $params['release_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Release|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'assets' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/releases/{release_id}/assets' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'release_id', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Assets::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Assets::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀CbReleaseIdRcb🌀Assets();
                                                }
                                                $operation = new Operation\Repos\ListReleaseAssets($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Assets::class], $params['owner'], $params['repo'], $params['release_id'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ReleaseAsset {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'reactions' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/releases/{release_id}/reactions' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'release_id', 'content', 'per_page', 'page')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Reactions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀CbReleaseIdRcb🌀Reactions();
                                                }
                                                $operation = new Operation\Reactions\ListForRelease($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Reactions::class], $params['owner'], $params['repo'], $params['release_id'], $params['content'], $params['per_page'], $params['page']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'secret-scanning' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'alerts' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/secret-scanning/alerts' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'state', 'secret_type', 'resolution', 'before', 'after', 'sort', 'direction', 'page', 'per_page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretScanning\Alerts::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretScanning\Alerts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀SecretScanning🌀Alerts();
                                            }
                                            $operation = new Operation\SecretScanning\ListAlertsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretScanning\Alerts::class], $params['owner'], $params['repo'], $params['state'], $params['secret_type'], $params['resolution'], $params['before'], $params['after'], $params['sort'], $params['direction'], $params['page'], $params['per_page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SecretScanningAlert|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{alert_number}' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'alert_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀SecretDashScanning🌀Alerts🌀CbAlertNumberRcb();
                                                }
                                                $operation = new Operation\SecretScanning\GetAlert($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb::class], $params['owner'], $params['repo'], $params['alert_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SecretScanningAlert|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'locations' == $pathChunks[7]) {
                                                if ('GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'alert_number', 'page', 'per_page')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb\Locations::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb\Locations::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀SecretDashScanning🌀Alerts🌀CbAlertNumberRcb🌀Locations();
                                                    }
                                                    $operation = new Operation\SecretScanning\ListLocationsForAlert($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb\Locations::class], $params['owner'], $params['repo'], $params['alert_number'], $params['page'], $params['per_page']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SecretScanningLocation|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'stargazers' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/stargazers' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stargazers::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stargazers::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Stargazers();
                                        }
                                        $operation = new Operation\Activity\ListStargazersForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stargazers::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Activity\ListStargazersForRepo\Response\Applicationjson\H200|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'stats' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'code_frequency' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/stats/code_frequency' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\CodeFrequency::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\CodeFrequency::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Stats🌀CodeFrequency();
                                            }
                                            $operation = new Operation\Repos\GetCodeFrequencyStats($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\CodeFrequency::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Repos\GetCodeFrequencyStats\Response\Applicationjson\H200|Schema\AuditLogEvent\Config {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'commit_activity' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/stats/commit_activity' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\CommitActivity::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\CommitActivity::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Stats🌀CommitActivity();
                                            }
                                            $operation = new Operation\Repos\GetCommitActivityStats($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\CommitActivity::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CommitActivity|Schema\AuditLogEvent\Config {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'contributors' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/stats/contributors' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\Contributors::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\Contributors::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Stats🌀Contributors();
                                            }
                                            $operation = new Operation\Repos\GetContributorsStats($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\Contributors::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ContributorActivity|Schema\AuditLogEvent\Config {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'participation' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/stats/participation' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\Participation::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\Participation::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Stats🌀Participation();
                                            }
                                            $operation = new Operation\Repos\GetParticipationStats($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\Participation::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ParticipationStats|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'punch_card' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/stats/punch_card' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\PunchCard::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\PunchCard::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Stats🌀PunchCard();
                                            }
                                            $operation = new Operation\Repos\GetPunchCardStats($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Stats\PunchCard::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Repos\GetCodeFrequencyStats\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'subscribers' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/subscribers' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscribers::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscribers::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Subscribers();
                                        }
                                        $operation = new Operation\Activity\ListWatchersForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscribers::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'subscription' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/subscription' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscription::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscription::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Subscription();
                                        }
                                        $operation = new Operation\Activity\GetRepoSubscription($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscription::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RepositorySubscription|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'tags' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/tags' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Tags();
                                        }
                                        $operation = new Operation\Repos\ListTags($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Tag {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'protection' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/tags/protection' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Tags🌀Protection();
                                            }
                                            $operation = new Operation\Repos\ListTagProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TagProtection|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'tarball' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{ref}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/tarball/{ref}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'ref')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Repos\DownloadTarballArchive($params['owner'], $params['repo'], $params['ref']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'teams' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/teams' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Teams::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Teams();
                                        }
                                        $operation = new Operation\Repos\ListTeams($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Teams::class], $params['owner'], $params['repo'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Team {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'topics' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/topics' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo', 'page', 'per_page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Topics::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Topics::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Topics();
                                        }
                                        $operation = new Operation\Repos\GetAllTopics($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Topics::class], $params['owner'], $params['repo'], $params['page'], $params['per_page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Topic|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'traffic' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'clones' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/traffic/clones' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'per')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Clones::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Clones::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Traffic🌀Clones();
                                            }
                                            $operation = new Operation\Repos\GetClones($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Clones::class], $params['owner'], $params['repo'], $params['per']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CloneTraffic|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'popular' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'paths' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/traffic/popular/paths' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Popular\Paths::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Popular\Paths::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Traffic🌀Popular🌀Paths();
                                                }
                                                $operation = new Operation\Repos\GetTopPaths($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Popular\Paths::class], $params['owner'], $params['repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ContentTraffic|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'referrers' == $pathChunks[6]) {
                                            if ('GET /repos/{owner}/{repo}/traffic/popular/referrers' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Popular\Referrers::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Popular\Referrers::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Traffic🌀Popular🌀Referrers();
                                                }
                                                $operation = new Operation\Repos\GetTopReferrers($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Popular\Referrers::class], $params['owner'], $params['repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ReferrerTraffic|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'views' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/traffic/views' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'per')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Views::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Views::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Traffic🌀Views();
                                            }
                                            $operation = new Operation\Repos\GetViews($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Traffic\Views::class], $params['owner'], $params['repo'], $params['per']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ViewTraffic|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'vulnerability-alerts' == $pathChunks[4]) {
                                    if ('GET /repos/{owner}/{repo}/vulnerability-alerts' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Repos\CheckVulnerabilityAlerts($params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'zipball' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{ref}' == $pathChunks[5]) {
                                        if ('GET /repos/{owner}/{repo}/zipball/{ref}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'ref')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Repos\DownloadZipballArchive($params['owner'], $params['repo'], $params['ref']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'repositories' == $pathChunks[1]) {
                        if ('GET /repositories' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array('since')) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\Repositories::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Repositories();
                            }
                            $operation = new Operation\Repos\ListPublic($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repositories::class], $params['since']);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MinimalRepository|Schema\ValidationError {
                                return $operation->createResponse($response);
                            });
                        } elseif (array_key_exists(2, $pathChunks) == true && '{repository_id}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'environments' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{environment_name}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'secrets' == $pathChunks[5]) {
                                        if ('GET /repositories/{repository_id}/environments/{environment_name}/secrets' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('repository_id', 'environment_name', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets::class] = $this->hydrators->getObjectMapperOperation🌀Repositories🌀CbRepositoryIdRcb🌀Environments🌀CbEnvironmentNameRcb🌀Secrets();
                                            }
                                            $operation = new Operation\Actions\ListEnvironmentSecrets($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets::class], $params['repository_id'], $params['environment_name'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListRepoSecrets\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'public-key' == $pathChunks[6]) {
                                            if ('GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('repository_id', 'environment_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\PublicDashKey::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\PublicDashKey::class] = $this->hydrators->getObjectMapperOperation🌀Repositories🌀CbRepositoryIdRcb🌀Environments🌀CbEnvironmentNameRcb🌀Secrets🌀PublicDashKey();
                                                }
                                                $operation = new Operation\Actions\GetEnvironmentPublicKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\PublicDashKey::class], $params['repository_id'], $params['environment_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsPublicKey {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{secret_name}' == $pathChunks[6]) {
                                            if ('GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('repository_id', 'environment_name', 'secret_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repositories🌀CbRepositoryIdRcb🌀Environments🌀CbEnvironmentNameRcb🌀Secrets🌀CbSecretNameRcb();
                                                }
                                                $operation = new Operation\Actions\GetEnvironmentSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\CbSecretNameRcb::class], $params['repository_id'], $params['environment_name'], $params['secret_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsSecret {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'variables' == $pathChunks[5]) {
                                        if ('GET /repositories/{repository_id}/environments/{environment_name}/variables' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('repository_id', 'environment_name', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables::class] = $this->hydrators->getObjectMapperOperation🌀Repositories🌀CbRepositoryIdRcb🌀Environments🌀CbEnvironmentNameRcb🌀Variables();
                                            }
                                            $operation = new Operation\Actions\ListEnvironmentVariables($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables::class], $params['repository_id'], $params['environment_name'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListRepoVariables\Response\Applicationjson\H200 {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{name}' == $pathChunks[6]) {
                                            if ('GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('repository_id', 'environment_name', 'name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables\CbNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repositories🌀CbRepositoryIdRcb🌀Environments🌀CbEnvironmentNameRcb🌀Variables🌀CbNameRcb();
                                                }
                                                $operation = new Operation\Actions\GetEnvironmentVariable($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables\CbNameRcb::class], $params['repository_id'], $params['environment_name'], $params['name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsVariable {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'scim' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'v2' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'organizations' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{org}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'Users' == $pathChunks[5]) {
                                        if ('GET /scim/v2/organizations/{org}/Users' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'startIndex', 'count', 'filter')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users::class] = $this->hydrators->getObjectMapperOperation🌀Scim🌀V2🌀Organizations🌀CbOrgRcb🌀Users();
                                            }
                                            $operation = new Operation\Scim\ListProvisionedIdentities($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users::class], $params['org'], $params['startIndex'], $params['count'], $params['filter']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ScimUserList|Schema\ScimError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{scim_user_id}' == $pathChunks[6]) {
                                            if ('GET /scim/v2/organizations/{org}/Users/{scim_user_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'scim_user_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users\CbScimUserIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users\CbScimUserIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Scim🌀V2🌀Organizations🌀CbOrgRcb🌀Users🌀CbScimUserIdRcb();
                                                }
                                                $operation = new Operation\Scim\GetProvisioningInformationForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users\CbScimUserIdRcb::class], $params['org'], $params['scim_user_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ScimUser|Schema\ScimError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'search' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'code' == $pathChunks[2]) {
                            if ('GET /search/code' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('q', 'sort', 'order', 'per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Search\Code::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Search\Code::class] = $this->hydrators->getObjectMapperOperation🌀Search🌀Code();
                                }
                                $operation = new Operation\Search\Code($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Search\Code::class], $params['q'], $params['sort'], $params['order'], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Search\Code\Response\Applicationjson\H200|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503|Schema\ValidationError|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'commits' == $pathChunks[2]) {
                            if ('GET /search/commits' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('q', 'sort', 'order', 'per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Search\Commits::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Search\Commits::class] = $this->hydrators->getObjectMapperOperation🌀Search🌀Commits();
                                }
                                $operation = new Operation\Search\Commits($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Search\Commits::class], $params['q'], $params['sort'], $params['order'], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Search\Commits\Response\Applicationjson\H200 {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'issues' == $pathChunks[2]) {
                            if ('GET /search/issues' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('q', 'sort', 'order', 'per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Search\Issues::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Search\Issues::class] = $this->hydrators->getObjectMapperOperation🌀Search🌀Issues();
                                }
                                $operation = new Operation\Search\IssuesAndPullRequests($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Search\Issues::class], $params['q'], $params['sort'], $params['order'], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Search\IssuesAndPullRequests\Response\Applicationjson\H200|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503|Schema\ValidationError|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'labels' == $pathChunks[2]) {
                            if ('GET /search/labels' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('repository_id', 'q', 'sort', 'order', 'per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Search\Labels::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Search\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Search🌀Labels();
                                }
                                $operation = new Operation\Search\Labels($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Search\Labels::class], $params['repository_id'], $params['q'], $params['sort'], $params['order'], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Search\Labels\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'repositories' == $pathChunks[2]) {
                            if ('GET /search/repositories' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('q', 'sort', 'order', 'per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Search\Repositories::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Search\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Search🌀Repositories();
                                }
                                $operation = new Operation\Search\Repos($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Search\Repositories::class], $params['q'], $params['sort'], $params['order'], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Search\Repos\Response\Applicationjson\H200|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503|Schema\ValidationError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'topics' == $pathChunks[2]) {
                            if ('GET /search/topics' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('q', 'per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Search\Topics::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Search\Topics::class] = $this->hydrators->getObjectMapperOperation🌀Search🌀Topics();
                                }
                                $operation = new Operation\Search\Topics($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Search\Topics::class], $params['q'], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Search\Topics\Response\Applicationjson\H200 {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'users' == $pathChunks[2]) {
                            if ('GET /search/users' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('q', 'sort', 'order', 'per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Search\Users::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Search\Users::class] = $this->hydrators->getObjectMapperOperation🌀Search🌀Users();
                                }
                                $operation = new Operation\Search\Users($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Search\Users::class], $params['q'], $params['sort'], $params['order'], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Search\Users\Response\Applicationjson\H200|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503|Schema\ValidationError {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'teams' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{team_id}' == $pathChunks[2]) {
                            if ('GET /teams/{team_id}' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('team_id')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb();
                                }
                                $operation = new Operation\Teams\GetLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb::class], $params['team_id']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamFull|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && 'discussions' == $pathChunks[3]) {
                                if ('GET /teams/{team_id}/discussions' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('team_id', 'direction', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions();
                                    }
                                    $operation = new Operation\Teams\ListDiscussionsLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions::class], $params['team_id'], $params['direction'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamDiscussion {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{discussion_number}' == $pathChunks[4]) {
                                    if ('GET /teams/{team_id}/discussions/{discussion_number}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('team_id', 'discussion_number')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb();
                                        }
                                        $operation = new Operation\Teams\GetDiscussionLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb::class], $params['team_id'], $params['discussion_number']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamDiscussion {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'comments' == $pathChunks[5]) {
                                        if ('GET /teams/{team_id}/discussions/{discussion_number}/comments' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('team_id', 'discussion_number', 'direction', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments();
                                            }
                                            $operation = new Operation\Teams\ListDiscussionCommentsLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments::class], $params['team_id'], $params['discussion_number'], $params['direction'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamDiscussionComment {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{comment_number}' == $pathChunks[6]) {
                                            if ('GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('team_id', 'discussion_number', 'comment_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments🌀CbCommentNumberRcb();
                                                }
                                                $operation = new Operation\Teams\GetDiscussionCommentLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class], $params['team_id'], $params['discussion_number'], $params['comment_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamDiscussionComment {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'reactions' == $pathChunks[7]) {
                                                if ('GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('team_id', 'discussion_number', 'comment_number', 'content', 'per_page', 'page')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments🌀CbCommentNumberRcb🌀Reactions();
                                                    }
                                                    $operation = new Operation\Reactions\ListForTeamDiscussionCommentLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class], $params['team_id'], $params['discussion_number'], $params['comment_number'], $params['content'], $params['per_page'], $params['page']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'reactions' == $pathChunks[5]) {
                                        if ('GET /teams/{team_id}/discussions/{discussion_number}/reactions' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('team_id', 'discussion_number', 'content', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Reactions();
                                            }
                                            $operation = new Operation\Reactions\ListForTeamDiscussionLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Reactions::class], $params['team_id'], $params['discussion_number'], $params['content'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'invitations' == $pathChunks[3]) {
                                if ('GET /teams/{team_id}/invitations' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('team_id', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Invitations::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Invitations::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Invitations();
                                    }
                                    $operation = new Operation\Teams\ListPendingInvitationsLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Invitations::class], $params['team_id'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationInvitation {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'members' == $pathChunks[3]) {
                                if ('GET /teams/{team_id}/members' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('team_id', 'role', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Members::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Members::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Members();
                                    }
                                    $operation = new Operation\Teams\ListMembersLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Members::class], $params['team_id'], $params['role'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('GET /teams/{team_id}/members/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('team_id', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Teams\GetMemberLegacy($params['team_id'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'memberships' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('GET /teams/{team_id}/memberships/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('team_id', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Memberships\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Memberships\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Memberships🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Teams\GetMembershipForUserLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Memberships\CbUsernameRcb::class], $params['team_id'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamMembership|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'projects' == $pathChunks[3]) {
                                if ('GET /teams/{team_id}/projects' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('team_id', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Projects::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Projects::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Projects();
                                    }
                                    $operation = new Operation\Teams\ListProjectsLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Projects::class], $params['team_id'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamProject|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{project_id}' == $pathChunks[4]) {
                                    if ('GET /teams/{team_id}/projects/{project_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('team_id', 'project_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Projects🌀CbProjectIdRcb();
                                        }
                                        $operation = new Operation\Teams\CheckPermissionsForProjectLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class], $params['team_id'], $params['project_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamProject {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'repos' == $pathChunks[3]) {
                                if ('GET /teams/{team_id}/repos' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('team_id', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Repos::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Repos::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Repos();
                                    }
                                    $operation = new Operation\Teams\ListReposLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Repos::class], $params['team_id'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MinimalRepository|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{owner}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{repo}' == $pathChunks[5]) {
                                        if ('GET /teams/{team_id}/repos/{owner}/{repo}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('team_id', 'owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Repos\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Repos\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Repos🌀CbOwnerRcb🌀CbRepoRcb();
                                            }
                                            $operation = new Operation\Teams\CheckPermissionsForRepoLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Repos\CbOwnerRcb\CbRepoRcb::class], $params['team_id'], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamRepository {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'team-sync' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'group-mappings' == $pathChunks[4]) {
                                    if ('GET /teams/{team_id}/team-sync/group-mappings' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('team_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\TeamDashSync\GroupDashMappings::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\TeamDashSync\GroupDashMappings::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀TeamDashSync🌀GroupDashMappings();
                                        }
                                        $operation = new Operation\Teams\ListIdpGroupsForLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\TeamDashSync\GroupDashMappings::class], $params['team_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GroupMapping|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'teams' == $pathChunks[3]) {
                                if ('GET /teams/{team_id}/teams' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('team_id', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Teams::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Teams();
                                    }
                                    $operation = new Operation\Teams\ListChildLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Teams::class], $params['team_id'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Team|Schema\BasicError|Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'user' == $pathChunks[1]) {
                        if ('GET /user' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array()) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\User::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\User::class] = $this->hydrators->getObjectMapperOperation🌀User();
                            }
                            $operation = new Operation\Users\GetAuthenticated($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User::class]);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Users\GetAuthenticated\Response\Applicationjson\H200|Schema\BasicError {
                                return $operation->createResponse($response);
                            });
                        } elseif (array_key_exists(2, $pathChunks) == true && 'blocks' == $pathChunks[2]) {
                            if ('GET /user/blocks' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Blocks::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Blocks::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Blocks();
                                }
                                $operation = new Operation\Users\ListBlockedByAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Blocks::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && '{username}' == $pathChunks[3]) {
                                if ('GET /user/blocks/{username}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\Blocks\CbUsernameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Blocks\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Blocks🌀CbUsernameRcb();
                                    }
                                    $operation = new Operation\Users\CheckBlocked($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Blocks\CbUsernameRcb::class], $params['username']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'codespaces' == $pathChunks[2]) {
                            if ('GET /user/codespaces' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('repository_id', 'per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Codespaces::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Codespaces::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces();
                                }
                                $operation = new Operation\Codespaces\ListForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces::class], $params['repository_id'], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Codespaces\ListInOrganization\Response\Applicationjson\H200|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && 'secrets' == $pathChunks[3]) {
                                if ('GET /user/codespaces/secrets' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\Codespaces\Secrets::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀Secrets();
                                    }
                                    $operation = new Operation\Codespaces\ListSecretsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets::class], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Codespaces\ListSecretsForAuthenticatedUser\Response\Applicationjson\H200 {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && 'public-key' == $pathChunks[4]) {
                                    if ('GET /user/codespaces/secrets/public-key' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array()) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Codespaces\Secrets\PublicKey::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\PublicKey::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀Secrets🌀PublicKey();
                                        }
                                        $operation = new Operation\Codespaces\GetPublicKeyForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\PublicKey::class]);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodespacesUserPublicKey {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && '{secret_name}' == $pathChunks[4]) {
                                    if ('GET /user/codespaces/secrets/{secret_name}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('secret_name')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀Secrets🌀CbSecretNameRcb();
                                        }
                                        $operation = new Operation\Codespaces\GetSecretForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb::class], $params['secret_name']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodespacesSecret {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'repositories' == $pathChunks[5]) {
                                        if ('GET /user/codespaces/secrets/{secret_name}/repositories' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('secret_name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀Secrets🌀CbSecretNameRcb🌀Repositories();
                                            }
                                            $operation = new Operation\Codespaces\ListRepositoriesForSecretForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories::class], $params['secret_name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Actions\ListSelectedReposForOrgSecret\Response\Applicationjson\H200|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && '{codespace_name}' == $pathChunks[3]) {
                                if ('GET /user/codespaces/{codespace_name}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('codespace_name')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb();
                                    }
                                    $operation = new Operation\Codespaces\GetForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class], $params['codespace_name']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Codespace|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && 'exports' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{export_id}' == $pathChunks[5]) {
                                        if ('GET /user/codespaces/{codespace_name}/exports/{export_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('codespace_name', 'export_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Exports\CbExportIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Exports\CbExportIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb🌀Exports🌀CbExportIdRcb();
                                            }
                                            $operation = new Operation\Codespaces\GetExportDetailsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Exports\CbExportIdRcb::class], $params['codespace_name'], $params['export_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodespaceExportDetails|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'machines' == $pathChunks[4]) {
                                    if ('GET /user/codespaces/{codespace_name}/machines' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('codespace_name')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Machines::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Machines::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb🌀Machines();
                                        }
                                        $operation = new Operation\Codespaces\CodespaceMachinesForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Machines::class], $params['codespace_name']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Codespaces\RepoMachinesForAuthenticatedUser\Response\Applicationjson\H200|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'emails' == $pathChunks[2]) {
                            if ('GET /user/emails' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Emails::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Emails::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Emails();
                                }
                                $operation = new Operation\Users\ListEmailsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Emails::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Email|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'followers' == $pathChunks[2]) {
                            if ('GET /user/followers' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Followers::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Followers::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Followers();
                                }
                                $operation = new Operation\Users\ListFollowersForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Followers::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'following' == $pathChunks[2]) {
                            if ('GET /user/following' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Following::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Following::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Following();
                                }
                                $operation = new Operation\Users\ListFollowedByAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Following::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && '{username}' == $pathChunks[3]) {
                                if ('GET /user/following/{username}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\Following\CbUsernameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Following\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Following🌀CbUsernameRcb();
                                    }
                                    $operation = new Operation\Users\CheckPersonIsFollowedByAuthenticated($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Following\CbUsernameRcb::class], $params['username']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'gpg_keys' == $pathChunks[2]) {
                            if ('GET /user/gpg_keys' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\GpgKeys::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\GpgKeys::class] = $this->hydrators->getObjectMapperOperation🌀User🌀GpgKeys();
                                }
                                $operation = new Operation\Users\ListGpgKeysForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\GpgKeys::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GpgKey|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && '{gpg_key_id}' == $pathChunks[3]) {
                                if ('GET /user/gpg_keys/{gpg_key_id}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('gpg_key_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\GpgKeys\CbGpgKeyIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\GpgKeys\CbGpgKeyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀GpgKeys🌀CbGpgKeyIdRcb();
                                    }
                                    $operation = new Operation\Users\GetGpgKeyForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\GpgKeys\CbGpgKeyIdRcb::class], $params['gpg_key_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GpgKey|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'installations' == $pathChunks[2]) {
                            if ('GET /user/installations' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Installations::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Installations::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Installations();
                                }
                                $operation = new Operation\Apps\ListInstallationsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Installations::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Orgs\ListAppInstallations\Response\Applicationjson\H200|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && '{installation_id}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'repositories' == $pathChunks[4]) {
                                    if ('GET /user/installations/{installation_id}/repositories' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('installation_id', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Installations🌀CbInstallationIdRcb🌀Repositories();
                                        }
                                        $operation = new Operation\Apps\ListInstallationReposForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories::class], $params['installation_id'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Apps\ListInstallationReposForAuthenticatedUser\Response\Applicationjson\H200|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'interaction-limits' == $pathChunks[2]) {
                            if ('GET /user/interaction-limits' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array()) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\InteractionLimits::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\InteractionLimits::class] = $this->hydrators->getObjectMapperOperation🌀User🌀InteractionLimits();
                                }
                                $operation = new Operation\Interactions\GetRestrictionsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\InteractionLimits::class]);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Interactions\GetRestrictionsForOrg\Response\Applicationjson\H200 {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'issues' == $pathChunks[2]) {
                            if ('GET /user/issues' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('labels', 'since', 'filter', 'state', 'sort', 'direction', 'per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Issues::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Issues::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Issues();
                                }
                                $operation = new Operation\Issues\ListForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Issues::class], $params['labels'], $params['since'], $params['filter'], $params['state'], $params['sort'], $params['direction'], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Issue|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'keys' == $pathChunks[2]) {
                            if ('GET /user/keys' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Keys::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Keys::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Keys();
                                }
                                $operation = new Operation\Users\ListPublicSshKeysForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Keys::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Key|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && '{key_id}' == $pathChunks[3]) {
                                if ('GET /user/keys/{key_id}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('key_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\Keys\CbKeyIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Keys\CbKeyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Keys🌀CbKeyIdRcb();
                                    }
                                    $operation = new Operation\Users\GetPublicSshKeyForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Keys\CbKeyIdRcb::class], $params['key_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Key|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'marketplace_purchases' == $pathChunks[2]) {
                            if ('GET /user/marketplace_purchases' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\MarketplacePurchases::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\MarketplacePurchases::class] = $this->hydrators->getObjectMapperOperation🌀User🌀MarketplacePurchases();
                                }
                                $operation = new Operation\Apps\ListSubscriptionsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\MarketplacePurchases::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\UserMarketplacePurchase|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && 'stubbed' == $pathChunks[3]) {
                                if ('GET /user/marketplace_purchases/stubbed' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\MarketplacePurchases\Stubbed::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\MarketplacePurchases\Stubbed::class] = $this->hydrators->getObjectMapperOperation🌀User🌀MarketplacePurchases🌀Stubbed();
                                    }
                                    $operation = new Operation\Apps\ListSubscriptionsForAuthenticatedUserStubbed($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\MarketplacePurchases\Stubbed::class], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\UserMarketplacePurchase|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'memberships' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'orgs' == $pathChunks[3]) {
                                if ('GET /user/memberships/orgs' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('state', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\Memberships\Orgs::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Memberships\Orgs::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Memberships🌀Orgs();
                                    }
                                    $operation = new Operation\Orgs\ListMembershipsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Memberships\Orgs::class], $params['state'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrgMembership|Schema\BasicError|Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{org}' == $pathChunks[4]) {
                                    if ('GET /user/memberships/orgs/{org}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Memberships\Orgs\CbOrgRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Memberships\Orgs\CbOrgRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Memberships🌀Orgs🌀CbOrgRcb();
                                        }
                                        $operation = new Operation\Orgs\GetMembershipForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Memberships\Orgs\CbOrgRcb::class], $params['org']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrgMembership|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'migrations' == $pathChunks[2]) {
                            if ('GET /user/migrations' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Migrations::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Migrations::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Migrations();
                                }
                                $operation = new Operation\Migrations\ListForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Migrations::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Migration|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && '{migration_id}' == $pathChunks[3]) {
                                if ('GET /user/migrations/{migration_id}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('migration_id', 'exclude')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\Migrations\CbMigrationIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Migrations🌀CbMigrationIdRcb();
                                    }
                                    $operation = new Operation\Migrations\GetStatusForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb::class], $params['migration_id'], $params['exclude']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Migration|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && 'archive' == $pathChunks[4]) {
                                    if ('GET /user/migrations/{migration_id}/archive' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('migration_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Archive::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Archive::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Migrations🌀CbMigrationIdRcb🌀Archive();
                                        }
                                        $operation = new Operation\Migrations\GetArchiveForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Archive::class], $params['migration_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'repositories' == $pathChunks[4]) {
                                    if ('GET /user/migrations/{migration_id}/repositories' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('migration_id', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Repositories::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Migrations🌀CbMigrationIdRcb🌀Repositories();
                                        }
                                        $operation = new Operation\Migrations\ListReposForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Repositories::class], $params['migration_id'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MinimalRepository|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'orgs' == $pathChunks[2]) {
                            if ('GET /user/orgs' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Orgs::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Orgs::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Orgs();
                                }
                                $operation = new Operation\Orgs\ListForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Orgs::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationSimple|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'packages' == $pathChunks[2]) {
                            if ('GET /user/packages' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('package_type', 'visibility')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Packages::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Packages::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Packages();
                                }
                                $operation = new Operation\Packages\ListPackagesForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Packages::class], $params['package_type'], $params['visibility']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Package {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && '{package_type}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{package_name}' == $pathChunks[4]) {
                                    if ('GET /user/packages/{package_type}/{package_name}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('package_type', 'package_name')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb();
                                        }
                                        $operation = new Operation\Packages\GetPackageForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb::class], $params['package_type'], $params['package_name']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Package {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'versions' == $pathChunks[5]) {
                                        if ('GET /user/packages/{package_type}/{package_name}/versions' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('package_type', 'package_name', 'page', 'per_page', 'state')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions();
                                            }
                                            $operation = new Operation\Packages\GetAllPackageVersionsForPackageOwnedByAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class], $params['package_type'], $params['package_name'], $params['page'], $params['per_page'], $params['state']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PackageVersion|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{package_version_id}' == $pathChunks[6]) {
                                            if ('GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('package_type', 'package_name', 'package_version_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb();
                                                }
                                                $operation = new Operation\Packages\GetPackageVersionForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class], $params['package_type'], $params['package_name'], $params['package_version_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PackageVersion {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'public_emails' == $pathChunks[2]) {
                            if ('GET /user/public_emails' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\PublicEmails::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\PublicEmails::class] = $this->hydrators->getObjectMapperOperation🌀User🌀PublicEmails();
                                }
                                $operation = new Operation\Users\ListPublicEmailsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\PublicEmails::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Email|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'repos' == $pathChunks[2]) {
                            if ('GET /user/repos' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('direction', 'since', 'before', 'visibility', 'affiliation', 'type', 'sort', 'per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Repos::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Repos::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Repos();
                                }
                                $operation = new Operation\Repos\ListForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Repos::class], $params['direction'], $params['since'], $params['before'], $params['visibility'], $params['affiliation'], $params['type'], $params['sort'], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Repository|Schema\ValidationError|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'repository_invitations' == $pathChunks[2]) {
                            if ('GET /user/repository_invitations' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\RepositoryInvitations::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\RepositoryInvitations::class] = $this->hydrators->getObjectMapperOperation🌀User🌀RepositoryInvitations();
                                }
                                $operation = new Operation\Repos\ListInvitationsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\RepositoryInvitations::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RepositoryInvitation|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'ssh_signing_keys' == $pathChunks[2]) {
                            if ('GET /user/ssh_signing_keys' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\SshSigningKeys::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\SshSigningKeys::class] = $this->hydrators->getObjectMapperOperation🌀User🌀SshSigningKeys();
                                }
                                $operation = new Operation\Users\ListSshSigningKeysForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\SshSigningKeys::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SshSigningKey|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && '{ssh_signing_key_id}' == $pathChunks[3]) {
                                if ('GET /user/ssh_signing_keys/{ssh_signing_key_id}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('ssh_signing_key_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\SshSigningKeys\CbSshSigningKeyIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\SshSigningKeys\CbSshSigningKeyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀SshSigningKeys🌀CbSshSigningKeyIdRcb();
                                    }
                                    $operation = new Operation\Users\GetSshSigningKeyForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\SshSigningKeys\CbSshSigningKeyIdRcb::class], $params['ssh_signing_key_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SshSigningKey|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'starred' == $pathChunks[2]) {
                            if ('GET /user/starred' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('sort', 'direction', 'per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Starred::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Starred::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Starred();
                                }
                                $operation = new Operation\Activity\ListReposStarredByAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Starred::class], $params['sort'], $params['direction'], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Repository|Schema\StarredRepository|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && '{owner}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{repo}' == $pathChunks[4]) {
                                    if ('GET /user/starred/{owner}/{repo}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Starred🌀CbOwnerRcb🌀CbRepoRcb();
                                        }
                                        $operation = new Operation\Activity\CheckRepoIsStarredByAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'subscriptions' == $pathChunks[2]) {
                            if ('GET /user/subscriptions' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Subscriptions::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Subscriptions::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Subscriptions();
                                }
                                $operation = new Operation\Activity\ListWatchedReposForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Subscriptions::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MinimalRepository|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'teams' == $pathChunks[2]) {
                            if ('GET /user/teams' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('per_page', 'page')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Teams::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Teams::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Teams();
                                }
                                $operation = new Operation\Teams\ListForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Teams::class], $params['per_page'], $params['page']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamFull|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'users' == $pathChunks[1]) {
                        if ('GET /users' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array('since', 'per_page')) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\Users::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Users::class] = $this->hydrators->getObjectMapperOperation🌀Users();
                            }
                            $operation = new Operation\Users\List_($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users::class], $params['since'], $params['per_page']);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser {
                                return $operation->createResponse($response);
                            });
                        } elseif (array_key_exists(2, $pathChunks) == true && '{username}' == $pathChunks[2]) {
                            if ('GET /users/{username}' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('username')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb();
                                }
                                $operation = new Operation\Users\GetByUsername($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb::class], $params['username']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Users\GetAuthenticated\Response\Applicationjson\H200|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && 'events' == $pathChunks[3]) {
                                if ('GET /users/{username}/events' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Events::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Events::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Events();
                                    }
                                    $operation = new Operation\Activity\ListEventsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Events::class], $params['username'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Event {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && 'orgs' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{org}' == $pathChunks[5]) {
                                        if ('GET /users/{username}/events/orgs/{org}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('username', 'org', 'per_page', 'page')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Events\Orgs\CbOrgRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Events\Orgs\CbOrgRcb::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Events🌀Orgs🌀CbOrgRcb();
                                            }
                                            $operation = new Operation\Activity\ListOrgEventsForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Events\Orgs\CbOrgRcb::class], $params['username'], $params['org'], $params['per_page'], $params['page']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Event {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'public' == $pathChunks[4]) {
                                    if ('GET /users/{username}/events/public' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('username', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Events\Public_::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Events\Public_::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Events🌀Public_();
                                        }
                                        $operation = new Operation\Activity\ListPublicEventsForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Events\Public_::class], $params['username'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Event {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'followers' == $pathChunks[3]) {
                                if ('GET /users/{username}/followers' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Followers::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Followers::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Followers();
                                    }
                                    $operation = new Operation\Users\ListFollowersForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Followers::class], $params['username'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'following' == $pathChunks[3]) {
                                if ('GET /users/{username}/following' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Following::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Following::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Following();
                                    }
                                    $operation = new Operation\Users\ListFollowingForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Following::class], $params['username'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{target_user}' == $pathChunks[4]) {
                                    if ('GET /users/{username}/following/{target_user}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('username', 'target_user')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Users\CheckFollowingForUser($params['username'], $params['target_user']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'gists' == $pathChunks[3]) {
                                if ('GET /users/{username}/gists' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username', 'since', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Gists::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Gists::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Gists();
                                    }
                                    $operation = new Operation\Gists\ListForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Gists::class], $params['username'], $params['since'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BaseGist|Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'gpg_keys' == $pathChunks[3]) {
                                if ('GET /users/{username}/gpg_keys' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\GpgKeys::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\GpgKeys::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀GpgKeys();
                                    }
                                    $operation = new Operation\Users\ListGpgKeysForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\GpgKeys::class], $params['username'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GpgKey {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'hovercard' == $pathChunks[3]) {
                                if ('GET /users/{username}/hovercard' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username', 'subject_type', 'subject_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Hovercard::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Hovercard::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Hovercard();
                                    }
                                    $operation = new Operation\Users\GetContextForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Hovercard::class], $params['username'], $params['subject_type'], $params['subject_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Hovercard|Schema\BasicError|Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'installation' == $pathChunks[3]) {
                                if ('GET /users/{username}/installation' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Installation::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Installation::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Installation();
                                    }
                                    $operation = new Operation\Apps\GetUserInstallation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Installation::class], $params['username']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Installation {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'keys' == $pathChunks[3]) {
                                if ('GET /users/{username}/keys' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Keys::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Keys::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Keys();
                                    }
                                    $operation = new Operation\Users\ListPublicKeysForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Keys::class], $params['username'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\KeySimple {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'orgs' == $pathChunks[3]) {
                                if ('GET /users/{username}/orgs' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Orgs::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Orgs::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Orgs();
                                    }
                                    $operation = new Operation\Orgs\ListForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Orgs::class], $params['username'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationSimple {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'packages' == $pathChunks[3]) {
                                if ('GET /users/{username}/packages' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('package_type', 'visibility', 'username')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Packages::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Packages();
                                    }
                                    $operation = new Operation\Packages\ListPackagesForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages::class], $params['package_type'], $params['visibility'], $params['username']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Package|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{package_type}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{package_name}' == $pathChunks[5]) {
                                        if ('GET /users/{username}/packages/{package_type}/{package_name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('package_type', 'package_name', 'username')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb();
                                            }
                                            $operation = new Operation\Packages\GetPackageForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class], $params['package_type'], $params['package_name'], $params['username']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Package {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'versions' == $pathChunks[6]) {
                                            if ('GET /users/{username}/packages/{package_type}/{package_name}/versions' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('package_type', 'package_name', 'username')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions();
                                                }
                                                $operation = new Operation\Packages\GetAllPackageVersionsForPackageOwnedByUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions::class], $params['package_type'], $params['package_name'], $params['username']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PackageVersion|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{package_version_id}' == $pathChunks[7]) {
                                                if ('GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('package_type', 'package_name', 'package_version_id', 'username')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb();
                                                    }
                                                    $operation = new Operation\Packages\GetPackageVersionForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class], $params['package_type'], $params['package_name'], $params['package_version_id'], $params['username']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PackageVersion {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'projects' == $pathChunks[3]) {
                                if ('GET /users/{username}/projects' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username', 'state', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Projects::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Projects::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Projects();
                                    }
                                    $operation = new Operation\Projects\ListForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Projects::class], $params['username'], $params['state'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Project|Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'received_events' == $pathChunks[3]) {
                                if ('GET /users/{username}/received_events' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\ReceivedEvents::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\ReceivedEvents::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀ReceivedEvents();
                                    }
                                    $operation = new Operation\Activity\ListReceivedEventsForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\ReceivedEvents::class], $params['username'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Event {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && 'public' == $pathChunks[4]) {
                                    if ('GET /users/{username}/received_events/public' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('username', 'per_page', 'page')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\ReceivedEvents\Public_::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\ReceivedEvents\Public_::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀ReceivedEvents🌀Public_();
                                        }
                                        $operation = new Operation\Activity\ListReceivedPublicEventsForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\ReceivedEvents\Public_::class], $params['username'], $params['per_page'], $params['page']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Event {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'repos' == $pathChunks[3]) {
                                if ('GET /users/{username}/repos' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username', 'direction', 'type', 'sort', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Repos::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Repos::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Repos();
                                    }
                                    $operation = new Operation\Repos\ListForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Repos::class], $params['username'], $params['direction'], $params['type'], $params['sort'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MinimalRepository {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'settings' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'billing' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'actions' == $pathChunks[5]) {
                                        if ('GET /users/{username}/settings/billing/actions' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('username')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\Actions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\Actions::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Settings🌀Billing🌀Actions();
                                            }
                                            $operation = new Operation\Billing\GetGithubActionsBillingUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\Actions::class], $params['username']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsBillingUsage {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'packages' == $pathChunks[5]) {
                                        if ('GET /users/{username}/settings/billing/packages' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('username')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\Packages::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\Packages::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Settings🌀Billing🌀Packages();
                                            }
                                            $operation = new Operation\Billing\GetGithubPackagesBillingUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\Packages::class], $params['username']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PackagesBillingUsage {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'shared-storage' == $pathChunks[5]) {
                                        if ('GET /users/{username}/settings/billing/shared-storage' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('username')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\SharedStorage::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\SharedStorage::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Settings🌀Billing🌀SharedStorage();
                                            }
                                            $operation = new Operation\Billing\GetSharedStorageBillingUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Settings\Billing\SharedStorage::class], $params['username']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CombinedBillingUsage {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'ssh_signing_keys' == $pathChunks[3]) {
                                if ('GET /users/{username}/ssh_signing_keys' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\SshSigningKeys::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\SshSigningKeys::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀SshSigningKeys();
                                    }
                                    $operation = new Operation\Users\ListSshSigningKeysForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\SshSigningKeys::class], $params['username'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SshSigningKey {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'starred' == $pathChunks[3]) {
                                if ('GET /users/{username}/starred' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username', 'sort', 'direction', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Starred::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Starred::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Starred();
                                    }
                                    $operation = new Operation\Activity\ListReposStarredByUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Starred::class], $params['username'], $params['sort'], $params['direction'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Activity\ListReposStarredByUser\Response\Applicationjson\H200 {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'subscriptions' == $pathChunks[3]) {
                                if ('GET /users/{username}/subscriptions' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username', 'per_page', 'page')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Subscriptions::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Subscriptions::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Subscriptions();
                                    }
                                    $operation = new Operation\Activity\ListReposWatchedByUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Subscriptions::class], $params['username'], $params['per_page'], $params['page']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MinimalRepository {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'versions' == $pathChunks[1]) {
                        if ('GET /versions' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array()) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\Versions::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Versions::class] = $this->hydrators->getObjectMapperOperation🌀Versions();
                            }
                            $operation = new Operation\Meta\GetAllVersions($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Versions::class]);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Meta\GetAllVersions\Response\Applicationjson\H200|Schema\BasicError {
                                return $operation->createResponse($response);
                            });
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'zen' == $pathChunks[1]) {
                        if ('GET /zen' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array()) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\Zen::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Zen::class] = $this->hydrators->getObjectMapperOperation🌀Zen();
                            }
                            $operation = new Operation\Meta\GetZen($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Zen::class]);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WebHookHeader\UserAgent {
                                return $operation->createResponse($response);
                            });
                        }
                    }
                }
                break;
            case 'POST':
                if (array_key_exists(0, $pathChunks) == true && '' == $pathChunks[0]) {
                    if (array_key_exists(1, $pathChunks) == true && 'app-manifests' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{code}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'conversions' == $pathChunks[3]) {
                                if ('POST /app-manifests/{code}/conversions' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('code')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\AppManifests\CbCodeRcb\Conversions::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\AppManifests\CbCodeRcb\Conversions::class] = $this->hydrators->getObjectMapperOperation🌀AppManifests🌀CbCodeRcb🌀Conversions();
                                    }
                                    $operation = new Operation\Apps\CreateFromManifest($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\AppManifests\CbCodeRcb\Conversions::class], $params['code']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Apps\CreateFromManifest\Response\Applicationjson\H201|Schema\BasicError|Schema\ValidationErrorSimple {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'app' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'hook' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'deliveries' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{delivery_id}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'attempts' == $pathChunks[5]) {
                                        if ('POST /app/hook/deliveries/{delivery_id}/attempts' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('delivery_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\App\Hook\Deliveries\CbDeliveryIdRcb\Attempts::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\App\Hook\Deliveries\CbDeliveryIdRcb\Attempts::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Hook🌀Deliveries🌀CbDeliveryIdRcb🌀Attempts();
                                            }
                                            $operation = new Operation\Apps\RedeliverWebhookDelivery($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Hook\Deliveries\CbDeliveryIdRcb\Attempts::class], $params['delivery_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AuditLogEvent\Config|Schema\BasicError|Schema\ScimError|Schema\ValidationError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'installations' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{installation_id}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'access_tokens' == $pathChunks[4]) {
                                    if ('POST /app/installations/{installation_id}/access_tokens' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('installation_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\App\Installations\CbInstallationIdRcb\AccessTokens::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb\AccessTokens::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Installations🌀CbInstallationIdRcb🌀AccessTokens();
                                        }
                                        $operation = new Operation\Apps\CreateInstallationAccessToken($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb\AccessTokens::class], $params['installation_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\InstallationToken|Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'applications' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{client_id}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'token' == $pathChunks[3]) {
                                if ('POST /applications/{client_id}/token' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('client_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Applications\CbClientIdRcb\Token::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Token::class] = $this->hydrators->getObjectMapperOperation🌀Applications🌀CbClientIdRcb🌀Token();
                                    }
                                    $operation = new Operation\Apps\CheckToken($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Token::class], $params['client_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Authorization|Schema\ValidationError|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && 'scoped' == $pathChunks[4]) {
                                    if ('POST /applications/{client_id}/token/scoped' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('client_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Applications\CbClientIdRcb\Token\Scoped::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Token\Scoped::class] = $this->hydrators->getObjectMapperOperation🌀Applications🌀CbClientIdRcb🌀Token🌀Scoped();
                                        }
                                        $operation = new Operation\Apps\ScopeToken($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Token\Scoped::class], $params['client_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Authorization|Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'enterprises' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{enterprise}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'actions' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'runner-groups' == $pathChunks[4]) {
                                    if ('POST /enterprises/{enterprise}/actions/runner-groups' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('enterprise')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerGroups::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerGroups::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀RunnerGroups();
                                        }
                                        $operation = new Operation\EnterpriseAdmin\CreateSelfHostedRunnerGroupForEnterprise($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerGroups::class], $params['enterprise']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RunnerGroupsEnterprise {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'runners' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'registration-token' == $pathChunks[5]) {
                                        if ('POST /enterprises/{enterprise}/actions/runners/registration-token' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\RegistrationToken::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\RegistrationToken::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀Runners🌀RegistrationToken();
                                            }
                                            $operation = new Operation\EnterpriseAdmin\CreateRegistrationTokenForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\RegistrationToken::class], $params['enterprise']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AuthenticationToken {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'remove-token' == $pathChunks[5]) {
                                        if ('POST /enterprises/{enterprise}/actions/runners/remove-token' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\RemoveToken::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\RemoveToken::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀Runners🌀RemoveToken();
                                            }
                                            $operation = new Operation\EnterpriseAdmin\CreateRemoveTokenForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\RemoveToken::class], $params['enterprise']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AuthenticationToken {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{runner_id}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'labels' == $pathChunks[6]) {
                                            if ('POST /enterprises/{enterprise}/actions/runners/{runner_id}/labels' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('enterprise', 'runner_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                }
                                                $operation = new Operation\EnterpriseAdmin\AddCustomLabelsToSelfHostedRunnerForEnterprise($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $params['enterprise'], $params['runner_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && '{security_product}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{enablement}' == $pathChunks[4]) {
                                    if ('POST /enterprises/{enterprise}/{security_product}/{enablement}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('enterprise', 'security_product', 'enablement')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\CbSecurityProductRcb\CbEnablementRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\CbSecurityProductRcb\CbEnablementRcb::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀CbSecurityProductRcb🌀CbEnablementRcb();
                                        }
                                        $operation = new Operation\SecretScanning\PostSecurityProductEnablementForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\CbSecurityProductRcb\CbEnablementRcb::class], $params['enterprise'], $params['security_product'], $params['enablement']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'gists' == $pathChunks[1]) {
                        if ('POST /gists' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array()) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\Gists::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Gists::class] = $this->hydrators->getObjectMapperOperation🌀Gists();
                            }
                            $operation = new Operation\Gists\Create($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists::class]);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GistSimple|Schema\ValidationError|Schema\BasicError {
                                return $operation->createResponse($response);
                            });
                        } elseif (array_key_exists(2, $pathChunks) == true && '{gist_id}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'comments' == $pathChunks[3]) {
                                if ('POST /gists/{gist_id}/comments' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('gist_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Comments::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Comments();
                                    }
                                    $operation = new Operation\Gists\CreateComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments::class], $params['gist_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GistComment|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'forks' == $pathChunks[3]) {
                                if ('POST /gists/{gist_id}/forks' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('gist_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Forks::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Forks::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Forks();
                                    }
                                    $operation = new Operation\Gists\Fork($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Forks::class], $params['gist_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BaseGist|Schema\BasicError|Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'markdown' == $pathChunks[1]) {
                        if ('POST /markdown' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array()) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\Markdown::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Markdown::class] = $this->hydrators->getObjectMapperOperation🌀Markdown();
                            }
                            $operation = new Operation\Markdown\Render($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Markdown::class]);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WebHookHeader\UserAgent {
                                return $operation->createResponse($response);
                            });
                        } elseif (array_key_exists(2, $pathChunks) == true && 'raw' == $pathChunks[2]) {
                            if ('POST /markdown/raw' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array()) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Markdown\Raw::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Markdown\Raw::class] = $this->hydrators->getObjectMapperOperation🌀Markdown🌀Raw();
                                }
                                $operation = new Operation\Markdown\RenderRaw($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Markdown\Raw::class]);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WebHookHeader\UserAgent {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'orgs' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{org}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'actions' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'required_workflows' == $pathChunks[4]) {
                                    if ('POST /orgs/{org}/actions/required_workflows' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀RequiredWorkflows();
                                        }
                                        $operation = new Operation\Actions\CreateRequiredWorkflow($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows::class], $params['org']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RequiredWorkflow|Schema\ValidationErrorSimple {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'runner-groups' == $pathChunks[4]) {
                                    if ('POST /orgs/{org}/actions/runner-groups' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerGroups::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerGroups::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀RunnerGroups();
                                        }
                                        $operation = new Operation\Actions\CreateSelfHostedRunnerGroupForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerGroups::class], $params['org']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RunnerGroupsOrg {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'runners' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'registration-token' == $pathChunks[5]) {
                                        if ('POST /orgs/{org}/actions/runners/registration-token' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\RegistrationToken::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\RegistrationToken::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀RegistrationToken();
                                            }
                                            $operation = new Operation\Actions\CreateRegistrationTokenForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\RegistrationToken::class], $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AuthenticationToken {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'remove-token' == $pathChunks[5]) {
                                        if ('POST /orgs/{org}/actions/runners/remove-token' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\RemoveToken::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\RemoveToken::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀RemoveToken();
                                            }
                                            $operation = new Operation\Actions\CreateRemoveTokenForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\RemoveToken::class], $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AuthenticationToken {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{runner_id}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'labels' == $pathChunks[6]) {
                                            if ('POST /orgs/{org}/actions/runners/{runner_id}/labels' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'runner_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                }
                                                $operation = new Operation\Actions\AddCustomLabelsToSelfHostedRunnerForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $params['org'], $params['runner_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'variables' == $pathChunks[4]) {
                                    if ('POST /orgs/{org}/actions/variables' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Variables();
                                        }
                                        $operation = new Operation\Actions\CreateOrgVariable($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Variables::class], $params['org']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'codespaces' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'billing' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'selected_users' == $pathChunks[5]) {
                                        if ('POST /orgs/{org}/codespaces/billing/selected_users' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing\SelectedUsers::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing\SelectedUsers::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Billing🌀SelectedUsers();
                                            }
                                            $operation = new Operation\Codespaces\SetCodespacesBillingUsers($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing\SelectedUsers::class], $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError|Schema\ValidationError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'custom_roles' == $pathChunks[3]) {
                                if ('POST /orgs/{org}/custom_roles' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\CustomRoles::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\CustomRoles::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀CustomRoles();
                                    }
                                    $operation = new Operation\Orgs\CreateCustomRole($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\CustomRoles::class], $params['org']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationCustomRepositoryRole|Schema\ValidationError|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'hooks' == $pathChunks[3]) {
                                if ('POST /orgs/{org}/hooks' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks();
                                    }
                                    $operation = new Operation\Orgs\CreateWebhook($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks::class], $params['org']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrgHook|Schema\ValidationError|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{hook_id}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'deliveries' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{delivery_id}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'attempts' == $pathChunks[7]) {
                                                if ('POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'hook_id', 'delivery_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb\Attempts::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb\Attempts::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb🌀Deliveries🌀CbDeliveryIdRcb🌀Attempts();
                                                    }
                                                    $operation = new Operation\Orgs\RedeliverWebhookDelivery($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb\Attempts::class], $params['org'], $params['hook_id'], $params['delivery_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AuditLogEvent\Config|Schema\BasicError|Schema\ScimError|Schema\ValidationError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'pings' == $pathChunks[5]) {
                                        if ('POST /orgs/{org}/hooks/{hook_id}/pings' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'hook_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Pings::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Pings::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb🌀Pings();
                                            }
                                            $operation = new Operation\Orgs\PingWebhook($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Pings::class], $params['org'], $params['hook_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'invitations' == $pathChunks[3]) {
                                if ('POST /orgs/{org}/invitations' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Invitations::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Invitations::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Invitations();
                                    }
                                    $operation = new Operation\Orgs\CreateInvitation($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Invitations::class], $params['org']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationInvitation|Schema\ValidationError|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'members' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'codespaces' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{codespace_name}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'stop' == $pathChunks[7]) {
                                                if ('POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'username', 'codespace_name')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces\CbCodespaceNameRcb\Stop::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces\CbCodespaceNameRcb\Stop::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Members🌀CbUsernameRcb🌀Codespaces🌀CbCodespaceNameRcb🌀Stop();
                                                    }
                                                    $operation = new Operation\Codespaces\StopInOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces\CbCodespaceNameRcb\Stop::class], $params['org'], $params['username'], $params['codespace_name']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Codespace|Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'migrations' == $pathChunks[3]) {
                                if ('POST /orgs/{org}/migrations' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Migrations::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Migrations();
                                    }
                                    $operation = new Operation\Migrations\StartForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations::class], $params['org']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Migration|Schema\BasicError|Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'packages' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{package_type}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{package_name}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'restore' == $pathChunks[6]) {
                                            if ('POST /orgs/{org}/packages/{package_type}/{package_name}/restore' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('package_type', 'package_name', 'org', 'token')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Restore();
                                                }
                                                $operation = new Operation\Packages\RestorePackageForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class], $params['package_type'], $params['package_name'], $params['org'], $params['token']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'versions' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{package_version_id}' == $pathChunks[7]) {
                                                if (array_key_exists(8, $pathChunks) == true && 'restore' == $pathChunks[8]) {
                                                    if ('POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('package_type', 'package_name', 'org', 'package_version_id')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb🌀Restore();
                                                        }
                                                        $operation = new Operation\Packages\RestorePackageVersionForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class], $params['package_type'], $params['package_name'], $params['org'], $params['package_version_id']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'projects' == $pathChunks[3]) {
                                if ('POST /orgs/{org}/projects' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Projects::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Projects::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Projects();
                                    }
                                    $operation = new Operation\Projects\CreateForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Projects::class], $params['org']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Project|Schema\BasicError|Schema\ValidationErrorSimple {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'repos' == $pathChunks[3]) {
                                if ('POST /orgs/{org}/repos' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Repos::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Repos::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Repos();
                                    }
                                    $operation = new Operation\Repos\CreateInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Repos::class], $params['org']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Repository|Schema\BasicError|Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'teams' == $pathChunks[3]) {
                                if ('POST /orgs/{org}/teams' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams();
                                    }
                                    $operation = new Operation\Teams\Create($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams::class], $params['org']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamFull|Schema\ValidationError|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{team_slug}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'discussions' == $pathChunks[5]) {
                                        if ('POST /orgs/{org}/teams/{team_slug}/discussions' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'team_slug')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions();
                                            }
                                            $operation = new Operation\Teams\CreateDiscussionInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions::class], $params['org'], $params['team_slug']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamDiscussion {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{discussion_number}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'comments' == $pathChunks[7]) {
                                                if ('POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'team_slug', 'discussion_number')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments();
                                                    }
                                                    $operation = new Operation\Teams\CreateDiscussionCommentInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments::class], $params['org'], $params['team_slug'], $params['discussion_number']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamDiscussionComment {
                                                        return $operation->createResponse($response);
                                                    });
                                                } elseif (array_key_exists(8, $pathChunks) == true && '{comment_number}' == $pathChunks[8]) {
                                                    if (array_key_exists(9, $pathChunks) == true && 'reactions' == $pathChunks[9]) {
                                                        if ('POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions' == $call) {
                                                            $requestBodyData = array();
                                                            foreach (\array_keys($params) as $param) {
                                                                if (\in_array($param, array('org', 'team_slug', 'discussion_number', 'comment_number')) != false) {
                                                                    \array_push($requestBodyData, $param);
                                                                }
                                                            }
                                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments🌀CbCommentNumberRcb🌀Reactions();
                                                            }
                                                            $operation = new Operation\Reactions\CreateForTeamDiscussionCommentInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class], $params['org'], $params['team_slug'], $params['discussion_number'], $params['comment_number']);
                                                            $request = $operation->createRequest($requestBodyData);
                                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction {
                                                                return $operation->createResponse($response);
                                                            });
                                                        }
                                                    }
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'reactions' == $pathChunks[7]) {
                                                if ('POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'team_slug', 'discussion_number')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Reactions();
                                                    }
                                                    $operation = new Operation\Reactions\CreateForTeamDiscussionInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Reactions::class], $params['org'], $params['team_slug'], $params['discussion_number']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && '{security_product}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{enablement}' == $pathChunks[4]) {
                                    if ('POST /orgs/{org}/{security_product}/{enablement}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'security_product', 'enablement')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Orgs\EnableOrDisableSecurityProductOnAllOrgRepos($params['org'], $params['security_product'], $params['enablement']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'projects' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'columns' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'cards' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{card_id}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'moves' == $pathChunks[5]) {
                                        if ('POST /projects/columns/cards/{card_id}/moves' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('card_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb\Moves::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb\Moves::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀Cards🌀CbCardIdRcb🌀Moves();
                                            }
                                            $operation = new Operation\Projects\MoveCard($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb\Moves::class], $params['card_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Gists\CheckIsStarred\Response\Applicationjson\H404|Schema\Operation\Projects\MoveCard\Response\Applicationjson\H403|Schema\BasicError|Schema\Operation\Projects\MoveCard\Response\Applicationjson\H503|Schema\ValidationError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && '{column_id}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'cards' == $pathChunks[4]) {
                                    if ('POST /projects/columns/{column_id}/cards' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('column_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Cards::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Cards::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀CbColumnIdRcb🌀Cards();
                                        }
                                        $operation = new Operation\Projects\CreateCard($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Cards::class], $params['column_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ProjectCard|Schema\BasicError|Schema\Operation\Orgs\Update\Response\Applicationjson\H422|Schema\Operation\Projects\MoveCard\Response\Applicationjson\H503 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'moves' == $pathChunks[4]) {
                                    if ('POST /projects/columns/{column_id}/moves' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('column_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Moves::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Moves::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀CbColumnIdRcb🌀Moves();
                                        }
                                        $operation = new Operation\Projects\MoveColumn($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb\Moves::class], $params['column_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Gists\CheckIsStarred\Response\Applicationjson\H404|Schema\BasicError|Schema\ValidationErrorSimple {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && '{project_id}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'columns' == $pathChunks[3]) {
                                if ('POST /projects/{project_id}/columns' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('project_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb\Columns::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Columns::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb🌀Columns();
                                    }
                                    $operation = new Operation\Projects\CreateColumn($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Columns::class], $params['project_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ProjectColumn|Schema\BasicError|Schema\ValidationErrorSimple {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'repos' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{owner}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{repo}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'actions' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'jobs' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{job_id}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'rerun' == $pathChunks[7]) {
                                                if ('POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'job_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Jobs\CbJobIdRcb\Rerun::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Jobs\CbJobIdRcb\Rerun::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Jobs🌀CbJobIdRcb🌀Rerun();
                                                    }
                                                    $operation = new Operation\Actions\ReRunJobForWorkflowRun($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Jobs\CbJobIdRcb\Rerun::class], $params['owner'], $params['repo'], $params['job_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject|Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'runners' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'registration-token' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/actions/runners/registration-token' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\RegistrationToken::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\RegistrationToken::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀RegistrationToken();
                                                }
                                                $operation = new Operation\Actions\CreateRegistrationTokenForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\RegistrationToken::class], $params['owner'], $params['repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AuthenticationToken {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'remove-token' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/actions/runners/remove-token' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\RemoveToken::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\RemoveToken::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀RemoveToken();
                                                }
                                                $operation = new Operation\Actions\CreateRemoveTokenForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\RemoveToken::class], $params['owner'], $params['repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AuthenticationToken {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{runner_id}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'labels' == $pathChunks[7]) {
                                                if ('POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'runner_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                    }
                                                    $operation = new Operation\Actions\AddCustomLabelsToSelfHostedRunnerForRepo($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $params['owner'], $params['repo'], $params['runner_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'runs' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{run_id}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'approve' == $pathChunks[7]) {
                                                if ('POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'run_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Approve::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Approve::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Approve();
                                                    }
                                                    $operation = new Operation\Actions\ApproveWorkflowRun($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Approve::class], $params['owner'], $params['repo'], $params['run_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject|Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'cancel' == $pathChunks[7]) {
                                                if ('POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'run_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Cancel::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Cancel::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Cancel();
                                                    }
                                                    $operation = new Operation\Actions\CancelWorkflowRun($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Cancel::class], $params['owner'], $params['repo'], $params['run_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject|Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'pending_deployments' == $pathChunks[7]) {
                                                if ('POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'run_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\PendingDeployments::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\PendingDeployments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀PendingDeployments();
                                                    }
                                                    $operation = new Operation\Actions\ReviewPendingDeploymentsForRun($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\PendingDeployments::class], $params['owner'], $params['repo'], $params['run_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Deployment {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'rerun' == $pathChunks[7]) {
                                                if ('POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'run_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Rerun::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Rerun::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Rerun();
                                                    }
                                                    $operation = new Operation\Actions\ReRunWorkflow($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Rerun::class], $params['owner'], $params['repo'], $params['run_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'rerun-failed-jobs' == $pathChunks[7]) {
                                                if ('POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'run_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\RerunDashFailedDashJobs::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\RerunDashFailedDashJobs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀RerunDashFailedDashJobs();
                                                    }
                                                    $operation = new Operation\Actions\ReRunWorkflowFailedJobs($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\RerunDashFailedDashJobs::class], $params['owner'], $params['repo'], $params['run_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'variables' == $pathChunks[5]) {
                                        if ('POST /repos/{owner}/{repo}/actions/variables' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Variables();
                                            }
                                            $operation = new Operation\Actions\CreateRepoVariable($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Variables::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'workflows' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{workflow_id}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'dispatches' == $pathChunks[7]) {
                                                if ('POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'workflow_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Actions\CreateWorkflowDispatch($this->requestSchemaValidator, $params['owner'], $params['repo'], $params['workflow_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'autolinks' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/autolinks' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Autolinks();
                                        }
                                        $operation = new Operation\Repos\CreateAutolink($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Autolink|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'branches' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{branch}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'protection' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'enforce_admins' == $pathChunks[7]) {
                                                if ('POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀EnforceAdmins();
                                                    }
                                                    $operation = new Operation\Repos\SetAdminBranchProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class], $params['owner'], $params['repo'], $params['branch']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ProtectedBranchAdminEnforced {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'required_signatures' == $pathChunks[7]) {
                                                if ('POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredSignatures();
                                                    }
                                                    $operation = new Operation\Repos\CreateCommitSignatureProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class], $params['owner'], $params['repo'], $params['branch']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ProtectedBranchAdminEnforced|Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'required_status_checks' == $pathChunks[7]) {
                                                if (array_key_exists(8, $pathChunks) == true && 'contexts' == $pathChunks[8]) {
                                                    if ('POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredStatusChecks🌀Contexts();
                                                        }
                                                        $operation = new Operation\Repos\AddStatusCheckContexts($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class], $params['owner'], $params['repo'], $params['branch']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WebHookHeader\UserAgent|Schema\ValidationError|Schema\BasicError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'restrictions' == $pathChunks[7]) {
                                                if (array_key_exists(8, $pathChunks) == true && 'apps' == $pathChunks[8]) {
                                                    if ('POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Apps();
                                                        }
                                                        $operation = new Operation\Repos\AddAppAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class], $params['owner'], $params['repo'], $params['branch']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Integration|Schema\ValidationError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                } elseif (array_key_exists(8, $pathChunks) == true && 'teams' == $pathChunks[8]) {
                                                    if ('POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Teams();
                                                        }
                                                        $operation = new Operation\Repos\AddTeamAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class], $params['owner'], $params['repo'], $params['branch']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Team|Schema\ValidationError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                } elseif (array_key_exists(8, $pathChunks) == true && 'users' == $pathChunks[8]) {
                                                    if ('POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Users();
                                                        }
                                                        $operation = new Operation\Repos\AddUserAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class], $params['owner'], $params['repo'], $params['branch']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser|Schema\ValidationError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'rename' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/branches/{branch}/rename' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Rename::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Rename::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Rename();
                                                }
                                                $operation = new Operation\Repos\RenameBranch($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Rename::class], $params['owner'], $params['repo'], $params['branch']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BranchWithProtection|Schema\BasicError|Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'check-runs' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/check-runs' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckRuns::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckRuns::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckRuns();
                                        }
                                        $operation = new Operation\Checks\Create($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckRuns::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CheckRun {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{check_run_id}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'rerequest' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'check_run_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb\Rerequest::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb\Rerequest::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckDashRuns🌀CbCheckRunIdRcb🌀Rerequest();
                                                }
                                                $operation = new Operation\Checks\RerequestRun($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb\Rerequest::class], $params['owner'], $params['repo'], $params['check_run_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'check-suites' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/check-suites' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckSuites::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckSuites::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckSuites();
                                        }
                                        $operation = new Operation\Checks\CreateSuite($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckSuites::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CheckSuite {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{check_suite_id}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'rerequest' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'check_suite_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb\Rerequest::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb\Rerequest::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckDashSuites🌀CbCheckSuiteIdRcb🌀Rerequest();
                                                }
                                                $operation = new Operation\Checks\RerequestSuite($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashSuites\CbCheckSuiteIdRcb\Rerequest::class], $params['owner'], $params['repo'], $params['check_suite_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'code-scanning' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'sarifs' == $pathChunks[5]) {
                                        if ('POST /repos/{owner}/{repo}/code-scanning/sarifs' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Sarifs::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Sarifs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeScanning🌀Sarifs();
                                            }
                                            $operation = new Operation\CodeScanning\UploadSarif($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeScanning\Sarifs::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodeScanningSarifsReceipt|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'codespaces' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/codespaces' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces();
                                        }
                                        $operation = new Operation\Codespaces\CreateWithRepoForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Codespace|Schema\BasicError|Schema\ScimError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'comments' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{comment_id}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'reactions' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/comments/{comment_id}/reactions' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'comment_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb\Reactions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Comments🌀CbCommentIdRcb🌀Reactions();
                                                }
                                                $operation = new Operation\Reactions\CreateForCommitComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb\Reactions::class], $params['owner'], $params['repo'], $params['comment_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction|Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'commits' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{commit_sha}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'comments' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/commits/{commit_sha}/comments' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'commit_sha')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Comments::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Commits🌀CbCommitShaRcb🌀Comments();
                                                }
                                                $operation = new Operation\Repos\CreateCommitComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Commits\CbCommitShaRcb\Comments::class], $params['owner'], $params['repo'], $params['commit_sha']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CommitComment|Schema\BasicError|Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'dependency-graph' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'snapshots' == $pathChunks[5]) {
                                        if ('POST /repos/{owner}/{repo}/dependency-graph/snapshots' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\DependencyGraph\Snapshots::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\DependencyGraph\Snapshots::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀DependencyGraph🌀Snapshots();
                                            }
                                            $operation = new Operation\DependencyGraph\CreateRepositorySnapshot($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\DependencyGraph\Snapshots::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\DependencyGraph\CreateRepositorySnapshot\Response\Applicationjson\H201 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'deployments' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/deployments' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Deployments();
                                        }
                                        $operation = new Operation\Repos\CreateDeployment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Deployment|Schema\Operation\Activity\MarkNotificationsAsRead\Response\Applicationjson\H202|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{deployment_id}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'statuses' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'deployment_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Deployments🌀CbDeploymentIdRcb🌀Statuses();
                                                }
                                                $operation = new Operation\Repos\CreateDeploymentStatus($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb\Statuses::class], $params['owner'], $params['repo'], $params['deployment_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DeploymentStatus|Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'dispatches' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/dispatches' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dispatches::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dispatches::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Dispatches();
                                        }
                                        $operation = new Operation\Repos\CreateDispatchEvent($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dispatches::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'environments' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{environment_name}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'deployment-branch-policies' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'environment_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Environments🌀CbEnvironmentNameRcb🌀DeploymentDashBranchDashPolicies();
                                                }
                                                $operation = new Operation\Repos\CreateDeploymentBranchPolicy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies::class], $params['owner'], $params['repo'], $params['environment_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DeploymentBranchPolicy {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'forks' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/forks' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Forks::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Forks::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Forks();
                                        }
                                        $operation = new Operation\Repos\CreateFork($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Forks::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\FullRepository|Schema\BasicError|Schema\ScimError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'git' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'blobs' == $pathChunks[5]) {
                                        if ('POST /repos/{owner}/{repo}/git/blobs' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Blobs::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Blobs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Blobs();
                                            }
                                            $operation = new Operation\Git\CreateBlob($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Blobs::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ShortBlob|Schema\BasicError|Schema\ValidationError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'commits' == $pathChunks[5]) {
                                        if ('POST /repos/{owner}/{repo}/git/commits' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Commits::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Commits::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Commits();
                                            }
                                            $operation = new Operation\Git\CreateCommit($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Commits::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GitCommit|Schema\ValidationError|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'refs' == $pathChunks[5]) {
                                        if ('POST /repos/{owner}/{repo}/git/refs' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Refs();
                                            }
                                            $operation = new Operation\Git\CreateRef($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GitRef|Schema\ValidationError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'tags' == $pathChunks[5]) {
                                        if ('POST /repos/{owner}/{repo}/git/tags' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Tags::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Tags::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Tags();
                                            }
                                            $operation = new Operation\Git\CreateTag($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Tags::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GitTag|Schema\ValidationError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'trees' == $pathChunks[5]) {
                                        if ('POST /repos/{owner}/{repo}/git/trees' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Trees::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Trees::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Trees();
                                            }
                                            $operation = new Operation\Git\CreateTree($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Trees::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GitTree|Schema\ValidationError|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'hooks' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/hooks' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks();
                                        }
                                        $operation = new Operation\Repos\CreateWebhook($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Hook|Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{hook_id}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'deliveries' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{delivery_id}' == $pathChunks[7]) {
                                                if (array_key_exists(8, $pathChunks) == true && 'attempts' == $pathChunks[8]) {
                                                    if ('POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'hook_id', 'delivery_id')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb\Attempts::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb\Attempts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb🌀Deliveries🌀CbDeliveryIdRcb🌀Attempts();
                                                        }
                                                        $operation = new Operation\Repos\RedeliverWebhookDelivery($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Deliveries\CbDeliveryIdRcb\Attempts::class], $params['owner'], $params['repo'], $params['hook_id'], $params['delivery_id']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AuditLogEvent\Config|Schema\BasicError|Schema\ScimError|Schema\ValidationError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'pings' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/hooks/{hook_id}/pings' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'hook_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Pings::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Pings::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb🌀Pings();
                                                }
                                                $operation = new Operation\Repos\PingWebhook($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Pings::class], $params['owner'], $params['repo'], $params['hook_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'tests' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/hooks/{hook_id}/tests' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'hook_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Tests::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Tests::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb🌀Tests();
                                                }
                                                $operation = new Operation\Repos\TestPushWebhook($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Tests::class], $params['owner'], $params['repo'], $params['hook_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'issues' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/issues' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues();
                                        }
                                        $operation = new Operation\Issues\Create($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Issue|Schema\BasicError|Schema\ValidationError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'comments' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{comment_id}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'reactions' == $pathChunks[7]) {
                                                if ('POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'comment_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb\Reactions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀Comments🌀CbCommentIdRcb🌀Reactions();
                                                    }
                                                    $operation = new Operation\Reactions\CreateForIssueComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb\Reactions::class], $params['owner'], $params['repo'], $params['comment_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction|Schema\ValidationError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{issue_number}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'assignees' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/issues/{issue_number}/assignees' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'issue_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Assignees();
                                                }
                                                $operation = new Operation\Issues\AddAssignees($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees::class], $params['owner'], $params['repo'], $params['issue_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Issue {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'comments' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/issues/{issue_number}/comments' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'issue_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Comments::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Comments();
                                                }
                                                $operation = new Operation\Issues\CreateComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Comments::class], $params['owner'], $params['repo'], $params['issue_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\IssueComment|Schema\BasicError|Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'labels' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/issues/{issue_number}/labels' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'issue_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Labels();
                                                }
                                                $operation = new Operation\Issues\AddLabels($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class], $params['owner'], $params['repo'], $params['issue_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Label|Schema\BasicError|Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'reactions' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/issues/{issue_number}/reactions' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'issue_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Reactions();
                                                }
                                                $operation = new Operation\Reactions\CreateForIssue($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Reactions::class], $params['owner'], $params['repo'], $params['issue_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction|Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'keys' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/keys' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Keys();
                                        }
                                        $operation = new Operation\Repos\CreateDeployKey($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Keys::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DeployKey|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'labels' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/labels' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Labels();
                                        }
                                        $operation = new Operation\Issues\CreateLabel($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Label|Schema\ValidationError|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'merge-upstream' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/merge-upstream' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\MergeUpstream::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\MergeUpstream::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀MergeUpstream();
                                        }
                                        $operation = new Operation\Repos\MergeUpstream($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\MergeUpstream::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MergedUpstream {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'merges' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/merges' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Merges::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Merges::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Merges();
                                        }
                                        $operation = new Operation\Repos\Merge($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Merges::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Commit|Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'milestones' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/milestones' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Milestones();
                                        }
                                        $operation = new Operation\Issues\CreateMilestone($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Milestone|Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'pages' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/pages' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages();
                                        }
                                        $operation = new Operation\Repos\CreatePagesSite($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Page|Schema\ValidationError|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'builds' == $pathChunks[5]) {
                                        if ('POST /repos/{owner}/{repo}/pages/builds' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages🌀Builds();
                                            }
                                            $operation = new Operation\Repos\RequestPagesBuild($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Builds::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PageBuildStatus {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'deployment' == $pathChunks[5]) {
                                        if ('POST /repos/{owner}/{repo}/pages/deployment' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Deployment::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Deployment::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages🌀Deployment();
                                            }
                                            $operation = new Operation\Repos\CreatePagesDeployment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages\Deployment::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PageDeployment|Schema\BasicError|Schema\ScimError|Schema\ValidationError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'projects' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/projects' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Projects::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Projects::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Projects();
                                        }
                                        $operation = new Operation\Projects\CreateForRepo($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Projects::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Project|Schema\BasicError|Schema\ValidationErrorSimple {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'pulls' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/pulls' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls();
                                        }
                                        $operation = new Operation\Pulls\Create($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequest|Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'comments' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{comment_id}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'reactions' == $pathChunks[7]) {
                                                if ('POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'comment_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb\Reactions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀Comments🌀CbCommentIdRcb🌀Reactions();
                                                    }
                                                    $operation = new Operation\Reactions\CreateForPullRequestReviewComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb\Reactions::class], $params['owner'], $params['repo'], $params['comment_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction|Schema\ValidationError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{pull_number}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'codespaces' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'pull_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Codespaces::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Codespaces::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Codespaces();
                                                }
                                                $operation = new Operation\Codespaces\CreateWithPrForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Codespaces::class], $params['owner'], $params['repo'], $params['pull_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Codespace|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'comments' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/pulls/{pull_number}/comments' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'pull_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Comments();
                                                }
                                                $operation = new Operation\Pulls\CreateReviewComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments::class], $params['owner'], $params['repo'], $params['pull_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestReviewComment|Schema\ValidationError|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{comment_id}' == $pathChunks[7]) {
                                                if (array_key_exists(8, $pathChunks) == true && 'replies' == $pathChunks[8]) {
                                                    if ('POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'pull_number', 'comment_id')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments\CbCommentIdRcb\Replies::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments\CbCommentIdRcb\Replies::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Comments🌀CbCommentIdRcb🌀Replies();
                                                        }
                                                        $operation = new Operation\Pulls\CreateReplyForReviewComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Comments\CbCommentIdRcb\Replies::class], $params['owner'], $params['repo'], $params['pull_number'], $params['comment_id']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestReviewComment|Schema\BasicError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'requested_reviewers' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'pull_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀RequestedReviewers();
                                                }
                                                $operation = new Operation\Pulls\RequestReviewers($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class], $params['owner'], $params['repo'], $params['pull_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestSimple|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'reviews' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'pull_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Reviews();
                                                }
                                                $operation = new Operation\Pulls\CreateReview($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews::class], $params['owner'], $params['repo'], $params['pull_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestReview|Schema\ValidationErrorSimple|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{review_id}' == $pathChunks[7]) {
                                                if (array_key_exists(8, $pathChunks) == true && 'events' == $pathChunks[8]) {
                                                    if ('POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'pull_number', 'review_id')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Events::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Events::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Reviews🌀CbReviewIdRcb🌀Events();
                                                        }
                                                        $operation = new Operation\Pulls\SubmitReview($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Events::class], $params['owner'], $params['repo'], $params['pull_number'], $params['review_id']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestReview|Schema\BasicError|Schema\ValidationErrorSimple {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'releases' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/releases' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases();
                                        }
                                        $operation = new Operation\Repos\CreateRelease($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Release|Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'generate-notes' == $pathChunks[5]) {
                                        if ('POST /repos/{owner}/{repo}/releases/generate-notes' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\GenerateNotes::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\GenerateNotes::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀GenerateNotes();
                                            }
                                            $operation = new Operation\Repos\GenerateReleaseNotes($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\GenerateNotes::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ReleaseNotesContent|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{release_id}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'assets' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/releases/{release_id}/assets' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'release_id', 'name', 'label')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Assets::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Assets::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀CbReleaseIdRcb🌀Assets();
                                                }
                                                $operation = new Operation\Repos\UploadReleaseAsset($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Assets::class], $params['owner'], $params['repo'], $params['release_id'], $params['name'], $params['label']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ReleaseAsset {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'reactions' == $pathChunks[6]) {
                                            if ('POST /repos/{owner}/{repo}/releases/{release_id}/reactions' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'release_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Reactions::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀CbReleaseIdRcb🌀Reactions();
                                                }
                                                $operation = new Operation\Reactions\CreateForRelease($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb\Reactions::class], $params['owner'], $params['repo'], $params['release_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction|Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'statuses' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{sha}' == $pathChunks[5]) {
                                        if ('POST /repos/{owner}/{repo}/statuses/{sha}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'sha')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Statuses\CbShaRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Statuses\CbShaRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Statuses🌀CbShaRcb();
                                            }
                                            $operation = new Operation\Repos\CreateCommitStatus($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Statuses\CbShaRcb::class], $params['owner'], $params['repo'], $params['sha']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Status {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'tags' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'protection' == $pathChunks[5]) {
                                        if ('POST /repos/{owner}/{repo}/tags/protection' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Tags🌀Protection();
                                            }
                                            $operation = new Operation\Repos\CreateTagProtection($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TagProtection|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'transfer' == $pathChunks[4]) {
                                    if ('POST /repos/{owner}/{repo}/transfer' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Transfer::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Transfer::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Transfer();
                                        }
                                        $operation = new Operation\Repos\Transfer($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Transfer::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\MinimalRepository {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && '{template_owner}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{template_repo}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'generate' == $pathChunks[4]) {
                                    if ('POST /repos/{template_owner}/{template_repo}/generate' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('template_owner', 'template_repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbTemplateOwnerRcb\CbTemplateRepoRcb\Generate::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbTemplateOwnerRcb\CbTemplateRepoRcb\Generate::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbTemplateOwnerRcb🌀CbTemplateRepoRcb🌀Generate();
                                        }
                                        $operation = new Operation\Repos\CreateUsingTemplate($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbTemplateOwnerRcb\CbTemplateRepoRcb\Generate::class], $params['template_owner'], $params['template_repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Repository {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'repositories' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{repository_id}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'environments' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{environment_name}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'variables' == $pathChunks[5]) {
                                        if ('POST /repositories/{repository_id}/environments/{environment_name}/variables' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('repository_id', 'environment_name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables::class] = $this->hydrators->getObjectMapperOperation🌀Repositories🌀CbRepositoryIdRcb🌀Environments🌀CbEnvironmentNameRcb🌀Variables();
                                            }
                                            $operation = new Operation\Actions\CreateEnvironmentVariable($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Variables::class], $params['repository_id'], $params['environment_name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'scim' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'v2' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'organizations' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{org}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'Users' == $pathChunks[5]) {
                                        if ('POST /scim/v2/organizations/{org}/Users' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users::class] = $this->hydrators->getObjectMapperOperation🌀Scim🌀V2🌀Organizations🌀CbOrgRcb🌀Users();
                                            }
                                            $operation = new Operation\Scim\ProvisionAndInviteUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users::class], $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ScimUser|Schema\ScimError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'teams' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{team_id}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'discussions' == $pathChunks[3]) {
                                if ('POST /teams/{team_id}/discussions' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('team_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions();
                                    }
                                    $operation = new Operation\Teams\CreateDiscussionLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions::class], $params['team_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamDiscussion {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && '{discussion_number}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'comments' == $pathChunks[5]) {
                                        if ('POST /teams/{team_id}/discussions/{discussion_number}/comments' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('team_id', 'discussion_number')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments();
                                            }
                                            $operation = new Operation\Teams\CreateDiscussionCommentLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments::class], $params['team_id'], $params['discussion_number']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamDiscussionComment {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{comment_number}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'reactions' == $pathChunks[7]) {
                                                if ('POST /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('team_id', 'discussion_number', 'comment_number')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments🌀CbCommentNumberRcb🌀Reactions();
                                                    }
                                                    $operation = new Operation\Reactions\CreateForTeamDiscussionCommentLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb\Reactions::class], $params['team_id'], $params['discussion_number'], $params['comment_number']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'reactions' == $pathChunks[5]) {
                                        if ('POST /teams/{team_id}/discussions/{discussion_number}/reactions' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('team_id', 'discussion_number')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Reactions::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Reactions::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Reactions();
                                            }
                                            $operation = new Operation\Reactions\CreateForTeamDiscussionLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Reactions::class], $params['team_id'], $params['discussion_number']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Reaction {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'user' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'codespaces' == $pathChunks[2]) {
                            if ('POST /user/codespaces' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array()) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Codespaces::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Codespaces::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces();
                                }
                                $operation = new Operation\Codespaces\CreateForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces::class]);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Codespace|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && '{codespace_name}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'exports' == $pathChunks[4]) {
                                    if ('POST /user/codespaces/{codespace_name}/exports' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('codespace_name')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Exports::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Exports::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb🌀Exports();
                                        }
                                        $operation = new Operation\Codespaces\ExportForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Exports::class], $params['codespace_name']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodespaceExportDetails|Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'publish' == $pathChunks[4]) {
                                    if ('POST /user/codespaces/{codespace_name}/publish' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('codespace_name')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Publish::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Publish::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb🌀Publish();
                                        }
                                        $operation = new Operation\Codespaces\PublishForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Publish::class], $params['codespace_name']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodespaceWithFullRepository|Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'start' == $pathChunks[4]) {
                                    if ('POST /user/codespaces/{codespace_name}/start' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('codespace_name')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Start::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Start::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb🌀Start();
                                        }
                                        $operation = new Operation\Codespaces\StartForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Start::class], $params['codespace_name']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Codespace|Schema\BasicError|Schema\ScimError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'stop' == $pathChunks[4]) {
                                    if ('POST /user/codespaces/{codespace_name}/stop' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('codespace_name')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Stop::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Stop::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb🌀Stop();
                                        }
                                        $operation = new Operation\Codespaces\StopForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb\Stop::class], $params['codespace_name']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Codespace|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'emails' == $pathChunks[2]) {
                            if ('POST /user/emails' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array()) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Emails::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Emails::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Emails();
                                }
                                $operation = new Operation\Users\AddEmailForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Emails::class]);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Email|Schema\ValidationError|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'gpg_keys' == $pathChunks[2]) {
                            if ('POST /user/gpg_keys' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array()) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\GpgKeys::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\GpgKeys::class] = $this->hydrators->getObjectMapperOperation🌀User🌀GpgKeys();
                                }
                                $operation = new Operation\Users\CreateGpgKeyForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\GpgKeys::class]);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GpgKey|Schema\ValidationError|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'keys' == $pathChunks[2]) {
                            if ('POST /user/keys' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array()) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Keys::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Keys::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Keys();
                                }
                                $operation = new Operation\Users\CreatePublicSshKeyForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Keys::class]);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Key|Schema\ValidationError|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'migrations' == $pathChunks[2]) {
                            if ('POST /user/migrations' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array()) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Migrations::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Migrations::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Migrations();
                                }
                                $operation = new Operation\Migrations\StartForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Migrations::class]);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Migration|Schema\ValidationError|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'packages' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{package_type}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{package_name}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'restore' == $pathChunks[5]) {
                                        if ('POST /user/packages/{package_type}/{package_name}/restore' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('package_type', 'package_name', 'token')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Restore();
                                            }
                                            $operation = new Operation\Packages\RestorePackageForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class], $params['package_type'], $params['package_name'], $params['token']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'versions' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{package_version_id}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'restore' == $pathChunks[7]) {
                                                if ('POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('package_type', 'package_name', 'package_version_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb🌀Restore();
                                                    }
                                                    $operation = new Operation\Packages\RestorePackageVersionForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class], $params['package_type'], $params['package_name'], $params['package_version_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'projects' == $pathChunks[2]) {
                            if ('POST /user/projects' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array()) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Projects::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Projects::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Projects();
                                }
                                $operation = new Operation\Projects\CreateForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Projects::class]);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Project|Schema\BasicError|Schema\ValidationErrorSimple {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'repos' == $pathChunks[2]) {
                            if ('POST /user/repos' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array()) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Repos::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Repos::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Repos();
                                }
                                $operation = new Operation\Repos\CreateForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Repos::class]);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Repository|Schema\BasicError|Schema\ValidationError|Schema\ScimError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'ssh_signing_keys' == $pathChunks[2]) {
                            if ('POST /user/ssh_signing_keys' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array()) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\SshSigningKeys::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\SshSigningKeys::class] = $this->hydrators->getObjectMapperOperation🌀User🌀SshSigningKeys();
                                }
                                $operation = new Operation\Users\CreateSshSigningKeyForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\SshSigningKeys::class]);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SshSigningKey|Schema\ValidationError|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'users' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{username}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'packages' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{package_type}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{package_name}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'restore' == $pathChunks[6]) {
                                            if ('POST /users/{username}/packages/{package_type}/{package_name}/restore' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('package_type', 'package_name', 'username', 'token')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Restore();
                                                }
                                                $operation = new Operation\Packages\RestorePackageForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Restore::class], $params['package_type'], $params['package_name'], $params['username'], $params['token']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'versions' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{package_version_id}' == $pathChunks[7]) {
                                                if (array_key_exists(8, $pathChunks) == true && 'restore' == $pathChunks[8]) {
                                                    if ('POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('package_type', 'package_name', 'username', 'package_version_id')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb🌀Restore();
                                                        }
                                                        $operation = new Operation\Packages\RestorePackageVersionForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb\Restore::class], $params['package_type'], $params['package_name'], $params['username'], $params['package_version_id']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                break;
            case 'PATCH':
                if (array_key_exists(0, $pathChunks) == true && '' == $pathChunks[0]) {
                    if (array_key_exists(1, $pathChunks) == true && 'app' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'hook' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'config' == $pathChunks[3]) {
                                if ('PATCH /app/hook/config' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array()) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\App\Hook\Config::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\App\Hook\Config::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Hook🌀Config();
                                    }
                                    $operation = new Operation\Apps\UpdateWebhookConfigForApp($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Hook\Config::class]);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WebhookConfig {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'applications' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{client_id}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'token' == $pathChunks[3]) {
                                if ('PATCH /applications/{client_id}/token' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('client_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Applications\CbClientIdRcb\Token::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Token::class] = $this->hydrators->getObjectMapperOperation🌀Applications🌀CbClientIdRcb🌀Token();
                                    }
                                    $operation = new Operation\Apps\ResetToken($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Token::class], $params['client_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Authorization|Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'enterprises' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{enterprise}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'actions' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'runner-groups' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{runner_group_id}' == $pathChunks[5]) {
                                        if ('PATCH /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise', 'runner_group_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀RunnerDashGroups🌀CbRunnerGroupIdRcb();
                                            }
                                            $operation = new Operation\EnterpriseAdmin\UpdateSelfHostedRunnerGroupForEnterprise($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb::class], $params['enterprise'], $params['runner_group_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RunnerGroupsEnterprise {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'announcement' == $pathChunks[3]) {
                                if ('PATCH /enterprises/{enterprise}/announcement' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('enterprise')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Announcement::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Announcement::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Announcement();
                                    }
                                    $operation = new Operation\AnnouncementBanners\SetAnnouncementBannerForEnterprise($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Announcement::class], $params['enterprise']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AnnouncementBanner {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'code_security_and_analysis' == $pathChunks[3]) {
                                if ('PATCH /enterprises/{enterprise}/code_security_and_analysis' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('enterprise')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\CodeSecurityAndAnalysis::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\CodeSecurityAndAnalysis::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀CodeSecurityAndAnalysis();
                                    }
                                    $operation = new Operation\SecretScanning\PatchSecurityAnalysisSettingsForEnterprise($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\CodeSecurityAndAnalysis::class], $params['enterprise']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'gists' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{gist_id}' == $pathChunks[2]) {
                            if ('PATCH /gists/{gist_id}' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('gist_id')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb();
                                }
                                $operation = new Operation\Gists\Update($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb::class], $params['gist_id']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GistSimple|Schema\ValidationError|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && 'comments' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{comment_id}' == $pathChunks[4]) {
                                    if ('PATCH /gists/{gist_id}/comments/{comment_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('gist_id', 'comment_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Comments🌀CbCommentIdRcb();
                                        }
                                        $operation = new Operation\Gists\UpdateComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class], $params['gist_id'], $params['comment_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GistComment|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'notifications' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'threads' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{thread_id}' == $pathChunks[3]) {
                                if ('PATCH /notifications/threads/{thread_id}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('thread_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Notifications\Threads\CbThreadIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Notifications🌀Threads🌀CbThreadIdRcb();
                                    }
                                    $operation = new Operation\Activity\MarkThreadAsRead($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb::class], $params['thread_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'orgs' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{org}' == $pathChunks[2]) {
                            if ('PATCH /orgs/{org}' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('org')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb();
                                }
                                $operation = new Operation\Orgs\Update($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb::class], $params['org']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationFull|Schema\Operation\Orgs\Update\Response\Applicationjson\H422|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && 'actions' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'required_workflows' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{required_workflow_id}' == $pathChunks[5]) {
                                        if ('PATCH /orgs/{org}/actions/required_workflows/{required_workflow_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'required_workflow_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀RequiredWorkflows🌀CbRequiredWorkflowIdRcb();
                                            }
                                            $operation = new Operation\Actions\UpdateRequiredWorkflow($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RequiredWorkflows\CbRequiredWorkflowIdRcb::class], $params['org'], $params['required_workflow_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RequiredWorkflow|Schema\ValidationErrorSimple {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'runner-groups' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{runner_group_id}' == $pathChunks[5]) {
                                        if ('PATCH /orgs/{org}/actions/runner-groups/{runner_group_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'runner_group_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀RunnerDashGroups🌀CbRunnerGroupIdRcb();
                                            }
                                            $operation = new Operation\Actions\UpdateSelfHostedRunnerGroupForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\RunnerDashGroups\CbRunnerGroupIdRcb::class], $params['org'], $params['runner_group_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RunnerGroupsOrg {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'variables' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{name}' == $pathChunks[5]) {
                                        if ('PATCH /orgs/{org}/actions/variables/{name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Actions\UpdateOrgVariable($this->requestSchemaValidator, $params['org'], $params['name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'announcement' == $pathChunks[3]) {
                                if ('PATCH /orgs/{org}/announcement' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Announcement::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Announcement::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Announcement();
                                    }
                                    $operation = new Operation\AnnouncementBanners\SetAnnouncementBannerForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Announcement::class], $params['org']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AnnouncementBanner {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'custom_roles' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{role_id}' == $pathChunks[4]) {
                                    if ('PATCH /orgs/{org}/custom_roles/{role_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'role_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\CustomRoles\CbRoleIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\CustomRoles\CbRoleIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀CustomRoles🌀CbRoleIdRcb();
                                        }
                                        $operation = new Operation\Orgs\UpdateCustomRole($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\CustomRoles\CbRoleIdRcb::class], $params['org'], $params['role_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrganizationCustomRepositoryRole|Schema\ValidationError|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'hooks' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{hook_id}' == $pathChunks[4]) {
                                    if ('PATCH /orgs/{org}/hooks/{hook_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'hook_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb();
                                        }
                                        $operation = new Operation\Orgs\UpdateWebhook($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class], $params['org'], $params['hook_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrgHook|Schema\ValidationError|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'config' == $pathChunks[5]) {
                                        if ('PATCH /orgs/{org}/hooks/{hook_id}/config' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'hook_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Config::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Config::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb🌀Config();
                                            }
                                            $operation = new Operation\Orgs\UpdateWebhookConfigForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb\Config::class], $params['org'], $params['hook_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WebhookConfig {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'teams' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{team_slug}' == $pathChunks[4]) {
                                    if ('PATCH /orgs/{org}/teams/{team_slug}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'team_slug')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb();
                                        }
                                        $operation = new Operation\Teams\UpdateInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb::class], $params['org'], $params['team_slug']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamFull|Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'discussions' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{discussion_number}' == $pathChunks[6]) {
                                            if ('PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'team_slug', 'discussion_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb();
                                                }
                                                $operation = new Operation\Teams\UpdateDiscussionInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb::class], $params['org'], $params['team_slug'], $params['discussion_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamDiscussion {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'comments' == $pathChunks[7]) {
                                                if (array_key_exists(8, $pathChunks) == true && '{comment_number}' == $pathChunks[8]) {
                                                    if ('PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('org', 'team_slug', 'discussion_number', 'comment_number')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments🌀CbCommentNumberRcb();
                                                        }
                                                        $operation = new Operation\Teams\UpdateDiscussionCommentInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class], $params['org'], $params['team_slug'], $params['discussion_number'], $params['comment_number']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamDiscussionComment {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'external-groups' == $pathChunks[5]) {
                                        if ('PATCH /orgs/{org}/teams/{team_slug}/external-groups' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'team_slug')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\ExternalDashGroups::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\ExternalDashGroups::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀ExternalDashGroups();
                                            }
                                            $operation = new Operation\Teams\LinkExternalIdpGroupToTeamForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\ExternalDashGroups::class], $params['org'], $params['team_slug']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ExternalGroup {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'team-sync' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'group-mappings' == $pathChunks[6]) {
                                            if ('PATCH /orgs/{org}/teams/{team_slug}/team-sync/group-mappings' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'team_slug')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\TeamDashSync\GroupDashMappings::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\TeamDashSync\GroupDashMappings::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀TeamDashSync🌀GroupDashMappings();
                                                }
                                                $operation = new Operation\Teams\CreateOrUpdateIdpGroupConnectionsInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\TeamDashSync\GroupDashMappings::class], $params['org'], $params['team_slug']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GroupMapping {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'projects' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'columns' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'cards' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{card_id}' == $pathChunks[4]) {
                                    if ('PATCH /projects/columns/cards/{card_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('card_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀Cards🌀CbCardIdRcb();
                                        }
                                        $operation = new Operation\Projects\UpdateCard($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class], $params['card_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ProjectCard|Schema\BasicError|Schema\ValidationErrorSimple {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && '{column_id}' == $pathChunks[3]) {
                                if ('PATCH /projects/columns/{column_id}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('column_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀CbColumnIdRcb();
                                    }
                                    $operation = new Operation\Projects\UpdateColumn($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class], $params['column_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ProjectColumn|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && '{project_id}' == $pathChunks[2]) {
                            if ('PATCH /projects/{project_id}' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('project_id')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb();
                                }
                                $operation = new Operation\Projects\Update($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb::class], $params['project_id']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Project|Schema\Operation\Projects\DeleteCard\Response\Applicationjson\H403|Schema\BasicError|Schema\ValidationErrorSimple {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'repos' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{owner}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{repo}' == $pathChunks[3]) {
                                if ('PATCH /repos/{owner}/{repo}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('owner', 'repo')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb();
                                    }
                                    $operation = new Operation\Repos\Update($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class], $params['owner'], $params['repo']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\FullRepository|Schema\BasicError|Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && 'actions' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'variables' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{name}' == $pathChunks[6]) {
                                            if ('PATCH /repos/{owner}/{repo}/actions/variables/{name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\UpdateRepoVariable($this->requestSchemaValidator, $params['owner'], $params['repo'], $params['name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'branches' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{branch}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'protection' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'required_pull_request_reviews' == $pathChunks[7]) {
                                                if ('PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredPullRequestReviews();
                                                    }
                                                    $operation = new Operation\Repos\UpdatePullRequestReviewProtection($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class], $params['owner'], $params['repo'], $params['branch']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ProtectedBranchPullRequestReview|Schema\ValidationError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'required_status_checks' == $pathChunks[7]) {
                                                if ('PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredStatusChecks();
                                                    }
                                                    $operation = new Operation\Repos\UpdateStatusCheckProtection($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks::class], $params['owner'], $params['repo'], $params['branch']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\StatusCheckPolicy|Schema\BasicError|Schema\ValidationError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'check-runs' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{check_run_id}' == $pathChunks[5]) {
                                        if ('PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'check_run_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckDashRuns🌀CbCheckRunIdRcb();
                                            }
                                            $operation = new Operation\Checks\Update($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckDashRuns\CbCheckRunIdRcb::class], $params['owner'], $params['repo'], $params['check_run_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CheckRun {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'check-suites' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'preferences' == $pathChunks[5]) {
                                        if ('PATCH /repos/{owner}/{repo}/check-suites/preferences' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckSuites\Preferences::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckSuites\Preferences::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CheckSuites🌀Preferences();
                                            }
                                            $operation = new Operation\Checks\SetSuitesPreferences($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CheckSuites\Preferences::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CheckSuitePreference {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'code-scanning' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'alerts' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{alert_number}' == $pathChunks[6]) {
                                            if ('PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'alert_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeDashScanning🌀Alerts🌀CbAlertNumberRcb();
                                                }
                                                $operation = new Operation\CodeScanning\UpdateAlert($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Alerts\CbAlertNumberRcb::class], $params['owner'], $params['repo'], $params['alert_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodeScanningAlert|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'comments' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{comment_id}' == $pathChunks[5]) {
                                        if ('PATCH /repos/{owner}/{repo}/comments/{comment_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'comment_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Comments🌀CbCommentIdRcb();
                                            }
                                            $operation = new Operation\Repos\UpdateCommitComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class], $params['owner'], $params['repo'], $params['comment_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CommitComment|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'dependabot' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'alerts' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{alert_number}' == $pathChunks[6]) {
                                            if ('PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'alert_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts\CbAlertNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts\CbAlertNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Dependabot🌀Alerts🌀CbAlertNumberRcb();
                                                }
                                                $operation = new Operation\Dependabot\UpdateAlert($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Alerts\CbAlertNumberRcb::class], $params['owner'], $params['repo'], $params['alert_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DependabotAlert|Schema\BasicError|Schema\ScimError|Schema\ValidationErrorSimple {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'git' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'refs' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{ref}' == $pathChunks[6]) {
                                            if ('PATCH /repos/{owner}/{repo}/git/refs/{ref}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'ref')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs\CbRefRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs\CbRefRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Refs🌀CbRefRcb();
                                                }
                                                $operation = new Operation\Git\UpdateRef($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs\CbRefRcb::class], $params['owner'], $params['repo'], $params['ref']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GitRef|Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'hooks' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{hook_id}' == $pathChunks[5]) {
                                        if ('PATCH /repos/{owner}/{repo}/hooks/{hook_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'hook_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb();
                                            }
                                            $operation = new Operation\Repos\UpdateWebhook($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class], $params['owner'], $params['repo'], $params['hook_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Hook|Schema\ValidationError|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'config' == $pathChunks[6]) {
                                            if ('PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'hook_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Config::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Config::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb🌀Config();
                                                }
                                                $operation = new Operation\Repos\UpdateWebhookConfigForRepo($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb\Config::class], $params['owner'], $params['repo'], $params['hook_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WebhookConfig {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'import' == $pathChunks[4]) {
                                    if ('PATCH /repos/{owner}/{repo}/import' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Import();
                                        }
                                        $operation = new Operation\Migrations\UpdateImport($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Import|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'authors' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{author_id}' == $pathChunks[6]) {
                                            if ('PATCH /repos/{owner}/{repo}/import/authors/{author_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'author_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Authors\CbAuthorIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Authors\CbAuthorIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Import🌀Authors🌀CbAuthorIdRcb();
                                                }
                                                $operation = new Operation\Migrations\MapCommitAuthor($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Authors\CbAuthorIdRcb::class], $params['owner'], $params['repo'], $params['author_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PorterAuthor|Schema\ValidationError|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'lfs' == $pathChunks[5]) {
                                        if ('PATCH /repos/{owner}/{repo}/import/lfs' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Lfs::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Lfs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Import🌀Lfs();
                                            }
                                            $operation = new Operation\Migrations\SetLfsPreference($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import\Lfs::class], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Import|Schema\ValidationError|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'invitations' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{invitation_id}' == $pathChunks[5]) {
                                        if ('PATCH /repos/{owner}/{repo}/invitations/{invitation_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'invitation_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Invitations\CbInvitationIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Invitations\CbInvitationIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Invitations🌀CbInvitationIdRcb();
                                            }
                                            $operation = new Operation\Repos\UpdateInvitation($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Invitations\CbInvitationIdRcb::class], $params['owner'], $params['repo'], $params['invitation_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RepositoryInvitation {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'issues' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'comments' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{comment_id}' == $pathChunks[6]) {
                                            if ('PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'comment_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀Comments🌀CbCommentIdRcb();
                                                }
                                                $operation = new Operation\Issues\UpdateComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\Comments\CbCommentIdRcb::class], $params['owner'], $params['repo'], $params['comment_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\IssueComment|Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{issue_number}' == $pathChunks[5]) {
                                        if ('PATCH /repos/{owner}/{repo}/issues/{issue_number}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'issue_number')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb();
                                            }
                                            $operation = new Operation\Issues\Update($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb::class], $params['owner'], $params['repo'], $params['issue_number']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Issue|Schema\ValidationError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'labels' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{name}' == $pathChunks[5]) {
                                        if ('PATCH /repos/{owner}/{repo}/labels/{name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels\CbNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Labels🌀CbNameRcb();
                                            }
                                            $operation = new Operation\Issues\UpdateLabel($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Labels\CbNameRcb::class], $params['owner'], $params['repo'], $params['name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Label {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'milestones' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{milestone_number}' == $pathChunks[5]) {
                                        if ('PATCH /repos/{owner}/{repo}/milestones/{milestone_number}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'milestone_number')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Milestones🌀CbMilestoneNumberRcb();
                                            }
                                            $operation = new Operation\Issues\UpdateMilestone($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class], $params['owner'], $params['repo'], $params['milestone_number']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Milestone {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'pulls' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'comments' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{comment_id}' == $pathChunks[6]) {
                                            if ('PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'comment_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀Comments🌀CbCommentIdRcb();
                                                }
                                                $operation = new Operation\Pulls\UpdateReviewComment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class], $params['owner'], $params['repo'], $params['comment_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestReviewComment {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{pull_number}' == $pathChunks[5]) {
                                        if ('PATCH /repos/{owner}/{repo}/pulls/{pull_number}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'pull_number')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb();
                                            }
                                            $operation = new Operation\Pulls\Update($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb::class], $params['owner'], $params['repo'], $params['pull_number']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequest|Schema\ValidationError|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'releases' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'assets' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{asset_id}' == $pathChunks[6]) {
                                            if ('PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'asset_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Assets\CbAssetIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Assets\CbAssetIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀Assets🌀CbAssetIdRcb();
                                                }
                                                $operation = new Operation\Repos\UpdateReleaseAsset($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\Assets\CbAssetIdRcb::class], $params['owner'], $params['repo'], $params['asset_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ReleaseAsset {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{release_id}' == $pathChunks[5]) {
                                        if ('PATCH /repos/{owner}/{repo}/releases/{release_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'release_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Releases🌀CbReleaseIdRcb();
                                            }
                                            $operation = new Operation\Repos\UpdateRelease($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Releases\CbReleaseIdRcb::class], $params['owner'], $params['repo'], $params['release_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Release|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'secret-scanning' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'alerts' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{alert_number}' == $pathChunks[6]) {
                                            if ('PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'alert_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀SecretDashScanning🌀Alerts🌀CbAlertNumberRcb();
                                                }
                                                $operation = new Operation\SecretScanning\UpdateAlert($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\SecretDashScanning\Alerts\CbAlertNumberRcb::class], $params['owner'], $params['repo'], $params['alert_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SecretScanningAlert|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'repositories' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{repository_id}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'environments' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{environment_name}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'variables' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{name}' == $pathChunks[6]) {
                                            if ('PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('repository_id', 'name', 'environment_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\UpdateEnvironmentVariable($this->requestSchemaValidator, $params['repository_id'], $params['name'], $params['environment_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'scim' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'v2' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'organizations' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{org}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'Users' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{scim_user_id}' == $pathChunks[6]) {
                                            if ('PATCH /scim/v2/organizations/{org}/Users/{scim_user_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'scim_user_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users\CbScimUserIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users\CbScimUserIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Scim🌀V2🌀Organizations🌀CbOrgRcb🌀Users🌀CbScimUserIdRcb();
                                                }
                                                $operation = new Operation\Scim\UpdateAttributeForUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users\CbScimUserIdRcb::class], $params['org'], $params['scim_user_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ScimUser|Schema\ScimError|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'teams' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{team_id}' == $pathChunks[2]) {
                            if ('PATCH /teams/{team_id}' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('team_id')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb();
                                }
                                $operation = new Operation\Teams\UpdateLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb::class], $params['team_id']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamFull|Schema\BasicError|Schema\ValidationError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && 'discussions' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{discussion_number}' == $pathChunks[4]) {
                                    if ('PATCH /teams/{team_id}/discussions/{discussion_number}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('team_id', 'discussion_number')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb();
                                        }
                                        $operation = new Operation\Teams\UpdateDiscussionLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb::class], $params['team_id'], $params['discussion_number']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamDiscussion {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'comments' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{comment_number}' == $pathChunks[6]) {
                                            if ('PATCH /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('team_id', 'discussion_number', 'comment_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Discussions🌀CbDiscussionNumberRcb🌀Comments🌀CbCommentNumberRcb();
                                                }
                                                $operation = new Operation\Teams\UpdateDiscussionCommentLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Discussions\CbDiscussionNumberRcb\Comments\CbCommentNumberRcb::class], $params['team_id'], $params['discussion_number'], $params['comment_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamDiscussionComment {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'team-sync' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'group-mappings' == $pathChunks[4]) {
                                    if ('PATCH /teams/{team_id}/team-sync/group-mappings' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('team_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\TeamDashSync\GroupDashMappings::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\TeamDashSync\GroupDashMappings::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀TeamDashSync🌀GroupDashMappings();
                                        }
                                        $operation = new Operation\Teams\CreateOrUpdateIdpGroupConnectionsLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\TeamDashSync\GroupDashMappings::class], $params['team_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\GroupMapping|Schema\ValidationError|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'user' == $pathChunks[1]) {
                        if ('PATCH /user' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array()) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\User::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\User::class] = $this->hydrators->getObjectMapperOperation🌀User();
                            }
                            $operation = new Operation\Users\UpdateAuthenticated($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User::class]);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PrivateUser|Schema\BasicError|Schema\ValidationError {
                                return $operation->createResponse($response);
                            });
                        } elseif (array_key_exists(2, $pathChunks) == true && 'codespaces' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{codespace_name}' == $pathChunks[3]) {
                                if ('PATCH /user/codespaces/{codespace_name}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('codespace_name')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb();
                                    }
                                    $operation = new Operation\Codespaces\UpdateForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class], $params['codespace_name']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Codespace|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'email' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'visibility' == $pathChunks[3]) {
                                if ('PATCH /user/email/visibility' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array()) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\Email\Visibility::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Email\Visibility::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Email🌀Visibility();
                                    }
                                    $operation = new Operation\Users\SetPrimaryEmailVisibilityForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Email\Visibility::class]);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Email|Schema\BasicError|Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'memberships' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'orgs' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{org}' == $pathChunks[4]) {
                                    if ('PATCH /user/memberships/orgs/{org}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Memberships\Orgs\CbOrgRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Memberships\Orgs\CbOrgRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Memberships🌀Orgs🌀CbOrgRcb();
                                        }
                                        $operation = new Operation\Orgs\UpdateMembershipForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Memberships\Orgs\CbOrgRcb::class], $params['org']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrgMembership|Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'repository_invitations' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{invitation_id}' == $pathChunks[3]) {
                                if ('PATCH /user/repository_invitations/{invitation_id}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('invitation_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\RepositoryInvitations\CbInvitationIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\RepositoryInvitations\CbInvitationIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀RepositoryInvitations🌀CbInvitationIdRcb();
                                    }
                                    $operation = new Operation\Repos\AcceptInvitationForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\RepositoryInvitations\CbInvitationIdRcb::class], $params['invitation_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    }
                }
                break;
            case 'DELETE':
                if (array_key_exists(0, $pathChunks) == true && '' == $pathChunks[0]) {
                    if (array_key_exists(1, $pathChunks) == true && 'app' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'installations' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{installation_id}' == $pathChunks[3]) {
                                if ('DELETE /app/installations/{installation_id}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('installation_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\App\Installations\CbInstallationIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Installations🌀CbInstallationIdRcb();
                                    }
                                    $operation = new Operation\Apps\DeleteInstallation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb::class], $params['installation_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && 'suspended' == $pathChunks[4]) {
                                    if ('DELETE /app/installations/{installation_id}/suspended' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('installation_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\App\Installations\CbInstallationIdRcb\Suspended::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb\Suspended::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Installations🌀CbInstallationIdRcb🌀Suspended();
                                        }
                                        $operation = new Operation\Apps\UnsuspendInstallation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb\Suspended::class], $params['installation_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'applications' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{client_id}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'grant' == $pathChunks[3]) {
                                if ('DELETE /applications/{client_id}/grant' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('client_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Applications\CbClientIdRcb\Grant::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Grant::class] = $this->hydrators->getObjectMapperOperation🌀Applications🌀CbClientIdRcb🌀Grant();
                                    }
                                    $operation = new Operation\Apps\DeleteAuthorization($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Grant::class], $params['client_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'token' == $pathChunks[3]) {
                                if ('DELETE /applications/{client_id}/token' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('client_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Applications\CbClientIdRcb\Token::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Token::class] = $this->hydrators->getObjectMapperOperation🌀Applications🌀CbClientIdRcb🌀Token();
                                    }
                                    $operation = new Operation\Apps\DeleteToken($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Applications\CbClientIdRcb\Token::class], $params['client_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'enterprises' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{enterprise}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'actions' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'permissions' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'organizations' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{org_id}' == $pathChunks[6]) {
                                            if ('DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('enterprise', 'org_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\EnterpriseAdmin\DisableSelectedOrganizationGithubActionsEnterprise($params['enterprise'], $params['org_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'runner-groups' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{runner_group_id}' == $pathChunks[5]) {
                                        if ('DELETE /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise', 'runner_group_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\EnterpriseAdmin\DeleteSelfHostedRunnerGroupFromEnterprise($params['enterprise'], $params['runner_group_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'organizations' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{org_id}' == $pathChunks[7]) {
                                                if ('DELETE /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('enterprise', 'runner_group_id', 'org_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\EnterpriseAdmin\RemoveOrgAccessToSelfHostedRunnerGroupInEnterprise($params['enterprise'], $params['runner_group_id'], $params['org_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'runners' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{runner_id}' == $pathChunks[7]) {
                                                if ('DELETE /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('enterprise', 'runner_group_id', 'runner_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\EnterpriseAdmin\RemoveSelfHostedRunnerFromGroupForEnterprise($params['enterprise'], $params['runner_group_id'], $params['runner_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'runners' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{runner_id}' == $pathChunks[5]) {
                                        if ('DELETE /enterprises/{enterprise}/actions/runners/{runner_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise', 'runner_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\EnterpriseAdmin\DeleteSelfHostedRunnerFromEnterprise($params['enterprise'], $params['runner_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'labels' == $pathChunks[6]) {
                                            if ('DELETE /enterprises/{enterprise}/actions/runners/{runner_id}/labels' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('enterprise', 'runner_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                }
                                                $operation = new Operation\EnterpriseAdmin\RemoveAllCustomLabelsFromSelfHostedRunnerForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $params['enterprise'], $params['runner_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{name}' == $pathChunks[7]) {
                                                if ('DELETE /enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('enterprise', 'runner_id', 'name')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb\Labels\CbNameRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb\Labels\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels🌀CbNameRcb();
                                                    }
                                                    $operation = new Operation\EnterpriseAdmin\RemoveCustomLabelFromSelfHostedRunnerForEnterprise($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb\Labels\CbNameRcb::class], $params['enterprise'], $params['runner_id'], $params['name']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'announcement' == $pathChunks[3]) {
                                if ('DELETE /enterprises/{enterprise}/announcement' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('enterprise')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    $operation = new Operation\AnnouncementBanners\RemoveAnnouncementBannerForEnterprise($params['enterprise']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'gists' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{gist_id}' == $pathChunks[2]) {
                            if ('DELETE /gists/{gist_id}' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('gist_id')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb();
                                }
                                $operation = new Operation\Gists\Delete($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb::class], $params['gist_id']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && 'comments' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{comment_id}' == $pathChunks[4]) {
                                    if ('DELETE /gists/{gist_id}/comments/{comment_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('gist_id', 'comment_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Comments🌀CbCommentIdRcb();
                                        }
                                        $operation = new Operation\Gists\DeleteComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Comments\CbCommentIdRcb::class], $params['gist_id'], $params['comment_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'star' == $pathChunks[3]) {
                                if ('DELETE /gists/{gist_id}/star' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('gist_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Star::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Star::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Star();
                                    }
                                    $operation = new Operation\Gists\Unstar($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Star::class], $params['gist_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'installation' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'token' == $pathChunks[2]) {
                            if ('DELETE /installation/token' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array()) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                $operation = new Operation\Apps\RevokeInstallationAccessToken();
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                    return $operation->createResponse($response);
                                });
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'notifications' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'threads' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{thread_id}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'subscription' == $pathChunks[4]) {
                                    if ('DELETE /notifications/threads/{thread_id}/subscription' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('thread_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class] = $this->hydrators->getObjectMapperOperation🌀Notifications🌀Threads🌀CbThreadIdRcb🌀Subscription();
                                        }
                                        $operation = new Operation\Activity\DeleteThreadSubscription($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class], $params['thread_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'orgs' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{org}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'actions' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'permissions' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'repositories' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{repository_id}' == $pathChunks[6]) {
                                            if ('DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'repository_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\DisableSelectedRepositoryGithubActionsOrganization($params['org'], $params['repository_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'required_workflows' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{required_workflow_id}' == $pathChunks[5]) {
                                        if ('DELETE /orgs/{org}/actions/required_workflows/{required_workflow_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'required_workflow_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Actions\DeleteRequiredWorkflow($params['org'], $params['required_workflow_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{repository_id}' == $pathChunks[7]) {
                                                if ('DELETE /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'required_workflow_id', 'repository_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Actions\RemoveSelectedRepoFromRequiredWorkflow($params['org'], $params['required_workflow_id'], $params['repository_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'runner-groups' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{runner_group_id}' == $pathChunks[5]) {
                                        if ('DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'runner_group_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Actions\DeleteSelfHostedRunnerGroupFromOrg($params['org'], $params['runner_group_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{repository_id}' == $pathChunks[7]) {
                                                if ('DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'runner_group_id', 'repository_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Actions\RemoveRepoAccessToSelfHostedRunnerGroupInOrg($params['org'], $params['runner_group_id'], $params['repository_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'runners' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{runner_id}' == $pathChunks[7]) {
                                                if ('DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'runner_group_id', 'runner_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Actions\RemoveSelfHostedRunnerFromGroupForOrg($params['org'], $params['runner_group_id'], $params['runner_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'runners' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{runner_id}' == $pathChunks[5]) {
                                        if ('DELETE /orgs/{org}/actions/runners/{runner_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'runner_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Actions\DeleteSelfHostedRunnerFromOrg($params['org'], $params['runner_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'labels' == $pathChunks[6]) {
                                            if ('DELETE /orgs/{org}/actions/runners/{runner_id}/labels' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'runner_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                }
                                                $operation = new Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $params['org'], $params['runner_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{name}' == $pathChunks[7]) {
                                                if ('DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'runner_id', 'name')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels\CbNameRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels🌀CbNameRcb();
                                                    }
                                                    $operation = new Operation\Actions\RemoveCustomLabelFromSelfHostedRunnerForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels\CbNameRcb::class], $params['org'], $params['runner_id'], $params['name']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'secrets' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{secret_name}' == $pathChunks[5]) {
                                        if ('DELETE /orgs/{org}/actions/secrets/{secret_name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'secret_name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Actions\DeleteOrgSecret($params['org'], $params['secret_name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{repository_id}' == $pathChunks[7]) {
                                                if ('DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'secret_name', 'repository_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Actions\RemoveSelectedRepoFromOrgSecret($params['org'], $params['secret_name'], $params['repository_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'variables' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{name}' == $pathChunks[5]) {
                                        if ('DELETE /orgs/{org}/actions/variables/{name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Actions\DeleteOrgVariable($params['org'], $params['name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{repository_id}' == $pathChunks[7]) {
                                                if ('DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'name', 'repository_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Actions\RemoveSelectedRepoFromOrgVariable($params['org'], $params['name'], $params['repository_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'announcement' == $pathChunks[3]) {
                                if ('DELETE /orgs/{org}/announcement' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    $operation = new Operation\AnnouncementBanners\RemoveAnnouncementBannerForOrg($params['org']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'blocks' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('DELETE /orgs/{org}/blocks/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Orgs\UnblockUser($params['org'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'codespaces' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'billing' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'selected_users' == $pathChunks[5]) {
                                        if ('DELETE /orgs/{org}/codespaces/billing/selected_users' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing\SelectedUsers::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing\SelectedUsers::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Billing🌀SelectedUsers();
                                            }
                                            $operation = new Operation\Codespaces\DeleteCodespacesBillingUsers($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing\SelectedUsers::class], $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError|Schema\ValidationError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'secrets' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{secret_name}' == $pathChunks[5]) {
                                        if ('DELETE /orgs/{org}/codespaces/secrets/{secret_name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'secret_name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb();
                                            }
                                            $operation = new Operation\Codespaces\DeleteOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class], $params['org'], $params['secret_name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{repository_id}' == $pathChunks[7]) {
                                                if ('DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'secret_name', 'repository_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb🌀Repositories🌀CbRepositoryIdRcb();
                                                    }
                                                    $operation = new Operation\Codespaces\RemoveSelectedRepoFromOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class], $params['org'], $params['secret_name'], $params['repository_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError|Schema\ValidationError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'credential-authorizations' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{credential_id}' == $pathChunks[4]) {
                                    if ('DELETE /orgs/{org}/credential-authorizations/{credential_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'credential_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\CredentialDashAuthorizations\CbCredentialIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\CredentialDashAuthorizations\CbCredentialIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀CredentialDashAuthorizations🌀CbCredentialIdRcb();
                                        }
                                        $operation = new Operation\Orgs\RemoveSamlSsoAuthorization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\CredentialDashAuthorizations\CbCredentialIdRcb::class], $params['org'], $params['credential_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'custom_roles' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{role_id}' == $pathChunks[4]) {
                                    if ('DELETE /orgs/{org}/custom_roles/{role_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'role_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Orgs\DeleteCustomRole($params['org'], $params['role_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'dependabot' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'secrets' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{secret_name}' == $pathChunks[5]) {
                                        if ('DELETE /orgs/{org}/dependabot/secrets/{secret_name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'secret_name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Dependabot\DeleteOrgSecret($params['org'], $params['secret_name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{repository_id}' == $pathChunks[7]) {
                                                if ('DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'secret_name', 'repository_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Dependabot\RemoveSelectedRepoFromOrgSecret($params['org'], $params['secret_name'], $params['repository_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'hooks' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{hook_id}' == $pathChunks[4]) {
                                    if ('DELETE /orgs/{org}/hooks/{hook_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'hook_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Hooks🌀CbHookIdRcb();
                                        }
                                        $operation = new Operation\Orgs\DeleteWebhook($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Hooks\CbHookIdRcb::class], $params['org'], $params['hook_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'interaction-limits' == $pathChunks[3]) {
                                if ('DELETE /orgs/{org}/interaction-limits' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    $operation = new Operation\Interactions\RemoveRestrictionsForOrg($params['org']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'invitations' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{invitation_id}' == $pathChunks[4]) {
                                    if ('DELETE /orgs/{org}/invitations/{invitation_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'invitation_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Invitations\CbInvitationIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Invitations\CbInvitationIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Invitations🌀CbInvitationIdRcb();
                                        }
                                        $operation = new Operation\Orgs\CancelInvitation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Invitations\CbInvitationIdRcb::class], $params['org'], $params['invitation_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ValidationError|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'members' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('DELETE /orgs/{org}/members/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Members🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\RemoveMember($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb::class], $params['org'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'codespaces' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{codespace_name}' == $pathChunks[6]) {
                                            if ('DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'username', 'codespace_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces\CbCodespaceNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces\CbCodespaceNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Members🌀CbUsernameRcb🌀Codespaces🌀CbCodespaceNameRcb();
                                                }
                                                $operation = new Operation\Codespaces\DeleteFromOrganization($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Members\CbUsernameRcb\Codespaces\CbCodespaceNameRcb::class], $params['org'], $params['username'], $params['codespace_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AuditLogEvent\Config|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'memberships' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('DELETE /orgs/{org}/memberships/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Memberships🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\RemoveMembershipForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class], $params['org'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'migrations' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{migration_id}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'archive' == $pathChunks[5]) {
                                        if ('DELETE /orgs/{org}/migrations/{migration_id}/archive' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'migration_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Archive::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Archive::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Migrations🌀CbMigrationIdRcb🌀Archive();
                                            }
                                            $operation = new Operation\Migrations\DeleteArchiveForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Archive::class], $params['org'], $params['migration_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'repos' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{repo_name}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'lock' == $pathChunks[7]) {
                                                if ('DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'migration_id', 'repo_name')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Repos\CbRepoNameRcb\Lock::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Repos\CbRepoNameRcb\Lock::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Migrations🌀CbMigrationIdRcb🌀Repos🌀CbRepoNameRcb🌀Lock();
                                                    }
                                                    $operation = new Operation\Migrations\UnlockRepoForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Migrations\CbMigrationIdRcb\Repos\CbRepoNameRcb\Lock::class], $params['org'], $params['migration_id'], $params['repo_name']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'outside_collaborators' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('DELETE /orgs/{org}/outside_collaborators/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀OutsideCollaborators🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\RemoveOutsideCollaborator($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators\CbUsernameRcb::class], $params['org'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Orgs\RemoveOutsideCollaborator\Response\Applicationjson\H422 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'packages' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{package_type}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{package_name}' == $pathChunks[5]) {
                                        if ('DELETE /orgs/{org}/packages/{package_type}/{package_name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('package_type', 'package_name', 'org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb();
                                            }
                                            $operation = new Operation\Packages\DeletePackageForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class], $params['package_type'], $params['package_name'], $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'versions' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{package_version_id}' == $pathChunks[7]) {
                                                if ('DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('package_type', 'package_name', 'org', 'package_version_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb();
                                                    }
                                                    $operation = new Operation\Packages\DeletePackageVersionForOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class], $params['package_type'], $params['package_name'], $params['org'], $params['package_version_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'public_members' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('DELETE /orgs/{org}/public_members/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Orgs\RemovePublicMembershipForAuthenticatedUser($params['org'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'security-managers' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'teams' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{team_slug}' == $pathChunks[5]) {
                                        if ('DELETE /orgs/{org}/security-managers/teams/{team_slug}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'team_slug')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Orgs\RemoveSecurityManagerTeam($params['org'], $params['team_slug']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'teams' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{team_slug}' == $pathChunks[4]) {
                                    if ('DELETE /orgs/{org}/teams/{team_slug}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'team_slug')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Teams\DeleteInOrg($params['org'], $params['team_slug']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'discussions' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{discussion_number}' == $pathChunks[6]) {
                                            if ('DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'team_slug', 'discussion_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Teams\DeleteDiscussionInOrg($params['org'], $params['team_slug'], $params['discussion_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'comments' == $pathChunks[7]) {
                                                if (array_key_exists(8, $pathChunks) == true && '{comment_number}' == $pathChunks[8]) {
                                                    if ('DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('org', 'team_slug', 'discussion_number', 'comment_number')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        $operation = new Operation\Teams\DeleteDiscussionCommentInOrg($params['org'], $params['team_slug'], $params['discussion_number'], $params['comment_number']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                            return $operation->createResponse($response);
                                                        });
                                                    } elseif (array_key_exists(9, $pathChunks) == true && 'reactions' == $pathChunks[9]) {
                                                        if (array_key_exists(10, $pathChunks) == true && '{reaction_id}' == $pathChunks[10]) {
                                                            if ('DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}' == $call) {
                                                                $requestBodyData = array();
                                                                foreach (\array_keys($params) as $param) {
                                                                    if (\in_array($param, array('org', 'team_slug', 'discussion_number', 'comment_number', 'reaction_id')) != false) {
                                                                        \array_push($requestBodyData, $param);
                                                                    }
                                                                }
                                                                $operation = new Operation\Reactions\DeleteForTeamDiscussionComment($params['org'], $params['team_slug'], $params['discussion_number'], $params['comment_number'], $params['reaction_id']);
                                                                $request = $operation->createRequest($requestBodyData);
                                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                                    return $operation->createResponse($response);
                                                                });
                                                            }
                                                        }
                                                    }
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'reactions' == $pathChunks[7]) {
                                                if (array_key_exists(8, $pathChunks) == true && '{reaction_id}' == $pathChunks[8]) {
                                                    if ('DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('org', 'team_slug', 'discussion_number', 'reaction_id')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        $operation = new Operation\Reactions\DeleteForTeamDiscussion($params['org'], $params['team_slug'], $params['discussion_number'], $params['reaction_id']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'external-groups' == $pathChunks[5]) {
                                        if ('DELETE /orgs/{org}/teams/{team_slug}/external-groups' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'team_slug')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Teams\UnlinkExternalIdpGroupFromTeamForOrg($params['org'], $params['team_slug']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'memberships' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{username}' == $pathChunks[6]) {
                                            if ('DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'team_slug', 'username')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Teams\RemoveMembershipForUserInOrg($params['org'], $params['team_slug'], $params['username']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'projects' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{project_id}' == $pathChunks[6]) {
                                            if ('DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'team_slug', 'project_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Teams\RemoveProjectInOrg($params['org'], $params['team_slug'], $params['project_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'repos' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{owner}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{repo}' == $pathChunks[7]) {
                                                if ('DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'team_slug', 'owner', 'repo')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Teams\RemoveRepoInOrg($params['org'], $params['team_slug'], $params['owner'], $params['repo']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'projects' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'columns' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'cards' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{card_id}' == $pathChunks[4]) {
                                    if ('DELETE /projects/columns/cards/{card_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('card_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀Cards🌀CbCardIdRcb();
                                        }
                                        $operation = new Operation\Projects\DeleteCard($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\Cards\CbCardIdRcb::class], $params['card_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Projects\DeleteCard\Response\Applicationjson\H403|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && '{column_id}' == $pathChunks[3]) {
                                if ('DELETE /projects/columns/{column_id}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('column_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀Columns🌀CbColumnIdRcb();
                                    }
                                    $operation = new Operation\Projects\DeleteColumn($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\Columns\CbColumnIdRcb::class], $params['column_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && '{project_id}' == $pathChunks[2]) {
                            if ('DELETE /projects/{project_id}' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('project_id')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb();
                                }
                                $operation = new Operation\Projects\Delete($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb::class], $params['project_id']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Projects\DeleteCard\Response\Applicationjson\H403|Schema\BasicError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && 'collaborators' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('DELETE /projects/{project_id}/collaborators/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('project_id', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb🌀Collaborators🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Projects\RemoveCollaborator($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb::class], $params['project_id'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'repos' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{owner}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{repo}' == $pathChunks[3]) {
                                if ('DELETE /repos/{owner}/{repo}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('owner', 'repo')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb();
                                    }
                                    $operation = new Operation\Repos\Delete($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb::class], $params['owner'], $params['repo']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Orgs\RemoveOutsideCollaborator\Response\Applicationjson\H422|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                } elseif (array_key_exists(4, $pathChunks) == true && 'actions' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'artifacts' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{artifact_id}' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'artifact_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\DeleteArtifact($params['owner'], $params['repo'], $params['artifact_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'caches' == $pathChunks[5]) {
                                        if ('DELETE /repos/{owner}/{repo}/actions/caches' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'key', 'ref')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Caches::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Caches::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Caches();
                                            }
                                            $operation = new Operation\Actions\DeleteActionsCacheByKey($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Caches::class], $params['owner'], $params['repo'], $params['key'], $params['ref']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ActionsCacheList {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{cache_id}' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'cache_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\DeleteActionsCacheById($params['owner'], $params['repo'], $params['cache_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'runners' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{runner_id}' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'runner_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\DeleteSelfHostedRunnerFromRepo($params['owner'], $params['repo'], $params['runner_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'labels' == $pathChunks[7]) {
                                                if ('DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'runner_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                    }
                                                    $operation = new Operation\Actions\RemoveAllCustomLabelsFromSelfHostedRunnerForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $params['owner'], $params['repo'], $params['runner_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                } elseif (array_key_exists(8, $pathChunks) == true && '{name}' == $pathChunks[8]) {
                                                    if ('DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'runner_id', 'name')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels\CbNameRcb::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels🌀CbNameRcb();
                                                        }
                                                        $operation = new Operation\Actions\RemoveCustomLabelFromSelfHostedRunnerForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels\CbNameRcb::class], $params['owner'], $params['repo'], $params['runner_id'], $params['name']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'runs' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{run_id}' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/actions/runs/{run_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'run_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\DeleteWorkflowRun($params['owner'], $params['repo'], $params['run_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'logs' == $pathChunks[7]) {
                                                if ('DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'run_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Logs::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Logs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runs🌀CbRunIdRcb🌀Logs();
                                                    }
                                                    $operation = new Operation\Actions\DeleteWorkflowRunLogs($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runs\CbRunIdRcb\Logs::class], $params['owner'], $params['repo'], $params['run_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'secrets' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{secret_name}' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'secret_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\DeleteRepoSecret($params['owner'], $params['repo'], $params['secret_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'variables' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{name}' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/actions/variables/{name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\DeleteRepoVariable($params['owner'], $params['repo'], $params['name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'autolinks' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{autolink_id}' == $pathChunks[5]) {
                                        if ('DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'autolink_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks\CbAutolinkIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks\CbAutolinkIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Autolinks🌀CbAutolinkIdRcb();
                                            }
                                            $operation = new Operation\Repos\DeleteAutolink($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Autolinks\CbAutolinkIdRcb::class], $params['owner'], $params['repo'], $params['autolink_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'automated-security-fixes' == $pathChunks[4]) {
                                    if ('DELETE /repos/{owner}/{repo}/automated-security-fixes' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Repos\DisableAutomatedSecurityFixes($params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'branches' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{branch}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'protection' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/branches/{branch}/protection' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection();
                                                }
                                                $operation = new Operation\Repos\DeleteBranchProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class], $params['owner'], $params['repo'], $params['branch']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'enforce_admins' == $pathChunks[7]) {
                                                if ('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀EnforceAdmins();
                                                    }
                                                    $operation = new Operation\Repos\DeleteAdminBranchProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\EnforceAdmins::class], $params['owner'], $params['repo'], $params['branch']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'required_pull_request_reviews' == $pathChunks[7]) {
                                                if ('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredPullRequestReviews();
                                                    }
                                                    $operation = new Operation\Repos\DeletePullRequestReviewProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredPullRequestReviews::class], $params['owner'], $params['repo'], $params['branch']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'required_signatures' == $pathChunks[7]) {
                                                if ('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredSignatures();
                                                    }
                                                    $operation = new Operation\Repos\DeleteCommitSignatureProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredSignatures::class], $params['owner'], $params['repo'], $params['branch']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'required_status_checks' == $pathChunks[7]) {
                                                if ('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Repos\RemoveStatusCheckProtection($params['owner'], $params['repo'], $params['branch']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                } elseif (array_key_exists(8, $pathChunks) == true && 'contexts' == $pathChunks[8]) {
                                                    if ('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredStatusChecks🌀Contexts();
                                                        }
                                                        $operation = new Operation\Repos\RemoveStatusCheckContexts($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class], $params['owner'], $params['repo'], $params['branch']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WebHookHeader\UserAgent|Schema\BasicError|Schema\ValidationError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'restrictions' == $pathChunks[7]) {
                                                if ('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Repos\DeleteAccessRestrictions($params['owner'], $params['repo'], $params['branch']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                } elseif (array_key_exists(8, $pathChunks) == true && 'apps' == $pathChunks[8]) {
                                                    if ('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Apps();
                                                        }
                                                        $operation = new Operation\Repos\RemoveAppAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class], $params['owner'], $params['repo'], $params['branch']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Integration|Schema\ValidationError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                } elseif (array_key_exists(8, $pathChunks) == true && 'teams' == $pathChunks[8]) {
                                                    if ('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Teams();
                                                        }
                                                        $operation = new Operation\Repos\RemoveTeamAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class], $params['owner'], $params['repo'], $params['branch']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Team|Schema\ValidationError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                } elseif (array_key_exists(8, $pathChunks) == true && 'users' == $pathChunks[8]) {
                                                    if ('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Users();
                                                        }
                                                        $operation = new Operation\Repos\RemoveUserAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class], $params['owner'], $params['repo'], $params['branch']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser|Schema\ValidationError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'code-scanning' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'analyses' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{analysis_id}' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'analysis_id', 'confirm_delete')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Analyses\CbAnalysisIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Analyses\CbAnalysisIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀CodeDashScanning🌀Analyses🌀CbAnalysisIdRcb();
                                                }
                                                $operation = new Operation\CodeScanning\DeleteAnalysis($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\CodeDashScanning\Analyses\CbAnalysisIdRcb::class], $params['owner'], $params['repo'], $params['analysis_id'], $params['confirm_delete']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\CodeScanningAnalysisDeletion|Schema\BasicError|Schema\ScimError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'codespaces' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'secrets' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{secret_name}' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'secret_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Codespaces\DeleteRepoSecret($params['owner'], $params['repo'], $params['secret_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'collaborators' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{username}' == $pathChunks[5]) {
                                        if ('DELETE /repos/{owner}/{repo}/collaborators/{username}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'username')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Repos\RemoveCollaborator($params['owner'], $params['repo'], $params['username']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'comments' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{comment_id}' == $pathChunks[5]) {
                                        if ('DELETE /repos/{owner}/{repo}/comments/{comment_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'comment_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Comments🌀CbCommentIdRcb();
                                            }
                                            $operation = new Operation\Repos\DeleteCommitComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Comments\CbCommentIdRcb::class], $params['owner'], $params['repo'], $params['comment_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'reactions' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{reaction_id}' == $pathChunks[7]) {
                                                if ('DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'comment_id', 'reaction_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Reactions\DeleteForCommitComment($params['owner'], $params['repo'], $params['comment_id'], $params['reaction_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'contents' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{path}' == $pathChunks[5]) {
                                        if ('DELETE /repos/{owner}/{repo}/contents/{path}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'path')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Contents🌀CbPathRcb();
                                            }
                                            $operation = new Operation\Repos\DeleteFile($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class], $params['owner'], $params['repo'], $params['path']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\FileCommit|Schema\ValidationError|Schema\BasicError|Schema\Operation\CodeScanning\ListAlertsForEnterprise\Response\Applicationjson\H503 {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'dependabot' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'secrets' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{secret_name}' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'secret_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Dependabot\DeleteRepoSecret($params['owner'], $params['repo'], $params['secret_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'deployments' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{deployment_id}' == $pathChunks[5]) {
                                        if ('DELETE /repos/{owner}/{repo}/deployments/{deployment_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'deployment_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Deployments🌀CbDeploymentIdRcb();
                                            }
                                            $operation = new Operation\Repos\DeleteDeployment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Deployments\CbDeploymentIdRcb::class], $params['owner'], $params['repo'], $params['deployment_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError|Schema\ValidationErrorSimple {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'environments' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{environment_name}' == $pathChunks[5]) {
                                        if ('DELETE /repos/{owner}/{repo}/environments/{environment_name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'environment_name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Repos\DeleteAnEnvironment($params['owner'], $params['repo'], $params['environment_name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'deployment-branch-policies' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{branch_policy_id}' == $pathChunks[7]) {
                                                if ('DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'environment_name', 'branch_policy_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Repos\DeleteDeploymentBranchPolicy($params['owner'], $params['repo'], $params['environment_name'], $params['branch_policy_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'git' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'refs' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{ref}' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/git/refs/{ref}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'ref')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs\CbRefRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs\CbRefRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Git🌀Refs🌀CbRefRcb();
                                                }
                                                $operation = new Operation\Git\DeleteRef($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Git\Refs\CbRefRcb::class], $params['owner'], $params['repo'], $params['ref']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'hooks' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{hook_id}' == $pathChunks[5]) {
                                        if ('DELETE /repos/{owner}/{repo}/hooks/{hook_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'hook_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Hooks🌀CbHookIdRcb();
                                            }
                                            $operation = new Operation\Repos\DeleteWebhook($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Hooks\CbHookIdRcb::class], $params['owner'], $params['repo'], $params['hook_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'import' == $pathChunks[4]) {
                                    if ('DELETE /repos/{owner}/{repo}/import' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Import();
                                        }
                                        $operation = new Operation\Migrations\CancelImport($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'interaction-limits' == $pathChunks[4]) {
                                    if ('DELETE /repos/{owner}/{repo}/interaction-limits' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Interactions\RemoveRestrictionsForRepo($params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'invitations' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{invitation_id}' == $pathChunks[5]) {
                                        if ('DELETE /repos/{owner}/{repo}/invitations/{invitation_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'invitation_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Repos\DeleteInvitation($params['owner'], $params['repo'], $params['invitation_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'issues' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'comments' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{comment_id}' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'comment_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Issues\DeleteComment($params['owner'], $params['repo'], $params['comment_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'reactions' == $pathChunks[7]) {
                                                if (array_key_exists(8, $pathChunks) == true && '{reaction_id}' == $pathChunks[8]) {
                                                    if ('DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'comment_id', 'reaction_id')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        $operation = new Operation\Reactions\DeleteForIssueComment($params['owner'], $params['repo'], $params['comment_id'], $params['reaction_id']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{issue_number}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'assignees' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'issue_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Assignees();
                                                }
                                                $operation = new Operation\Issues\RemoveAssignees($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Assignees::class], $params['owner'], $params['repo'], $params['issue_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Issue {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'labels' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'issue_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Labels();
                                                }
                                                $operation = new Operation\Issues\RemoveAllLabels($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class], $params['owner'], $params['repo'], $params['issue_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{name}' == $pathChunks[7]) {
                                                if ('DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'issue_number', 'name')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels\CbNameRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels\CbNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Labels🌀CbNameRcb();
                                                    }
                                                    $operation = new Operation\Issues\RemoveLabel($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels\CbNameRcb::class], $params['owner'], $params['repo'], $params['issue_number'], $params['name']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Label|Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'lock' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'issue_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Lock::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Lock::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Lock();
                                                }
                                                $operation = new Operation\Issues\Unlock($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Lock::class], $params['owner'], $params['repo'], $params['issue_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'reactions' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{reaction_id}' == $pathChunks[7]) {
                                                if ('DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'issue_number', 'reaction_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Reactions\DeleteForIssue($params['owner'], $params['repo'], $params['issue_number'], $params['reaction_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'keys' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{key_id}' == $pathChunks[5]) {
                                        if ('DELETE /repos/{owner}/{repo}/keys/{key_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'key_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Repos\DeleteDeployKey($params['owner'], $params['repo'], $params['key_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'labels' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{name}' == $pathChunks[5]) {
                                        if ('DELETE /repos/{owner}/{repo}/labels/{name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Issues\DeleteLabel($params['owner'], $params['repo'], $params['name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'lfs' == $pathChunks[4]) {
                                    if ('DELETE /repos/{owner}/{repo}/lfs' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Repos\DisableLfsForRepo($params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'milestones' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{milestone_number}' == $pathChunks[5]) {
                                        if ('DELETE /repos/{owner}/{repo}/milestones/{milestone_number}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'milestone_number')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Milestones🌀CbMilestoneNumberRcb();
                                            }
                                            $operation = new Operation\Issues\DeleteMilestone($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Milestones\CbMilestoneNumberRcb::class], $params['owner'], $params['repo'], $params['milestone_number']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'pages' == $pathChunks[4]) {
                                    if ('DELETE /repos/{owner}/{repo}/pages' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages();
                                        }
                                        $operation = new Operation\Repos\DeletePagesSite($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ValidationError|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'pulls' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'comments' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{comment_id}' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'comment_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀Comments🌀CbCommentIdRcb();
                                                }
                                                $operation = new Operation\Pulls\DeleteReviewComment($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\Comments\CbCommentIdRcb::class], $params['owner'], $params['repo'], $params['comment_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'reactions' == $pathChunks[7]) {
                                                if (array_key_exists(8, $pathChunks) == true && '{reaction_id}' == $pathChunks[8]) {
                                                    if ('DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'comment_id', 'reaction_id')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        $operation = new Operation\Reactions\DeleteForPullRequestComment($params['owner'], $params['repo'], $params['comment_id'], $params['reaction_id']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{pull_number}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'requested_reviewers' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'pull_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀RequestedReviewers();
                                                }
                                                $operation = new Operation\Pulls\RemoveRequestedReviewers($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\RequestedReviewers::class], $params['owner'], $params['repo'], $params['pull_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestSimple|Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'reviews' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{review_id}' == $pathChunks[7]) {
                                                if ('DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'pull_number', 'review_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Reviews🌀CbReviewIdRcb();
                                                    }
                                                    $operation = new Operation\Pulls\DeletePendingReview($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class], $params['owner'], $params['repo'], $params['pull_number'], $params['review_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestReview|Schema\ValidationErrorSimple|Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'releases' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'assets' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{asset_id}' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'asset_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Repos\DeleteReleaseAsset($params['owner'], $params['repo'], $params['asset_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && '{release_id}' == $pathChunks[5]) {
                                        if ('DELETE /repos/{owner}/{repo}/releases/{release_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'release_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Repos\DeleteRelease($params['owner'], $params['repo'], $params['release_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'reactions' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{reaction_id}' == $pathChunks[7]) {
                                                if ('DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'release_id', 'reaction_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Reactions\DeleteForRelease($params['owner'], $params['repo'], $params['release_id'], $params['reaction_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'subscription' == $pathChunks[4]) {
                                    if ('DELETE /repos/{owner}/{repo}/subscription' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Activity\DeleteRepoSubscription($params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'tags' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'protection' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{tag_protection_id}' == $pathChunks[6]) {
                                            if ('DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'tag_protection_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection\CbTagProtectionIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection\CbTagProtectionIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Tags🌀Protection🌀CbTagProtectionIdRcb();
                                                }
                                                $operation = new Operation\Repos\DeleteTagProtection($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Tags\Protection\CbTagProtectionIdRcb::class], $params['owner'], $params['repo'], $params['tag_protection_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'vulnerability-alerts' == $pathChunks[4]) {
                                    if ('DELETE /repos/{owner}/{repo}/vulnerability-alerts' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Repos\DisableVulnerabilityAlerts($params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'repositories' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{repository_id}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'environments' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{environment_name}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'secrets' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{secret_name}' == $pathChunks[6]) {
                                            if ('DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('repository_id', 'environment_name', 'secret_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\DeleteEnvironmentSecret($params['repository_id'], $params['environment_name'], $params['secret_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'variables' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{name}' == $pathChunks[6]) {
                                            if ('DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('repository_id', 'name', 'environment_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\DeleteEnvironmentVariable($params['repository_id'], $params['name'], $params['environment_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'scim' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'v2' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'organizations' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{org}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'Users' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{scim_user_id}' == $pathChunks[6]) {
                                            if ('DELETE /scim/v2/organizations/{org}/Users/{scim_user_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'scim_user_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users\CbScimUserIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users\CbScimUserIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Scim🌀V2🌀Organizations🌀CbOrgRcb🌀Users🌀CbScimUserIdRcb();
                                                }
                                                $operation = new Operation\Scim\DeleteUserFromOrg($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users\CbScimUserIdRcb::class], $params['org'], $params['scim_user_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ScimError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'teams' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{team_id}' == $pathChunks[2]) {
                            if ('DELETE /teams/{team_id}' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array('team_id')) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb();
                                }
                                $operation = new Operation\Teams\DeleteLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb::class], $params['team_id']);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError|Schema\ValidationError {
                                    return $operation->createResponse($response);
                                });
                            } elseif (array_key_exists(3, $pathChunks) == true && 'discussions' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{discussion_number}' == $pathChunks[4]) {
                                    if ('DELETE /teams/{team_id}/discussions/{discussion_number}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('team_id', 'discussion_number')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Teams\DeleteDiscussionLegacy($params['team_id'], $params['discussion_number']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'comments' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{comment_number}' == $pathChunks[6]) {
                                            if ('DELETE /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('team_id', 'discussion_number', 'comment_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Teams\DeleteDiscussionCommentLegacy($params['team_id'], $params['discussion_number'], $params['comment_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'members' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('DELETE /teams/{team_id}/members/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('team_id', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Teams\RemoveMemberLegacy($params['team_id'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'memberships' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('DELETE /teams/{team_id}/memberships/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('team_id', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Teams\RemoveMembershipForUserLegacy($params['team_id'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'projects' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{project_id}' == $pathChunks[4]) {
                                    if ('DELETE /teams/{team_id}/projects/{project_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('team_id', 'project_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Projects🌀CbProjectIdRcb();
                                        }
                                        $operation = new Operation\Teams\RemoveProjectLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class], $params['team_id'], $params['project_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'repos' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{owner}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{repo}' == $pathChunks[5]) {
                                        if ('DELETE /teams/{team_id}/repos/{owner}/{repo}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('team_id', 'owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Teams\RemoveRepoLegacy($params['team_id'], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'user' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'blocks' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{username}' == $pathChunks[3]) {
                                if ('DELETE /user/blocks/{username}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\Blocks\CbUsernameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Blocks\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Blocks🌀CbUsernameRcb();
                                    }
                                    $operation = new Operation\Users\Unblock($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Blocks\CbUsernameRcb::class], $params['username']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'codespaces' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'secrets' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{secret_name}' == $pathChunks[4]) {
                                    if ('DELETE /user/codespaces/secrets/{secret_name}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('secret_name')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Codespaces\DeleteSecretForAuthenticatedUser($params['secret_name']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'repositories' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{repository_id}' == $pathChunks[6]) {
                                            if ('DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('secret_name', 'repository_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀Secrets🌀CbSecretNameRcb🌀Repositories🌀CbRepositoryIdRcb();
                                                }
                                                $operation = new Operation\Codespaces\RemoveRepositoryForSecretForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class], $params['secret_name'], $params['repository_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && '{codespace_name}' == $pathChunks[3]) {
                                if ('DELETE /user/codespaces/{codespace_name}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('codespace_name')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀CbCodespaceNameRcb();
                                    }
                                    $operation = new Operation\Codespaces\DeleteForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\CbCodespaceNameRcb::class], $params['codespace_name']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AuditLogEvent\Config|Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'emails' == $pathChunks[2]) {
                            if ('DELETE /user/emails' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array()) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\Emails::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\Emails::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Emails();
                                }
                                $operation = new Operation\Users\DeleteEmailForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Emails::class]);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError|Schema\ValidationError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'following' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{username}' == $pathChunks[3]) {
                                if ('DELETE /user/following/{username}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\Following\CbUsernameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Following\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Following🌀CbUsernameRcb();
                                    }
                                    $operation = new Operation\Users\Unfollow($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Following\CbUsernameRcb::class], $params['username']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'gpg_keys' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{gpg_key_id}' == $pathChunks[3]) {
                                if ('DELETE /user/gpg_keys/{gpg_key_id}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('gpg_key_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\GpgKeys\CbGpgKeyIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\GpgKeys\CbGpgKeyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀GpgKeys🌀CbGpgKeyIdRcb();
                                    }
                                    $operation = new Operation\Users\DeleteGpgKeyForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\GpgKeys\CbGpgKeyIdRcb::class], $params['gpg_key_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError|Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'installations' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{installation_id}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'repositories' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{repository_id}' == $pathChunks[5]) {
                                        if ('DELETE /user/installations/{installation_id}/repositories/{repository_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('installation_id', 'repository_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories\CbRepositoryIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories\CbRepositoryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Installations🌀CbInstallationIdRcb🌀Repositories🌀CbRepositoryIdRcb();
                                            }
                                            $operation = new Operation\Apps\RemoveRepoFromInstallationForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories\CbRepositoryIdRcb::class], $params['installation_id'], $params['repository_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'interaction-limits' == $pathChunks[2]) {
                            if ('DELETE /user/interaction-limits' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array()) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                $operation = new Operation\Interactions\RemoveRestrictionsForAuthenticatedUser();
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'keys' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{key_id}' == $pathChunks[3]) {
                                if ('DELETE /user/keys/{key_id}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('key_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\Keys\CbKeyIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Keys\CbKeyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Keys🌀CbKeyIdRcb();
                                    }
                                    $operation = new Operation\Users\DeletePublicSshKeyForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Keys\CbKeyIdRcb::class], $params['key_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'migrations' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{migration_id}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'archive' == $pathChunks[4]) {
                                    if ('DELETE /user/migrations/{migration_id}/archive' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('migration_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Archive::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Archive::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Migrations🌀CbMigrationIdRcb🌀Archive();
                                        }
                                        $operation = new Operation\Migrations\DeleteArchiveForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Archive::class], $params['migration_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'repos' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{repo_name}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'lock' == $pathChunks[6]) {
                                            if ('DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('migration_id', 'repo_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Repos\CbRepoNameRcb\Lock::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Repos\CbRepoNameRcb\Lock::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Migrations🌀CbMigrationIdRcb🌀Repos🌀CbRepoNameRcb🌀Lock();
                                                }
                                                $operation = new Operation\Migrations\UnlockRepoForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Migrations\CbMigrationIdRcb\Repos\CbRepoNameRcb\Lock::class], $params['migration_id'], $params['repo_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'packages' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{package_type}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{package_name}' == $pathChunks[4]) {
                                    if ('DELETE /user/packages/{package_type}/{package_name}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('package_type', 'package_name')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb();
                                        }
                                        $operation = new Operation\Packages\DeletePackageForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb::class], $params['package_type'], $params['package_name']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'versions' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{package_version_id}' == $pathChunks[6]) {
                                            if ('DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('package_type', 'package_name', 'package_version_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb();
                                                }
                                                $operation = new Operation\Packages\DeletePackageVersionForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class], $params['package_type'], $params['package_name'], $params['package_version_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'repository_invitations' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{invitation_id}' == $pathChunks[3]) {
                                if ('DELETE /user/repository_invitations/{invitation_id}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('invitation_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\RepositoryInvitations\CbInvitationIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\RepositoryInvitations\CbInvitationIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀RepositoryInvitations🌀CbInvitationIdRcb();
                                    }
                                    $operation = new Operation\Repos\DeclineInvitationForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\RepositoryInvitations\CbInvitationIdRcb::class], $params['invitation_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'ssh_signing_keys' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{ssh_signing_key_id}' == $pathChunks[3]) {
                                if ('DELETE /user/ssh_signing_keys/{ssh_signing_key_id}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('ssh_signing_key_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\SshSigningKeys\CbSshSigningKeyIdRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\SshSigningKeys\CbSshSigningKeyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀SshSigningKeys🌀CbSshSigningKeyIdRcb();
                                    }
                                    $operation = new Operation\Users\DeleteSshSigningKeyForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\SshSigningKeys\CbSshSigningKeyIdRcb::class], $params['ssh_signing_key_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'starred' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{owner}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{repo}' == $pathChunks[4]) {
                                    if ('DELETE /user/starred/{owner}/{repo}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Starred🌀CbOwnerRcb🌀CbRepoRcb();
                                        }
                                        $operation = new Operation\Activity\UnstarRepoForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'users' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{username}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'packages' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{package_type}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{package_name}' == $pathChunks[5]) {
                                        if ('DELETE /users/{username}/packages/{package_type}/{package_name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('package_type', 'package_name', 'username')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb();
                                            }
                                            $operation = new Operation\Packages\DeletePackageForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb::class], $params['package_type'], $params['package_name'], $params['username']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'versions' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{package_version_id}' == $pathChunks[7]) {
                                                if ('DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('package_type', 'package_name', 'username', 'package_version_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Users🌀CbUsernameRcb🌀Packages🌀CbPackageTypeRcb🌀CbPackageNameRcb🌀Versions🌀CbPackageVersionIdRcb();
                                                    }
                                                    $operation = new Operation\Packages\DeletePackageVersionForUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Users\CbUsernameRcb\Packages\CbPackageTypeRcb\CbPackageNameRcb\Versions\CbPackageVersionIdRcb::class], $params['package_type'], $params['package_name'], $params['username'], $params['package_version_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                break;
            case 'PUT':
                if (array_key_exists(0, $pathChunks) == true && '' == $pathChunks[0]) {
                    if (array_key_exists(1, $pathChunks) == true && 'app' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'installations' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{installation_id}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'suspended' == $pathChunks[4]) {
                                    if ('PUT /app/installations/{installation_id}/suspended' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('installation_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\App\Installations\CbInstallationIdRcb\Suspended::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb\Suspended::class] = $this->hydrators->getObjectMapperOperation🌀App🌀Installations🌀CbInstallationIdRcb🌀Suspended();
                                        }
                                        $operation = new Operation\Apps\SuspendInstallation($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\App\Installations\CbInstallationIdRcb\Suspended::class], $params['installation_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'enterprises' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{enterprise}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'actions' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'oidc' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'customization' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'issuer' == $pathChunks[6]) {
                                            if ('PUT /enterprises/{enterprise}/actions/oidc/customization/issuer' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('enterprise')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\SetActionsOidcCustomIssuerPolicyForEnterprise($this->requestSchemaValidator, $params['enterprise']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'permissions' == $pathChunks[4]) {
                                    if ('PUT /enterprises/{enterprise}/actions/permissions' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('enterprise')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\EnterpriseAdmin\SetGithubActionsPermissionsEnterprise($this->requestSchemaValidator, $params['enterprise']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'organizations' == $pathChunks[5]) {
                                        if ('PUT /enterprises/{enterprise}/actions/permissions/organizations' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\EnterpriseAdmin\SetSelectedOrganizationsEnabledGithubActionsEnterprise($this->requestSchemaValidator, $params['enterprise']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{org_id}' == $pathChunks[6]) {
                                            if ('PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('enterprise', 'org_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\EnterpriseAdmin\EnableSelectedOrganizationGithubActionsEnterprise($params['enterprise'], $params['org_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'selected-actions' == $pathChunks[5]) {
                                        if ('PUT /enterprises/{enterprise}/actions/permissions/selected-actions' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\EnterpriseAdmin\SetAllowedActionsEnterprise($this->requestSchemaValidator, $params['enterprise']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'workflow' == $pathChunks[5]) {
                                        if ('PUT /enterprises/{enterprise}/actions/permissions/workflow' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('enterprise')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Actions\SetGithubActionsDefaultWorkflowPermissionsEnterprise($this->requestSchemaValidator, $params['enterprise']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'runner-groups' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{runner_group_id}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'organizations' == $pathChunks[6]) {
                                            if ('PUT /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('enterprise', 'runner_group_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\EnterpriseAdmin\SetOrgAccessToSelfHostedRunnerGroupInEnterprise($this->requestSchemaValidator, $params['enterprise'], $params['runner_group_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{org_id}' == $pathChunks[7]) {
                                                if ('PUT /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('enterprise', 'runner_group_id', 'org_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\EnterpriseAdmin\AddOrgAccessToSelfHostedRunnerGroupInEnterprise($params['enterprise'], $params['runner_group_id'], $params['org_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'runners' == $pathChunks[6]) {
                                            if ('PUT /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('enterprise', 'runner_group_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\EnterpriseAdmin\SetSelfHostedRunnersInGroupForEnterprise($this->requestSchemaValidator, $params['enterprise'], $params['runner_group_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{runner_id}' == $pathChunks[7]) {
                                                if ('PUT /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('enterprise', 'runner_group_id', 'runner_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\EnterpriseAdmin\AddSelfHostedRunnerToGroupForEnterprise($params['enterprise'], $params['runner_group_id'], $params['runner_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'runners' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{runner_id}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'labels' == $pathChunks[6]) {
                                            if ('PUT /enterprises/{enterprise}/actions/runners/{runner_id}/labels' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('enterprise', 'runner_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Enterprises🌀CbEnterpriseRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                }
                                                $operation = new Operation\EnterpriseAdmin\SetCustomLabelsForSelfHostedRunnerForEnterprise($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Enterprises\CbEnterpriseRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $params['enterprise'], $params['runner_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'gists' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{gist_id}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'star' == $pathChunks[3]) {
                                if ('PUT /gists/{gist_id}/star' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('gist_id')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Gists\CbGistIdRcb\Star::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Star::class] = $this->hydrators->getObjectMapperOperation🌀Gists🌀CbGistIdRcb🌀Star();
                                    }
                                    $operation = new Operation\Gists\Star($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Gists\CbGistIdRcb\Star::class], $params['gist_id']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'notifications' == $pathChunks[1]) {
                        if ('PUT /notifications' == $call) {
                            $requestBodyData = array();
                            foreach (\array_keys($params) as $param) {
                                if (\in_array($param, array()) != false) {
                                    \array_push($requestBodyData, $param);
                                }
                            }
                            if (\array_key_exists(Hydrator\Operation\Notifications::class, $this->hydrator) == false) {
                                $this->hydrator[Hydrator\Operation\Notifications::class] = $this->hydrators->getObjectMapperOperation🌀Notifications();
                            }
                            $operation = new Operation\Activity\MarkNotificationsAsRead($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Notifications::class]);
                            $request = $operation->createRequest($requestBodyData);
                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Activity\MarkNotificationsAsRead\Response\Applicationjson\H202|Schema\BasicError {
                                return $operation->createResponse($response);
                            });
                        } elseif (array_key_exists(2, $pathChunks) == true && 'threads' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{thread_id}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'subscription' == $pathChunks[4]) {
                                    if ('PUT /notifications/threads/{thread_id}/subscription' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('thread_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class] = $this->hydrators->getObjectMapperOperation🌀Notifications🌀Threads🌀CbThreadIdRcb🌀Subscription();
                                        }
                                        $operation = new Operation\Activity\SetThreadSubscription($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Notifications\Threads\CbThreadIdRcb\Subscription::class], $params['thread_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ThreadSubscription|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'orgs' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{org}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'actions' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'oidc' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'customization' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'sub' == $pathChunks[6]) {
                                            if ('PUT /orgs/{org}/actions/oidc/customization/sub' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Oidc\Customization\Sub::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Oidc\Customization\Sub::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Oidc🌀Customization🌀Sub();
                                                }
                                                $operation = new Operation\Oidc\UpdateOidcCustomSubTemplateForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Oidc\Customization\Sub::class], $params['org']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'permissions' == $pathChunks[4]) {
                                    if ('PUT /orgs/{org}/actions/permissions' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Actions\SetGithubActionsPermissionsOrganization($this->requestSchemaValidator, $params['org']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'repositories' == $pathChunks[5]) {
                                        if ('PUT /orgs/{org}/actions/permissions/repositories' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Actions\SetSelectedRepositoriesEnabledGithubActionsOrganization($this->requestSchemaValidator, $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{repository_id}' == $pathChunks[6]) {
                                            if ('PUT /orgs/{org}/actions/permissions/repositories/{repository_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'repository_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\EnableSelectedRepositoryGithubActionsOrganization($params['org'], $params['repository_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'selected-actions' == $pathChunks[5]) {
                                        if ('PUT /orgs/{org}/actions/permissions/selected-actions' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Actions\SetAllowedActionsOrganization($this->requestSchemaValidator, $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'workflow' == $pathChunks[5]) {
                                        if ('PUT /orgs/{org}/actions/permissions/workflow' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Actions\SetGithubActionsDefaultWorkflowPermissionsOrganization($this->requestSchemaValidator, $params['org']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'required_workflows' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{required_workflow_id}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if ('PUT /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'required_workflow_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\SetSelectedReposToRequiredWorkflow($this->requestSchemaValidator, $params['org'], $params['required_workflow_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{repository_id}' == $pathChunks[7]) {
                                                if ('PUT /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'required_workflow_id', 'repository_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Actions\AddSelectedRepoToRequiredWorkflow($params['org'], $params['required_workflow_id'], $params['repository_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'runner-groups' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{runner_group_id}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if ('PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'runner_group_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\SetRepoAccessToSelfHostedRunnerGroupInOrg($this->requestSchemaValidator, $params['org'], $params['runner_group_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{repository_id}' == $pathChunks[7]) {
                                                if ('PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'runner_group_id', 'repository_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Actions\AddRepoAccessToSelfHostedRunnerGroupInOrg($params['org'], $params['runner_group_id'], $params['repository_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'runners' == $pathChunks[6]) {
                                            if ('PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'runner_group_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\SetSelfHostedRunnersInGroupForOrg($this->requestSchemaValidator, $params['org'], $params['runner_group_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{runner_id}' == $pathChunks[7]) {
                                                if ('PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'runner_group_id', 'runner_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Actions\AddSelfHostedRunnerToGroupForOrg($params['org'], $params['runner_group_id'], $params['runner_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'runners' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{runner_id}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'labels' == $pathChunks[6]) {
                                            if ('PUT /orgs/{org}/actions/runners/{runner_id}/labels' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'runner_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                }
                                                $operation = new Operation\Actions\SetCustomLabelsForSelfHostedRunnerForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $params['org'], $params['runner_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'secrets' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{secret_name}' == $pathChunks[5]) {
                                        if ('PUT /orgs/{org}/actions/secrets/{secret_name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'secret_name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Actions🌀Secrets🌀CbSecretNameRcb();
                                            }
                                            $operation = new Operation\Actions\CreateOrUpdateOrgSecret($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Actions\Secrets\CbSecretNameRcb::class], $params['org'], $params['secret_name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if ('PUT /orgs/{org}/actions/secrets/{secret_name}/repositories' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'secret_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\SetSelectedReposForOrgSecret($this->requestSchemaValidator, $params['org'], $params['secret_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{repository_id}' == $pathChunks[7]) {
                                                if ('PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'secret_name', 'repository_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Actions\AddSelectedRepoToOrgSecret($params['org'], $params['secret_name'], $params['repository_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'variables' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{name}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if ('PUT /orgs/{org}/actions/variables/{name}/repositories' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\SetSelectedReposForOrgVariable($this->requestSchemaValidator, $params['org'], $params['name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{repository_id}' == $pathChunks[7]) {
                                                if ('PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'name', 'repository_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Actions\AddSelectedRepoToOrgVariable($params['org'], $params['name'], $params['repository_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'blocks' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('PUT /orgs/{org}/blocks/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Blocks\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Blocks\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Blocks🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\BlockUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Blocks\CbUsernameRcb::class], $params['org'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'codespaces' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'billing' == $pathChunks[4]) {
                                    if ('PUT /orgs/{org}/codespaces/billing' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Billing();
                                        }
                                        $operation = new Operation\Codespaces\SetCodespacesBilling($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Billing::class], $params['org']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'secrets' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{secret_name}' == $pathChunks[5]) {
                                        if ('PUT /orgs/{org}/codespaces/secrets/{secret_name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'secret_name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb();
                                            }
                                            $operation = new Operation\Codespaces\CreateOrUpdateOrgSecret($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb::class], $params['org'], $params['secret_name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject|Schema\BasicError|Schema\ValidationError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if ('PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'secret_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb🌀Repositories();
                                                }
                                                $operation = new Operation\Codespaces\SetSelectedReposForOrgSecret($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories::class], $params['org'], $params['secret_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{repository_id}' == $pathChunks[7]) {
                                                if ('PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'secret_name', 'repository_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb🌀Repositories🌀CbRepositoryIdRcb();
                                                    }
                                                    $operation = new Operation\Codespaces\AddSelectedRepoToOrgSecret($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class], $params['org'], $params['secret_name'], $params['repository_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError|Schema\ValidationError {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'dependabot' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'secrets' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{secret_name}' == $pathChunks[5]) {
                                        if ('PUT /orgs/{org}/dependabot/secrets/{secret_name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'secret_name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Dependabot🌀Secrets🌀CbSecretNameRcb();
                                            }
                                            $operation = new Operation\Dependabot\CreateOrUpdateOrgSecret($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Dependabot\Secrets\CbSecretNameRcb::class], $params['org'], $params['secret_name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'repositories' == $pathChunks[6]) {
                                            if ('PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'secret_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Dependabot\SetSelectedReposForOrgSecret($this->requestSchemaValidator, $params['org'], $params['secret_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && '{repository_id}' == $pathChunks[7]) {
                                                if ('PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'secret_name', 'repository_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Dependabot\AddSelectedRepoToOrgSecret($params['org'], $params['secret_name'], $params['repository_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'interaction-limits' == $pathChunks[3]) {
                                if ('PUT /orgs/{org}/interaction-limits' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('org')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\InteractionLimits::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\InteractionLimits::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀InteractionLimits();
                                    }
                                    $operation = new Operation\Interactions\SetRestrictionsForOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\InteractionLimits::class], $params['org']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\InteractionLimitResponse|Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'memberships' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('PUT /orgs/{org}/memberships/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Memberships🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\SetMembershipForUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Memberships\CbUsernameRcb::class], $params['org'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\OrgMembership|Schema\ValidationError|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'outside_collaborators' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('PUT /orgs/{org}/outside_collaborators/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀OutsideCollaborators🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\ConvertMemberToOutsideCollaborator($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\OutsideCollaborators\CbUsernameRcb::class], $params['org'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Gists\CheckIsStarred\Response\Applicationjson\H404|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'public_members' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('PUT /orgs/{org}/public_members/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('org', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\PublicMembers\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\PublicMembers\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀PublicMembers🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Orgs\SetPublicMembershipForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\PublicMembers\CbUsernameRcb::class], $params['org'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'security-managers' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'teams' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{team_slug}' == $pathChunks[5]) {
                                        if ('PUT /orgs/{org}/security-managers/teams/{team_slug}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('org', 'team_slug')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Orgs\AddSecurityManagerTeam($params['org'], $params['team_slug']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'teams' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{team_slug}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'memberships' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{username}' == $pathChunks[6]) {
                                            if ('PUT /orgs/{org}/teams/{team_slug}/memberships/{username}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'team_slug', 'username')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Memberships\CbUsernameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Memberships\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Memberships🌀CbUsernameRcb();
                                                }
                                                $operation = new Operation\Teams\AddOrUpdateMembershipForUserInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Memberships\CbUsernameRcb::class], $params['org'], $params['team_slug'], $params['username']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamMembership {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'projects' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{project_id}' == $pathChunks[6]) {
                                            if ('PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'team_slug', 'project_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects\CbProjectIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects\CbProjectIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Orgs🌀CbOrgRcb🌀Teams🌀CbTeamSlugRcb🌀Projects🌀CbProjectIdRcb();
                                                }
                                                $operation = new Operation\Teams\AddOrUpdateProjectPermissionsInOrg($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Orgs\CbOrgRcb\Teams\CbTeamSlugRcb\Projects\CbProjectIdRcb::class], $params['org'], $params['team_slug'], $params['project_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Orgs\RemoveOutsideCollaborator\Response\Applicationjson\H422 {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'repos' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{owner}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{repo}' == $pathChunks[7]) {
                                                if ('PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('org', 'team_slug', 'owner', 'repo')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Teams\AddOrUpdateRepoPermissionsInOrg($this->requestSchemaValidator, $params['org'], $params['team_slug'], $params['owner'], $params['repo']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'projects' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{project_id}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'collaborators' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('PUT /projects/{project_id}/collaborators/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('project_id', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Projects🌀CbProjectIdRcb🌀Collaborators🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Projects\AddCollaborator($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Projects\CbProjectIdRcb\Collaborators\CbUsernameRcb::class], $params['project_id'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'repos' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{owner}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{repo}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'actions' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'oidc' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'customization' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'sub' == $pathChunks[7]) {
                                                if ('PUT /repos/{owner}/{repo}/actions/oidc/customization/sub' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Oidc\Customization\Sub::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Oidc\Customization\Sub::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Oidc🌀Customization🌀Sub();
                                                    }
                                                    $operation = new Operation\Actions\SetCustomOidcSubClaimForRepo($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Oidc\Customization\Sub::class], $params['owner'], $params['repo']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject|Schema\BasicError|Schema\ScimError|Schema\ValidationErrorSimple {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'permissions' == $pathChunks[5]) {
                                        if ('PUT /repos/{owner}/{repo}/actions/permissions' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            $operation = new Operation\Actions\SetGithubActionsPermissionsRepository($this->requestSchemaValidator, $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'access' == $pathChunks[6]) {
                                            if ('PUT /repos/{owner}/{repo}/actions/permissions/access' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\SetWorkflowAccessToRepository($this->requestSchemaValidator, $params['owner'], $params['repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'selected-actions' == $pathChunks[6]) {
                                            if ('PUT /repos/{owner}/{repo}/actions/permissions/selected-actions' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\SetAllowedActionsRepository($this->requestSchemaValidator, $params['owner'], $params['repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'workflow' == $pathChunks[6]) {
                                            if ('PUT /repos/{owner}/{repo}/actions/permissions/workflow' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                $operation = new Operation\Actions\SetGithubActionsDefaultWorkflowPermissionsRepository($this->requestSchemaValidator, $params['owner'], $params['repo']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'runners' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{runner_id}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'labels' == $pathChunks[7]) {
                                                if ('PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'runner_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Runners🌀CbRunnerIdRcb🌀Labels();
                                                    }
                                                    $operation = new Operation\Actions\SetCustomLabelsForSelfHostedRunnerForRepo($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Runners\CbRunnerIdRcb\Labels::class], $params['owner'], $params['repo'], $params['runner_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\EnterpriseAdmin\ListLabelsForSelfHostedRunnerForEnterprise\Response\Applicationjson\H200|Schema\BasicError|Schema\ValidationErrorSimple {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'secrets' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{secret_name}' == $pathChunks[6]) {
                                            if ('PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'secret_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Actions🌀Secrets🌀CbSecretNameRcb();
                                                }
                                                $operation = new Operation\Actions\CreateOrUpdateRepoSecret($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Actions\Secrets\CbSecretNameRcb::class], $params['owner'], $params['repo'], $params['secret_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'workflows' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{workflow_id}' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && 'disable' == $pathChunks[7]) {
                                                if ('PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'workflow_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Actions\DisableWorkflow($params['owner'], $params['repo'], $params['workflow_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'enable' == $pathChunks[7]) {
                                                if ('PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'workflow_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    $operation = new Operation\Actions\EnableWorkflow($params['owner'], $params['repo'], $params['workflow_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'automated-security-fixes' == $pathChunks[4]) {
                                    if ('PUT /repos/{owner}/{repo}/automated-security-fixes' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Repos\EnableAutomatedSecurityFixes($params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'branches' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{branch}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'protection' == $pathChunks[6]) {
                                            if ('PUT /repos/{owner}/{repo}/branches/{branch}/protection' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection();
                                                }
                                                $operation = new Operation\Repos\UpdateBranchProtection($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection::class], $params['owner'], $params['repo'], $params['branch']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ProtectedBranch|Schema\BasicError|Schema\ValidationErrorSimple {
                                                    return $operation->createResponse($response);
                                                });
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'required_status_checks' == $pathChunks[7]) {
                                                if (array_key_exists(8, $pathChunks) == true && 'contexts' == $pathChunks[8]) {
                                                    if ('PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀RequiredStatusChecks🌀Contexts();
                                                        }
                                                        $operation = new Operation\Repos\SetStatusCheckContexts($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\RequiredStatusChecks\Contexts::class], $params['owner'], $params['repo'], $params['branch']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\WebHookHeader\UserAgent|Schema\ValidationError|Schema\BasicError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            } elseif (array_key_exists(7, $pathChunks) == true && 'restrictions' == $pathChunks[7]) {
                                                if (array_key_exists(8, $pathChunks) == true && 'apps' == $pathChunks[8]) {
                                                    if ('PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Apps();
                                                        }
                                                        $operation = new Operation\Repos\SetAppAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Apps::class], $params['owner'], $params['repo'], $params['branch']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Integration|Schema\ValidationError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                } elseif (array_key_exists(8, $pathChunks) == true && 'teams' == $pathChunks[8]) {
                                                    if ('PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Teams();
                                                        }
                                                        $operation = new Operation\Repos\SetTeamAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Teams::class], $params['owner'], $params['repo'], $params['branch']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Team|Schema\ValidationError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                } elseif (array_key_exists(8, $pathChunks) == true && 'users' == $pathChunks[8]) {
                                                    if ('PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'branch')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Branches🌀CbBranchRcb🌀Protection🌀Restrictions🌀Users();
                                                        }
                                                        $operation = new Operation\Repos\SetUserAccessRestrictions($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Branches\CbBranchRcb\Protection\Restrictions\Users::class], $params['owner'], $params['repo'], $params['branch']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\SimpleUser|Schema\ValidationError {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'codespaces' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'secrets' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{secret_name}' == $pathChunks[6]) {
                                            if ('PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'secret_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Codespaces🌀Secrets🌀CbSecretNameRcb();
                                                }
                                                $operation = new Operation\Codespaces\CreateOrUpdateRepoSecret($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Codespaces\Secrets\CbSecretNameRcb::class], $params['owner'], $params['repo'], $params['secret_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'collaborators' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{username}' == $pathChunks[5]) {
                                        if ('PUT /repos/{owner}/{repo}/collaborators/{username}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'username')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators\CbUsernameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Collaborators🌀CbUsernameRcb();
                                            }
                                            $operation = new Operation\Repos\AddCollaborator($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Collaborators\CbUsernameRcb::class], $params['owner'], $params['repo'], $params['username']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RepositoryInvitation|Schema\ValidationError|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'contents' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{path}' == $pathChunks[5]) {
                                        if ('PUT /repos/{owner}/{repo}/contents/{path}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'path')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Contents🌀CbPathRcb();
                                            }
                                            $operation = new Operation\Repos\CreateOrUpdateFileContents($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Contents\CbPathRcb::class], $params['owner'], $params['repo'], $params['path']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\FileCommit|Schema\BasicError|Schema\ValidationError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'dependabot' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'secrets' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{secret_name}' == $pathChunks[6]) {
                                            if ('PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'secret_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Dependabot🌀Secrets🌀CbSecretNameRcb();
                                                }
                                                $operation = new Operation\Dependabot\CreateOrUpdateRepoSecret($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Dependabot\Secrets\CbSecretNameRcb::class], $params['owner'], $params['repo'], $params['secret_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'environments' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{environment_name}' == $pathChunks[5]) {
                                        if ('PUT /repos/{owner}/{repo}/environments/{environment_name}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('owner', 'repo', 'environment_name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Environments🌀CbEnvironmentNameRcb();
                                            }
                                            $operation = new Operation\Repos\CreateOrUpdateEnvironment($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb::class], $params['owner'], $params['repo'], $params['environment_name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Environment|Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'deployment-branch-policies' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{branch_policy_id}' == $pathChunks[7]) {
                                                if ('PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'environment_name', 'branch_policy_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies\CbBranchPolicyIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies\CbBranchPolicyIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Environments🌀CbEnvironmentNameRcb🌀DeploymentDashBranchDashPolicies🌀CbBranchPolicyIdRcb();
                                                    }
                                                    $operation = new Operation\Repos\UpdateDeploymentBranchPolicy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Environments\CbEnvironmentNameRcb\DeploymentDashBranchDashPolicies\CbBranchPolicyIdRcb::class], $params['owner'], $params['repo'], $params['environment_name'], $params['branch_policy_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\DeploymentBranchPolicy {
                                                        return $operation->createResponse($response);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'import' == $pathChunks[4]) {
                                    if ('PUT /repos/{owner}/{repo}/import' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Import();
                                        }
                                        $operation = new Operation\Migrations\StartImport($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Import::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Import|Schema\ValidationError|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'interaction-limits' == $pathChunks[4]) {
                                    if ('PUT /repos/{owner}/{repo}/interaction-limits' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\InteractionLimits::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\InteractionLimits::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀InteractionLimits();
                                        }
                                        $operation = new Operation\Interactions\SetRestrictionsForRepo($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\InteractionLimits::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\InteractionLimitResponse {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'issues' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{issue_number}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'labels' == $pathChunks[6]) {
                                            if ('PUT /repos/{owner}/{repo}/issues/{issue_number}/labels' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'issue_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Labels();
                                                }
                                                $operation = new Operation\Issues\SetLabels($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Labels::class], $params['owner'], $params['repo'], $params['issue_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Label|Schema\BasicError|Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'lock' == $pathChunks[6]) {
                                            if ('PUT /repos/{owner}/{repo}/issues/{issue_number}/lock' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'issue_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Lock::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Lock::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Issues🌀CbIssueNumberRcb🌀Lock();
                                                }
                                                $operation = new Operation\Issues\Lock($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Issues\CbIssueNumberRcb\Lock::class], $params['owner'], $params['repo'], $params['issue_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError|Schema\ValidationError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'lfs' == $pathChunks[4]) {
                                    if ('PUT /repos/{owner}/{repo}/lfs' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Lfs::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Lfs::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Lfs();
                                        }
                                        $operation = new Operation\Repos\EnableLfsForRepo($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Lfs::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\AuditLogEvent\Config {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'notifications' == $pathChunks[4]) {
                                    if ('PUT /repos/{owner}/{repo}/notifications' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Notifications::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Notifications::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Notifications();
                                        }
                                        $operation = new Operation\Activity\MarkRepoNotificationsAsRead($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Notifications::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Activity\MarkRepoNotificationsAsRead\Response\Applicationjson\H202 {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'pages' == $pathChunks[4]) {
                                    if ('PUT /repos/{owner}/{repo}/pages' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pages();
                                        }
                                        $operation = new Operation\Repos\UpdateInformationAboutPagesSite($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pages::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ValidationError|Schema\BasicError|Schema\ScimError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'pulls' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{pull_number}' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && 'merge' == $pathChunks[6]) {
                                            if ('PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'pull_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Merge::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Merge::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Merge();
                                                }
                                                $operation = new Operation\Pulls\Merge($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Merge::class], $params['owner'], $params['repo'], $params['pull_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestMergeResult|Schema\Operation\Orgs\RemoveOutsideCollaborator\Response\Applicationjson\H422|Schema\ValidationError|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'reviews' == $pathChunks[6]) {
                                            if (array_key_exists(7, $pathChunks) == true && '{review_id}' == $pathChunks[7]) {
                                                if ('PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}' == $call) {
                                                    $requestBodyData = array();
                                                    foreach (\array_keys($params) as $param) {
                                                        if (\in_array($param, array('owner', 'repo', 'pull_number', 'review_id')) != false) {
                                                            \array_push($requestBodyData, $param);
                                                        }
                                                    }
                                                    if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class, $this->hydrator) == false) {
                                                        $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Reviews🌀CbReviewIdRcb();
                                                    }
                                                    $operation = new Operation\Pulls\UpdateReview($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb::class], $params['owner'], $params['repo'], $params['pull_number'], $params['review_id']);
                                                    $request = $operation->createRequest($requestBodyData);
                                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestReview|Schema\ValidationErrorSimple {
                                                        return $operation->createResponse($response);
                                                    });
                                                } elseif (array_key_exists(8, $pathChunks) == true && 'dismissals' == $pathChunks[8]) {
                                                    if ('PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals' == $call) {
                                                        $requestBodyData = array();
                                                        foreach (\array_keys($params) as $param) {
                                                            if (\in_array($param, array('owner', 'repo', 'pull_number', 'review_id')) != false) {
                                                                \array_push($requestBodyData, $param);
                                                            }
                                                        }
                                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Dismissals::class, $this->hydrator) == false) {
                                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Dismissals::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀Reviews🌀CbReviewIdRcb🌀Dismissals();
                                                        }
                                                        $operation = new Operation\Pulls\DismissReview($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\Reviews\CbReviewIdRcb\Dismissals::class], $params['owner'], $params['repo'], $params['pull_number'], $params['review_id']);
                                                        $request = $operation->createRequest($requestBodyData);
                                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\PullRequestReview|Schema\BasicError|Schema\ValidationErrorSimple {
                                                            return $operation->createResponse($response);
                                                        });
                                                    }
                                                }
                                            }
                                        } elseif (array_key_exists(6, $pathChunks) == true && 'update-branch' == $pathChunks[6]) {
                                            if ('PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('owner', 'repo', 'pull_number')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\UpdateDashBranch::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\UpdateDashBranch::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Pulls🌀CbPullNumberRcb🌀UpdateDashBranch();
                                                }
                                                $operation = new Operation\Pulls\UpdateBranch($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Pulls\CbPullNumberRcb\UpdateDashBranch::class], $params['owner'], $params['repo'], $params['pull_number']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Activity\MarkRepoNotificationsAsRead\Response\Applicationjson\H202|Schema\ValidationError|Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'subscription' == $pathChunks[4]) {
                                    if ('PUT /repos/{owner}/{repo}/subscription' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscription::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscription::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Subscription();
                                        }
                                        $operation = new Operation\Activity\SetRepoSubscription($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Subscription::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\RepositorySubscription {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'topics' == $pathChunks[4]) {
                                    if ('PUT /repos/{owner}/{repo}/topics' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Topics::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Topics::class] = $this->hydrators->getObjectMapperOperation🌀Repos🌀CbOwnerRcb🌀CbRepoRcb🌀Topics();
                                        }
                                        $operation = new Operation\Repos\ReplaceAllTopics($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repos\CbOwnerRcb\CbRepoRcb\Topics::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Topic|Schema\BasicError|Schema\ValidationErrorSimple {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                } elseif (array_key_exists(4, $pathChunks) == true && 'vulnerability-alerts' == $pathChunks[4]) {
                                    if ('PUT /repos/{owner}/{repo}/vulnerability-alerts' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        $operation = new Operation\Repos\EnableVulnerabilityAlerts($params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : \Psr\Http\Message\ResponseInterface {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'repositories' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{repository_id}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'environments' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{environment_name}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'secrets' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{secret_name}' == $pathChunks[6]) {
                                            if ('PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('repository_id', 'environment_name', 'secret_name')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Repositories🌀CbRepositoryIdRcb🌀Environments🌀CbEnvironmentNameRcb🌀Secrets🌀CbSecretNameRcb();
                                                }
                                                $operation = new Operation\Actions\CreateOrUpdateEnvironmentSecret($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Repositories\CbRepositoryIdRcb\Environments\CbEnvironmentNameRcb\Secrets\CbSecretNameRcb::class], $params['repository_id'], $params['environment_name'], $params['secret_name']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'scim' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'v2' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'organizations' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{org}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && 'Users' == $pathChunks[5]) {
                                        if (array_key_exists(6, $pathChunks) == true && '{scim_user_id}' == $pathChunks[6]) {
                                            if ('PUT /scim/v2/organizations/{org}/Users/{scim_user_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('org', 'scim_user_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users\CbScimUserIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users\CbScimUserIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Scim🌀V2🌀Organizations🌀CbOrgRcb🌀Users🌀CbScimUserIdRcb();
                                                }
                                                $operation = new Operation\Scim\SetInformationForProvisionedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Scim\V2\Organizations\CbOrgRcb\Users\CbScimUserIdRcb::class], $params['org'], $params['scim_user_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\ScimUser|Schema\ScimError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'teams' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && '{team_id}' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'members' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('PUT /teams/{team_id}/members/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('team_id', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Members\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Members\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Members🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Teams\AddMemberLegacy($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Members\CbUsernameRcb::class], $params['team_id'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'memberships' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{username}' == $pathChunks[4]) {
                                    if ('PUT /teams/{team_id}/memberships/{username}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('team_id', 'username')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Memberships\CbUsernameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Memberships\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Memberships🌀CbUsernameRcb();
                                        }
                                        $operation = new Operation\Teams\AddOrUpdateMembershipForUserLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Memberships\CbUsernameRcb::class], $params['team_id'], $params['username']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\TeamMembership|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'projects' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{project_id}' == $pathChunks[4]) {
                                    if ('PUT /teams/{team_id}/projects/{project_id}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('team_id', 'project_id')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Projects🌀CbProjectIdRcb();
                                        }
                                        $operation = new Operation\Teams\AddOrUpdateProjectPermissionsLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Projects\CbProjectIdRcb::class], $params['team_id'], $params['project_id']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\Operation\Orgs\RemoveOutsideCollaborator\Response\Applicationjson\H422|Schema\BasicError|Schema\ValidationError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            } elseif (array_key_exists(3, $pathChunks) == true && 'repos' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{owner}' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{repo}' == $pathChunks[5]) {
                                        if ('PUT /teams/{team_id}/repos/{owner}/{repo}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('team_id', 'owner', 'repo')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\Teams\CbTeamIdRcb\Repos\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Repos\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀Teams🌀CbTeamIdRcb🌀Repos🌀CbOwnerRcb🌀CbRepoRcb();
                                            }
                                            $operation = new Operation\Teams\AddOrUpdateRepoPermissionsLegacy($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\Teams\CbTeamIdRcb\Repos\CbOwnerRcb\CbRepoRcb::class], $params['team_id'], $params['owner'], $params['repo']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError|Schema\ValidationError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    } elseif (array_key_exists(1, $pathChunks) == true && 'user' == $pathChunks[1]) {
                        if (array_key_exists(2, $pathChunks) == true && 'blocks' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{username}' == $pathChunks[3]) {
                                if ('PUT /user/blocks/{username}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\Blocks\CbUsernameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Blocks\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Blocks🌀CbUsernameRcb();
                                    }
                                    $operation = new Operation\Users\Block($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Blocks\CbUsernameRcb::class], $params['username']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError|Schema\ValidationError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'codespaces' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && 'secrets' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{secret_name}' == $pathChunks[4]) {
                                    if ('PUT /user/codespaces/secrets/{secret_name}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('secret_name')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀Secrets🌀CbSecretNameRcb();
                                        }
                                        $operation = new Operation\Codespaces\CreateOrUpdateSecretForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb::class], $params['secret_name']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\EmptyObject|Schema\ValidationError|Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    } elseif (array_key_exists(5, $pathChunks) == true && 'repositories' == $pathChunks[5]) {
                                        if ('PUT /user/codespaces/secrets/{secret_name}/repositories' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('secret_name')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀Secrets🌀CbSecretNameRcb🌀Repositories();
                                            }
                                            $operation = new Operation\Codespaces\SetRepositoriesForSecretForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories::class], $params['secret_name']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        } elseif (array_key_exists(6, $pathChunks) == true && '{repository_id}' == $pathChunks[6]) {
                                            if ('PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}' == $call) {
                                                $requestBodyData = array();
                                                foreach (\array_keys($params) as $param) {
                                                    if (\in_array($param, array('secret_name', 'repository_id')) != false) {
                                                        \array_push($requestBodyData, $param);
                                                    }
                                                }
                                                if (\array_key_exists(Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class, $this->hydrator) == false) {
                                                    $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Codespaces🌀Secrets🌀CbSecretNameRcb🌀Repositories🌀CbRepositoryIdRcb();
                                                }
                                                $operation = new Operation\Codespaces\AddRepositoryForSecretForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Codespaces\Secrets\CbSecretNameRcb\Repositories\CbRepositoryIdRcb::class], $params['secret_name'], $params['repository_id']);
                                                $request = $operation->createRequest($requestBodyData);
                                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                    return $operation->createResponse($response);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'following' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{username}' == $pathChunks[3]) {
                                if ('PUT /user/following/{username}' == $call) {
                                    $requestBodyData = array();
                                    foreach (\array_keys($params) as $param) {
                                        if (\in_array($param, array('username')) != false) {
                                            \array_push($requestBodyData, $param);
                                        }
                                    }
                                    if (\array_key_exists(Hydrator\Operation\User\Following\CbUsernameRcb::class, $this->hydrator) == false) {
                                        $this->hydrator[Hydrator\Operation\User\Following\CbUsernameRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Following🌀CbUsernameRcb();
                                    }
                                    $operation = new Operation\Users\Follow($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Following\CbUsernameRcb::class], $params['username']);
                                    $request = $operation->createRequest($requestBodyData);
                                    return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                        return $operation->createResponse($response);
                                    });
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'installations' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{installation_id}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && 'repositories' == $pathChunks[4]) {
                                    if (array_key_exists(5, $pathChunks) == true && '{repository_id}' == $pathChunks[5]) {
                                        if ('PUT /user/installations/{installation_id}/repositories/{repository_id}' == $call) {
                                            $requestBodyData = array();
                                            foreach (\array_keys($params) as $param) {
                                                if (\in_array($param, array('installation_id', 'repository_id')) != false) {
                                                    \array_push($requestBodyData, $param);
                                                }
                                            }
                                            if (\array_key_exists(Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories\CbRepositoryIdRcb::class, $this->hydrator) == false) {
                                                $this->hydrator[Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories\CbRepositoryIdRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Installations🌀CbInstallationIdRcb🌀Repositories🌀CbRepositoryIdRcb();
                                            }
                                            $operation = new Operation\Apps\AddRepoToInstallationForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Installations\CbInstallationIdRcb\Repositories\CbRepositoryIdRcb::class], $params['installation_id'], $params['repository_id']);
                                            $request = $operation->createRequest($requestBodyData);
                                            return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                                return $operation->createResponse($response);
                                            });
                                        }
                                    }
                                }
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'interaction-limits' == $pathChunks[2]) {
                            if ('PUT /user/interaction-limits' == $call) {
                                $requestBodyData = array();
                                foreach (\array_keys($params) as $param) {
                                    if (\in_array($param, array()) != false) {
                                        \array_push($requestBodyData, $param);
                                    }
                                }
                                if (\array_key_exists(Hydrator\Operation\User\InteractionLimits::class, $this->hydrator) == false) {
                                    $this->hydrator[Hydrator\Operation\User\InteractionLimits::class] = $this->hydrators->getObjectMapperOperation🌀User🌀InteractionLimits();
                                }
                                $operation = new Operation\Interactions\SetRestrictionsForAuthenticatedUser($this->requestSchemaValidator, $this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\InteractionLimits::class]);
                                $request = $operation->createRequest($requestBodyData);
                                return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\InteractionLimitResponse|Schema\ValidationError {
                                    return $operation->createResponse($response);
                                });
                            }
                        } elseif (array_key_exists(2, $pathChunks) == true && 'starred' == $pathChunks[2]) {
                            if (array_key_exists(3, $pathChunks) == true && '{owner}' == $pathChunks[3]) {
                                if (array_key_exists(4, $pathChunks) == true && '{repo}' == $pathChunks[4]) {
                                    if ('PUT /user/starred/{owner}/{repo}' == $call) {
                                        $requestBodyData = array();
                                        foreach (\array_keys($params) as $param) {
                                            if (\in_array($param, array('owner', 'repo')) != false) {
                                                \array_push($requestBodyData, $param);
                                            }
                                        }
                                        if (\array_key_exists(Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class, $this->hydrator) == false) {
                                            $this->hydrator[Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class] = $this->hydrators->getObjectMapperOperation🌀User🌀Starred🌀CbOwnerRcb🌀CbRepoRcb();
                                        }
                                        $operation = new Operation\Activity\StarRepoForAuthenticatedUser($this->responseSchemaValidator, $this->hydrator[Hydrator\Operation\User\Starred\CbOwnerRcb\CbRepoRcb::class], $params['owner'], $params['repo']);
                                        $request = $operation->createRequest($requestBodyData);
                                        return $this->browser->request($request->getMethod(), $request->getUri(), $request->withHeader('Authorization', $this->authentication->authHeader())->getHeaders(), $request->getBody())->then(function (\Psr\Http\Message\ResponseInterface $response) use($operation) : Schema\BasicError {
                                            return $operation->createResponse($response);
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
                break;
        }
        throw new \InvalidArgumentException();
    }
    public function webHooks() : \ApiClients\Contracts\OpenAPI\WebHooksInterface
    {
        return $this->webHooks;
    }
}
